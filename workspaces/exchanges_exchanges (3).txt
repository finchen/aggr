{
  "version": 7,
  "createdAt": 1703135571202,
  "updatedAt": 1727900052463,
  "name": "exchanges",
  "id": "exchanges",
  "states": {
    "panes": {
      "_id": "panes",
      "locked": false,
      "panes": {
        "chart": {
          "id": "chart",
          "name": "",
          "type": "chart",
          "markets": [
            "BINANCE:btcusdt",
            "ORDERBOOK:BINANCE-BTCUSDT"
          ],
          "zoom": 1
        },
        "chart copy 1": {
          "id": "chart copy 1",
          "name": "",
          "type": "chart",
          "zoom": 1,
          "settings": {
            "indicatorsErrors": {},
            "indicators": {
              "cvd": {
                "enabled": true,
                "name": "CVD",
                "description": "Cumulative Volume Delta",
                "script": "plotline(cum(vbuy - vsell))",
                "options": {
                  "priceScaleId": "cvd",
                  "priceFormat": {
                    "type": "volume"
                  },
                  "color": "rgba(209,212,220,0.81)",
                  "scaleMargins": {
                    "top": 0.73,
                    "bottom": 0.07
                  },
                  "visible": true,
                  "lineWidth": 1,
                  "priceLineStyle": 1,
                  "lineStyle": 1
                },
                "id": "cvd",
                "createdAt": 1700269685372,
                "updatedAt": 1702412185043,
                "series": [
                  "cvd"
                ],
                "unsavedChanges": false,
                "preview": {},
                "optionsDefinitions": {}
              },
              "liquidations": {
                "enabled": true,
                "name": "Liquidations",
                "description": "Liquidations by side",
                "script": "plothistogram(lbuy, color=options.upColor)\nplothistogram(-lsell, color=options.downColor)",
                "options": {
                  "priceFormat": {
                    "type": "volume"
                  },
                  "priceScaleId": "volume_liquidations",
                  "upColor": "rgb(255,76,243)",
                  "downColor": "rgb(255,183,77)",
                  "scaleMargins": {
                    "top": 0,
                    "bottom": 0.96
                  },
                  "visible": false
                },
                "id": "liquidations",
                "createdAt": 1700269685372,
                "updatedAt": 1700815523685,
                "series": [
                  "liquidations",
                  "n51e34d4"
                ],
                "preview": {},
                "unsavedChanges": false,
                "optionsDefinitions": {}
              },
              "price": {
                "enabled": true,
                "name": "Price",
                "script": "src = { sources: { \"BINANCE:btcusdt\":BINANCE:btcusdt }, localTimestamp: time }\r\n\r\nvar ohlc = options.useHeikinAshi ? avg_heikinashi(src) : options.useGaps ? avg_ohlc_with_gaps(src) : avg_ohlc(src)\r\n\r\nplotcandlestick(ohlc, id=price)",
                "options": {
                  "priceScaleId": "right",
                  "priceFormat": {
                    "auto": true,
                    "precision": 2,
                    "minMove": 0.01
                  },
                  "priceLineVisible": true,
                  "lastValueVisible": true,
                  "borderVisible": false,
                  "upColor": "rgba(255,235,59,0.52)",
                  "downColor": "rgba(242,54,69,0.64)",
                  "borderUpColor": "rgba(255,245,157,0.66)",
                  "borderDownColor": "rgba(178,40,51,0.52)",
                  "wickUpColor": "rgb(223,211,144)",
                  "wickDownColor": "rgba(239,67,82,0.47)",
                  "useGaps": false,
                  "useHeikinAshi": false,
                  "scaleMargins": {
                    "top": 0.04,
                    "bottom": 0.26
                  },
                  "visible": true
                },
                "id": "price",
                "createdAt": 1700269685372,
                "updatedAt": 1702412161838,
                "series": [
                  "price copy 1"
                ],
                "unsavedChanges": false,
                "preview": {},
                "optionsDefinitions": {}
              },
              "volume": {
                "enabled": true,
                "name": "Volume",
                "description": "Volume + delta",
                "script": "var _vbuy = source(vbuy, type=spot)\nvar _vsell = source(vsell, type=spot)\n\nif (upColor === 0) {\n  if (options.showDelta) {\n    upColor = options.upBgColor\n    downColor = options.downBgColor\n  } else {\n    upColor = options.upColor\n    downColor = options.downColor\n  }\n}\n\nif (options.showDelta) {\n  plothistogram({ time: time, value: Math.abs(_vbuy-_vsell), color: _vbuy - _vsell > 0 ? options.upColor : options.downColor})\n}\n\nplothistogram({ time: time, value: _vbuy + _vsell, color: _vbuy > _vsell ? upColor : downColor })",
                "options": {
                  "priceScaleId": "volume",
                  "priceFormat": {
                    "type": "volume"
                  },
                  "upColor": "rgba(76,175,80,0.62)",
                  "downColor": "rgba(242,54,69,0.71)",
                  "scaleMargins": {
                    "top": 0.87,
                    "bottom": 0
                  },
                  "showDelta": true,
                  "upBgColor": "rgba(178,181,190,0.33)",
                  "downBgColor": "rgba(93,96,107,0.38)",
                  "visible": true,
                  "lastValueVisible": true,
                  "color": "rgba(195,168,122,0.54)",
                  "showDeltaOnly": true,
                  "showBoth": true
                },
                "id": "volume",
                "createdAt": 1700269685372,
                "updatedAt": 1702530630403,
                "series": [
                  "volume copy 1",
                  "bpjdy1pu"
                ],
                "unsavedChanges": false,
                "preview": {},
                "displayName": "Volume",
                "optionsDefinitions": {}
              },
              "orderbook-overlays": {
                "script": "if (!pendingMarkers) {\r\n    // runs only once\r\n    pendingMarkers = []\r\n    spotColor = options.spotColor.match(/\\(([\\d.]+),([\\d.]+),([\\d.]+),?([\\d.]+)?\\)$/).slice(1,5).map(a => +a)\r\n    perpColor = options.perpColor.match(/\\(([\\d.]+),([\\d.]+),([\\d.]+),?([\\d.]+)?\\)$/).slice(1,5).map(a => +a)\r\n    binanceColor = options.binanceColor.match(/\\(([\\d.]+),([\\d.]+),([\\d.]+),?([\\d.]+)?\\)$/).slice(1,5).map(a => +a)\r\n    coinbaseColor = options.coinbaseColor.match(/\\(([\\d.]+),([\\d.]+),([\\d.]+),?([\\d.]+)?\\)$/).slice(1,5).map(a => +a)\r\n    //allOnColor = options.allOnColor.match(/\\(([\\d.]+),([\\d.]+),([\\d.]+),?([\\d.]+)?\\)$/).slice(1,5).map(a => +a)\r\n\r\n    spotOpacity = spotColor.pop()\r\n    perpOpacity = perpColor.pop()\r\n    binanceOpacity = binanceColor.pop()\r\n    coinbaseOpacity = coinbaseColor.pop()\r\n   // allOnColorOpacity = allOnColor.pop()\r\n\r\n    startOpacity = options.startOpacity || 0.1\r\n  \r\n    spotBuyAlerts  = [40, 63, 46, 60]\r\n    spotSellAlerts = [-40, -63, -46, -60]\r\n\r\n    perpBuyAlerts  = [38, 27, 36, 35]\r\n    perpSellAlerts = [-20, -27, -36, -35]\r\n\r\n    binanceBuyAlerts  = [70, 70, 70, 70]\r\n    binanceSellAlerts = [-70, -70, -70, -70]\r\n\r\n    coinbaseBuyAlerts  = [50, 50, 50, 50]\r\n    coinbaseSellAlerts = [-50, -50, -50, -50]\r\n\r\n    alerts = {\r\n      spot: {\r\n        buy: spotBuyAlerts,\r\n        sell: spotSellAlerts\r\n      },\r\n      perp: {\r\n        buy: perpBuyAlerts,\r\n        sell: perpSellAlerts\r\n      },\r\n      binance: {\r\n        buy: binanceBuyAlerts,\r\n        sell: binanceSellAlerts\r\n      },\r\n      coinbase: {\r\n        buy: coinbaseBuyAlerts,\r\n        sell: coinbaseSellAlerts\r\n      }\r\n    }\r\n\r\n    whichColors = {\r\n      spot: spotColor,\r\n      perp: perpColor,\r\n      binance: binanceColor,\r\n      coinbase: coinbaseColor\r\n    }\r\n\r\n    allOnIndicator = options.toggleAllOnIndicator || false,\r\n\r\n    showType = {\r\n      spot: options.toggleSpot,\r\n      perp: options.togglePerp,\r\n      binance: options.toggleBinance,\r\n      coinbase: options.toggleCoinbase,\r\n    }\r\n\r\n    lowerPercent = [0.3, 1, 2.5, 5]\r\n    upperPercent = [1, 2.5, 5, 10]  \r\n\r\n  }\r\n  // </STARTUP SCRIPT> \r\n\r\n  var ratiosPerp = ORDERBOOK:AGGRPERP-BTCUSDLEVELS.zratios\r\n  var ratiosSpot = ORDERBOOK:AGGRSPOT-BTCUSDLEVELS.zratios \r\n  var ratiosBinance = renderer.sources['ORDERBOOK:BINANCE-BTCUSDTLEVELS'] && renderer.sources['ORDERBOOK:BINANCE-BTCUSDTLEVELS'].zratios\r\n  var ratiosCoinbase = renderer.sources['ORDERBOOK:COINBASE-BTCUSDLEVELS'] && renderer.sources['ORDERBOOK:COINBASE-BTCUSDLEVELS'].zratios \r\n\r\n  var m = [\r\n    { which: 'perp', ratios: ratiosPerp || [], bands: [] },\r\n    { which: 'spot', ratios: ratiosSpot || [], bands: [] },\r\n    { which: 'binance', ratios: ratiosBinance || [], bands: [] },\r\n    { which: 'coinbase', ratios: ratiosCoinbase || [], bands: [] }\r\n  ]\r\n  \r\n  /*var ratiosPerp = ORDERBOOK:AGGRPERP-BTCUSDLEVELS.zratios\r\n  var ratiosSpot = ORDERBOOK:AGGRSPOT-BTCUSDLEVELS.zratios \r\n  var ratiosBinance = renderer.sources['ORDERBOOK:BINANCE-BTCUSDTLEVELS'].zratios\r\n  var ratiosCoinbase = renderer.sources['ORDERBOOK:COINBASE-BTCUSDLEVELS'].zratios \r\n\r\n  var perps = []\r\n  var spots = []\r\n  var binance = []\r\n  var coinbase = []\r\n*/\r\n  //var ratio = 0\r\n\r\n  // for each ratio\r\n  for(let ratioIndex = 0; ratioIndex < 4; ratioIndex++){\r\n\r\n    var allOn = true;\r\n\r\n    // for each type (perp, spot, binance, ...)\r\n    for(let typeIndex = 0; typeIndex < 4; typeIndex++){\r\n\r\n      var c = m[typeIndex]\r\n\r\n      if( showType[c.which]  === false ){\r\n        c.bands.push([0, 0, '']) \r\n        continue\r\n      }\r\n        \r\n      /*\r\n      var ratioPerp = ratiosPerp && ratiosPerp.length > ratioIndex && ratiosPerp[ratioIndex]\r\n      var ratioSpot =  ratiosSpot && ratiosSpot.length > ratioIndex && ratiosSpot[ratioIndex]\r\n      var ratioBinance =  ratiosBinance && ratiosBinance.length > ratioIndex && ratiosBinance[ratioIndex]\r\n      var ratioCoinbase =  ratiosCoinbase && ratiosCoinbase.length > ratioIndex && ratiosCoinbase[ratioIndex]\r\n      */\r\n      var ratio = c.ratios.length && c.ratios[ratioIndex]\r\n      var direction = Math.sign(ratio)\r\n      var buyAlert = alerts[c.which]['buy'][ratioIndex]\r\n      var sellAlert = alerts[c.which]['buy'][ratioIndex]\r\n      var threshold = direction > 0 ? buyAlert : sellAlert\r\n      var thresholdAbs = Math.abs(threshold)\r\n    \r\n      var lower = $price.close + -1 * direction * (($price.close  * lowerPercent[ratioIndex]) / 100)  \r\n      var upper = $price.close + -1 * direction * (($price.close  * upperPercent[ratioIndex]) / 100)\r\n\r\n      if( !ratio || Math.abs(ratio) < thresholdAbs ){\r\n          allOn = false\r\n          c.bands.push([0, 0, '']) \r\n      }else{\r\n\r\n          var alphaRatio = Math.abs(ratio) < thresholdAbs ? 0 : startOpacity + (1 - startOpacity) * ((Math.abs(ratio) - thresholdAbs) / (100 - thresholdAbs))\r\n          var alphaRatioRounded = Math.round(alphaRatio * 100) / 100 \r\n          var colorRatio = 'rgba(' + whichColors[c.which].join(',') + ',' + alphaRatioRounded + ')'\r\n          \r\n          c.bands.push([lower, upper, colorRatio])\r\n      }\r\n      \r\n    }// end for each type\r\n\r\n    if( allOnIndicator && allOn ){\r\n      for(let typeIndex = 0; typeIndex < 4; typeIndex++){\r\n        var c = m[typeIndex]\r\n        c.bands[ratioIndex] = [lower, upper, options.allOnColor]\r\n      }\r\n    }\r\n\r\n  } // end for each ratios\r\n\r\n\r\nvar i = 0\r\n\r\nfor(let ratioIndex = 0; ratioIndex < 4; ratioIndex++){\r\n\r\n    for(let typeIndex = 0; typeIndex < 4; typeIndex++){\r\n\r\n       var c = m[typeIndex]\r\n    \r\n       if( c.bands.length && c.bands[ratioIndex][0] !== 0 ) {\r\n         renderer.indicators[indicatorId].series[i] = {\r\n          time: time, \r\n          lowerValue: c.bands[ratioIndex][0],\r\n          higherValue: c.bands[ratioIndex][1],\r\n          color:  c.bands[ratioIndex][2]\r\n        }\r\n      }\r\n      i++\r\n    }\r\n}\r\n\r\n\r\n\r\nreturn\r\n//perp\r\nbrokenarea({\r\n        time: time, \r\n        lowerValue: 0,\r\n        higherValue: 0,\r\n        color:  options.color\r\n      })\r\nbrokenarea({\r\n        time: time, \r\n        lowerValue: 0,\r\n        higherValue: 0,\r\n        color:  options.color\r\n      })\r\nbrokenarea({\r\n        time: time, \r\n        lowerValue: 0,\r\n        higherValue: 0,\r\n        color:  options.color\r\n      })\r\nbrokenarea({\r\n        time: time, \r\n        lowerValue: 0,\r\n        higherValue: 0,\r\n        color:  options.color\r\n      })     \r\n      brokenarea({\r\n        time: time, \r\n        lowerValue: 0,\r\n        higherValue: 0,\r\n        color:  options.color\r\n      })\r\nbrokenarea({\r\n        time: time, \r\n        lowerValue: 0,\r\n        higherValue: 0,\r\n        color:  options.color\r\n      })\r\nbrokenarea({\r\n        time: time, \r\n        lowerValue: 0,\r\n        higherValue: 0,\r\n        color:  options.color\r\n      })\r\nbrokenarea({\r\n        time: time, \r\n        lowerValue: 0,\r\n        higherValue: 0,\r\n        color:  options.color\r\n      })   \r\n      brokenarea({\r\n        time: time, \r\n        lowerValue: 0,\r\n        higherValue: 0,\r\n        color:  options.color\r\n      })\r\nbrokenarea({\r\n        time: time, \r\n        lowerValue: 0,\r\n        higherValue: 0,\r\n        color:  options.color\r\n      })\r\nbrokenarea({\r\n        time: time, \r\n        lowerValue: 0,\r\n        higherValue: 0,\r\n        color:  options.color\r\n      })\r\nbrokenarea({\r\n        time: time, \r\n        lowerValue: 0,\r\n        higherValue: 0,\r\n        color:  options.color\r\n      })   \r\n      brokenarea({\r\n        time: time, \r\n        lowerValue: 0,\r\n        higherValue: 0,\r\n        color:  options.color\r\n      })\r\nbrokenarea({\r\n        time: time, \r\n        lowerValue: 0,\r\n        higherValue: 0,\r\n        color:  options.color\r\n      })\r\nbrokenarea({\r\n        time: time, \r\n        lowerValue: 0,\r\n        higherValue: 0,\r\n        color:  options.color\r\n      })\r\nbrokenarea({\r\n        time: time, \r\n        lowerValue: 0,\r\n        higherValue: 0,\r\n        color:  options.color\r\n      })",
                "id": "orderbook-overlays",
                "name": "Orderbook Overlays",
                "options": {
                  "priceScaleId": "right",
                  "startOpacity": null,
                  "allOnColor": "rgb(242,54,69)",
                  "binanceColor": "rgb(255,255,255)",
                  "perpColor": "rgb(41,98,255)",
                  "spotColor": "rgb(255,235,59)",
                  "scaleMargins": {
                    "top": 0.04,
                    "bottom": 0.26
                  },
                  "coinbaseColor": "rgb(247,124,128)",
                  "visible": true,
                  "priceFormat": {
                    "type": "price",
                    "precision": 2,
                    "minMove": 0.01,
                    "auto": true
                  },
                  "toggleSpot": false,
                  "togglePerp": false,
                  "toggleBinance": true,
                  "toggleCoinbase": false,
                  "toggleAllOnIndicator": null
                },
                "description": null,
                "createdAt": 1703135778962,
                "updatedAt": 1703135778962,
                "unsavedChanges": false,
                "optionsDefinitions": {},
                "series": [
                  "orderbook-overlays copy 2",
                  "qoivjka2",
                  "xxb6d7gx",
                  "hx65vckb",
                  "hftfdowh",
                  "lm7zqrpa",
                  "ajv0zd2t",
                  "qilb0fzh",
                  "qe2l7rre",
                  "7br239w1",
                  "s29ort2u",
                  "rrtpfgbt",
                  "qqs7r3o0",
                  "ukhhr37d",
                  "lfiwjyw1",
                  "sc7oqfkf"
                ],
                "displayName": "Orderbook Overlays"
              },
              "obv-spots copy 1": {
                "script": "if (markers === 0) {\r\n  // first script execution (0 is default values for all persistent variables)\r\n\r\n  // create a var to store already drawn markers\r\n  markers = []\r\n\r\n  // contain the last marker that can change as the bar update\r\n  repaintableMarker = null\r\n\r\n  // if candle body has a price percent change less than bodyPercentWatch, we start a refinement\r\n  bodyPercentWatch = options.bodyPercentWatch || 0.3\r\n\r\n  // if a wick is x times greater than the other, we might use it to refine change the side\r\n  wickRatioThreshold = options.wickRatioThreshold || 1.5\r\n\r\n  // paint a marker when OBV has been refined (changed of direction)\r\n  toggleDebug = options.toggleDebug || false\r\n\r\n  // when on, we calculate the wick percent difference and keep only that volume to add to OBV \r\n  toggleVolumeWick = options.toggleVolumeWick || false\r\n\r\n  togglePrintNormalObv = options.togglePrintNormalObv || false\r\n}\r\nif (repaintableMarker && repaintableMarker.time < time) {\r\n  // bar is +1 since active marker was added, lock it in the array\r\n  markers.push(repaintableMarker)\r\n\r\n  // free up active marker\r\n  repaintableMarker = null\r\n}\r\n\r\nvar newMarker = null\r\nvar _vbuy = source(vbuy, type=spot)\r\nvar _vsell = source(vsell, type=spot)\r\nvar _open = $price.open\r\nvar _high = $price.high\r\nvar _low = $price.low\r\nvar _close = $price.close\r\n\r\nvar sign = _close > _open ? 1 : -1\r\nvar volume = _vbuy + _vsell\r\n\r\nvar bodySize = Math.abs(_close - _open);\r\nvar priceChange = (_close - _open) / _open; // Percentage change\r\n\r\nif( togglePrintNormalObv ){\r\n    plotline(cum(sign * volume), title=\"Original\", color=options.originalObvColor)\r\n}\r\n\r\nvar improved = false\r\n\r\n// Check if price change is less than 0.4%\r\nif (Math.abs(priceChange) < bodyPercentWatch/100 ) {\r\n    var upperWickSize = _high - _close;\r\n    var lowerWickSize = _close - _low;\r\n\r\n    // Calculate the thresholds\r\n    var upperWickThreshold = wickRatioThreshold * lowerWickSize;\r\n    var lowerWickThreshold = wickRatioThreshold * upperWickSize;\r\n\r\n    // Check if upper and lower wicks have similar sizes\r\n    if (upperWickSize < upperWickThreshold && lowerWickSize < lowerWickThreshold) {\r\n        // Neutral move, don't add volume\r\n        sign = 0\r\n        improved = true\r\n    }else{\r\n        // Calculate the thresholds\r\n        var upperWickThreshold = wickRatioThreshold * lowerWickSize;\r\n        var lowerWickThreshold = wickRatioThreshold * upperWickSize;\r\n\r\n        // Determine the side based on wick sizes\r\n        // upper: 500, lower 100\r\n        if (upperWickSize > upperWickThreshold) {\r\n            improved = sign !== -1\r\n            // More selling happened, add volume as negative\r\n            sign = -1\r\n            if( toggleVolumeWick ) {\r\n                improved = true\r\n                var percentageDifference = ((upperWickSize - lowerWickSize) / upperWickSize);\r\n                volume = percentageDifference * volume\r\n            }\r\n        } else if (lowerWickSize > lowerWickThreshold) {\r\n            improved = sign !== 1\r\n            // More buying happened, add volume as positive\r\n            sign = 1\r\n            if( toggleVolumeWick ) {\r\n                improved = true\r\n                var percentageDifference = ((lowerWickSize - upperWickSize) / lowerWickSize);\r\n                volume = percentageDifference * volume\r\n            }\r\n        }\r\n    }\r\n\r\n    if( improved && toggleDebug){\r\n        if (sign == -1) {\r\n            // newMarker is a temporary variable (not included in the indicator state)\r\n            // to avoid it being treated as persistent variable we wrap it inside parenthesis\r\n            (newMarker) = {\r\n                time: time,\r\n                position: 'aboveBar',\r\n                color: 'red',\r\n                shape: 'arrowDown'\r\n            }\r\n        }\r\n\r\n        if (sign == 1) {\r\n            (newMarker) = {\r\n                time: time,\r\n                position: 'belowBar',\r\n                color: 'lime',\r\n                shape: 'arrowUp'\r\n            }\r\n        } \r\n    }\r\n}\r\n\r\n\r\nif (newMarker || (repaintableMarker && !newMarker)) {\r\n  // override persistent variable repaintable marker\r\n  repaintableMarker = newMarker\r\n  \r\n  var index = togglePrintNormalObv ? 1 : 0\r\n\r\n  if (series[index].setMarkers) {\r\n    series[index].setMarkers(markers.concat(repaintableMarker))\r\n  }\r\n}\r\n\r\nvar obv = cum(sign * volume)\r\nplotline(obv, title=\"S\", color=options.refinedObvColor)",
                "id": "obv-spots copy 1",
                "name": "OBV spots",
                "options": {
                  "priceScaleId": "obv-copy-1",
                  "visible": true,
                  "scaleMargins": {
                    "top": 0.73,
                    "bottom": 0.07
                  },
                  "lineStyle": 1,
                  "color": "rgba(255,235,59,0.81)",
                  "bodyPercentWatch": 0.3,
                  "wickDiffPercent": 90,
                  "debug": null,
                  "toggleDebug": true,
                  "toggleVolumeWick": false,
                  "wickRatioThreshold": 1.5,
                  "togglePrintNormalObv": false,
                  "originalObvColor": "rgb(178,181,190)",
                  "refinedObvColor": "rgb(41,98,255)"
                },
                "description": null,
                "createdAt": 1701126053261,
                "updatedAt": 1701126059594,
                "unsavedChanges": false,
                "optionsDefinitions": {},
                "series": [
                  "obv-spots copy 1",
                  "di3hp6kx"
                ],
                "displayName": "OBV spots"
              }
            },
            "indicatorOrder": [
              "cvd",
              "liquidations",
              "price",
              "volume",
              "orderbook-overlays",
              "obv-spots copy 1"
            ],
            "priceScales": {
              "right": {
                "scaleMargins": {
                  "top": 0.04,
                  "bottom": 0.26
                },
                "priceFormat": {
                  "precision": 2,
                  "minMove": 0.01
                }
              },
              "cvd": {
                "scaleMargins": {
                  "top": 0.73,
                  "bottom": 0.07
                },
                "indicators": [
                  "CVD"
                ]
              },
              "volume_liquidations": {
                "scaleMargins": {
                  "top": 0,
                  "bottom": 0.96
                }
              },
              "volume": {
                "scaleMargins": {
                  "top": 0.87,
                  "bottom": 0
                },
                "indicators": [
                  "Volume"
                ]
              },
              "obv-copy-1": {
                "scaleMargins": {
                  "top": 0.73,
                  "bottom": 0.07
                },
                "indicators": [
                  "OBV spots"
                ]
              }
            },
            "layouting": false,
            "showIndicators": true,
            "timeframe": "300",
            "refreshRate": 1000,
            "showAlerts": true,
            "showAlertsLabel": true,
            "showLegend": true,
            "fillGapsWithEmpty": true,
            "showHorizontalGridlines": false,
            "horizontalGridlinesColor": "rgba(255,255,255,.1)",
            "showVerticalGridlines": false,
            "verticalGridlinesColor": "rgba(255,255,255,.1)",
            "showWatermark": false,
            "watermarkColor": "rgba(255,255,255,.1)",
            "showBorder": true,
            "borderColor": null,
            "showLeftScale": false,
            "showRightScale": true,
            "showTimeScale": true,
            "hiddenMarkets": {},
            "barSpacing": 2.2354596788883137
          },
          "markets": [
            "COINBASE:BTC-USD",
            "ORDERBOOK:COINBASE-BTCUSD"
          ]
        },
        "chart copy 2": {
          "id": "chart copy 2",
          "name": "",
          "type": "chart",
          "zoom": 1,
          "settings": {
            "indicatorsErrors": {},
            "indicators": {
              "cvd": {
                "enabled": true,
                "name": "CVD",
                "description": "Cumulative Volume Delta",
                "script": "plotline(cum(vbuy - vsell))",
                "options": {
                  "priceScaleId": "cvd",
                  "priceFormat": {
                    "type": "volume"
                  },
                  "color": "rgba(209,212,220,0.81)",
                  "scaleMargins": {
                    "top": 0.73,
                    "bottom": 0.07
                  },
                  "visible": true,
                  "lineWidth": 1,
                  "priceLineStyle": 1,
                  "lineStyle": 1
                },
                "id": "cvd",
                "createdAt": 1700269685372,
                "updatedAt": 1702412185043,
                "series": [
                  "cvd"
                ],
                "unsavedChanges": false,
                "preview": {},
                "optionsDefinitions": {}
              },
              "liquidations": {
                "enabled": true,
                "name": "Liquidations",
                "description": "Liquidations by side",
                "script": "plothistogram(lbuy, color=options.upColor)\nplothistogram(-lsell, color=options.downColor)",
                "options": {
                  "priceFormat": {
                    "type": "volume"
                  },
                  "priceScaleId": "volume_liquidations",
                  "upColor": "rgb(255,76,243)",
                  "downColor": "rgb(255,183,77)",
                  "scaleMargins": {
                    "top": 0,
                    "bottom": 0.96
                  },
                  "visible": false
                },
                "id": "liquidations",
                "createdAt": 1700269685372,
                "updatedAt": 1700815523685,
                "series": [
                  "liquidations",
                  "n51e34d4"
                ],
                "preview": {},
                "unsavedChanges": false,
                "optionsDefinitions": {}
              },
              "price": {
                "enabled": true,
                "name": "Price",
                "script": "src = { sources: { \"BINANCE:btcusdt\":BINANCE:btcusdt }, localTimestamp: time }\r\n\r\nvar ohlc = options.useHeikinAshi ? avg_heikinashi(src) : options.useGaps ? avg_ohlc_with_gaps(src) : avg_ohlc(src)\r\n\r\nplotcandlestick(ohlc, id=price)",
                "options": {
                  "priceScaleId": "right",
                  "priceFormat": {
                    "auto": true,
                    "precision": 2,
                    "minMove": 0.01
                  },
                  "priceLineVisible": true,
                  "lastValueVisible": true,
                  "borderVisible": false,
                  "upColor": "rgba(255,235,59,0.52)",
                  "downColor": "rgba(242,54,69,0.64)",
                  "borderUpColor": "rgba(255,245,157,0.66)",
                  "borderDownColor": "rgba(178,40,51,0.52)",
                  "wickUpColor": "rgb(223,211,144)",
                  "wickDownColor": "rgba(239,67,82,0.47)",
                  "useGaps": false,
                  "useHeikinAshi": false,
                  "scaleMargins": {
                    "top": 0.29,
                    "bottom": 0.34
                  },
                  "visible": true
                },
                "id": "price",
                "createdAt": 1700269685372,
                "updatedAt": 1702412161838,
                "series": [
                  "price copy 4"
                ],
                "unsavedChanges": false,
                "preview": {},
                "optionsDefinitions": {}
              },
              "volume": {
                "enabled": true,
                "name": "Volume",
                "description": "Volume + delta",
                "script": "var _vbuy = source(vbuy, type=spot)\nvar _vsell = source(vsell, type=spot)\n\nif (upColor === 0) {\n  if (options.showDelta) {\n    upColor = options.upBgColor\n    downColor = options.downBgColor\n  } else {\n    upColor = options.upColor\n    downColor = options.downColor\n  }\n}\n\nif (options.showDelta) {\n  plothistogram({ time: time, value: Math.abs(_vbuy-_vsell), color: _vbuy - _vsell > 0 ? options.upColor : options.downColor})\n}\n\nplothistogram({ time: time, value: _vbuy + _vsell, color: _vbuy > _vsell ? upColor : downColor })",
                "options": {
                  "priceScaleId": "volume",
                  "priceFormat": {
                    "type": "volume"
                  },
                  "upColor": "rgba(76,175,80,0.62)",
                  "downColor": "rgba(242,54,69,0.71)",
                  "scaleMargins": {
                    "top": 0.87,
                    "bottom": 0
                  },
                  "showDelta": true,
                  "upBgColor": "rgba(178,181,190,0.33)",
                  "downBgColor": "rgba(93,96,107,0.38)",
                  "visible": true,
                  "lastValueVisible": true,
                  "color": "rgba(195,168,122,0.54)",
                  "showDeltaOnly": true,
                  "showBoth": true
                },
                "id": "volume",
                "createdAt": 1700269685372,
                "updatedAt": 1702530630403,
                "series": [
                  "volume copy 1",
                  "bpjdy1pu"
                ],
                "unsavedChanges": false,
                "preview": {},
                "displayName": "Volume",
                "optionsDefinitions": {}
              },
              "orderbook-overlays": {
                "script": "if (!pendingMarkers) {\r\n    // runs only once\r\n    pendingMarkers = []\r\n    spotColor = options.spotColor.match(/\\(([\\d.]+),([\\d.]+),([\\d.]+),?([\\d.]+)?\\)$/).slice(1,5).map(a => +a)\r\n    perpColor = options.perpColor.match(/\\(([\\d.]+),([\\d.]+),([\\d.]+),?([\\d.]+)?\\)$/).slice(1,5).map(a => +a)\r\n    binanceColor = options.binanceColor.match(/\\(([\\d.]+),([\\d.]+),([\\d.]+),?([\\d.]+)?\\)$/).slice(1,5).map(a => +a)\r\n    coinbaseColor = options.coinbaseColor.match(/\\(([\\d.]+),([\\d.]+),([\\d.]+),?([\\d.]+)?\\)$/).slice(1,5).map(a => +a)\r\n    //allOnColor = options.allOnColor.match(/\\(([\\d.]+),([\\d.]+),([\\d.]+),?([\\d.]+)?\\)$/).slice(1,5).map(a => +a)\r\n\r\n    spotOpacity = spotColor.pop()\r\n    perpOpacity = perpColor.pop()\r\n    binanceOpacity = binanceColor.pop()\r\n    coinbaseOpacity = coinbaseColor.pop()\r\n   // allOnColorOpacity = allOnColor.pop()\r\n\r\n    startOpacity = options.startOpacity || 0.1\r\n  \r\n    spotBuyAlerts  = [40, 63, 46, 60]\r\n    spotSellAlerts = [-40, -63, -46, -60]\r\n\r\n    perpBuyAlerts  = [38, 27, 36, 35]\r\n    perpSellAlerts = [-20, -27, -36, -35]\r\n\r\n    binanceBuyAlerts  = [70, 70, 70, 70]\r\n    binanceSellAlerts = [-70, -70, -70, -70]\r\n\r\n    coinbaseBuyAlerts  = [50, 50, 50, 50]\r\n    coinbaseSellAlerts = [-50, -50, -50, -50]\r\n\r\n    alerts = {\r\n      spot: {\r\n        buy: spotBuyAlerts,\r\n        sell: spotSellAlerts\r\n      },\r\n      perp: {\r\n        buy: perpBuyAlerts,\r\n        sell: perpSellAlerts\r\n      },\r\n      binance: {\r\n        buy: binanceBuyAlerts,\r\n        sell: binanceSellAlerts\r\n      },\r\n      coinbase: {\r\n        buy: coinbaseBuyAlerts,\r\n        sell: coinbaseSellAlerts\r\n      }\r\n    }\r\n\r\n    whichColors = {\r\n      spot: spotColor,\r\n      perp: perpColor,\r\n      binance: binanceColor,\r\n      coinbase: coinbaseColor\r\n    }\r\n\r\n    allOnIndicator = options.toggleAllOnIndicator || false,\r\n\r\n    showType = {\r\n      spot: options.toggleSpot,\r\n      perp: options.togglePerp,\r\n      binance: options.toggleBinance,\r\n      coinbase: options.toggleCoinbase,\r\n    }\r\n\r\n    lowerPercent = [0.3, 1, 2.5, 5]\r\n    upperPercent = [1, 2.5, 5, 10]  \r\n\r\n  }\r\n  // </STARTUP SCRIPT> \r\n\r\n  var ratiosPerp = ORDERBOOK:AGGRPERP-BTCUSDLEVELS.zratios\r\n  var ratiosSpot = ORDERBOOK:AGGRSPOT-BTCUSDLEVELS.zratios \r\n  var ratiosBinance = renderer.sources['ORDERBOOK:BINANCE-BTCUSDTLEVELS'] && renderer.sources['ORDERBOOK:BINANCE-BTCUSDTLEVELS'].zratios\r\n  var ratiosCoinbase = renderer.sources['ORDERBOOK:COINBASE-BTCUSDLEVELS'] && renderer.sources['ORDERBOOK:COINBASE-BTCUSDLEVELS'].zratios \r\n\r\n  var m = [\r\n    { which: 'perp', ratios: ratiosPerp || [], bands: [] },\r\n    { which: 'spot', ratios: ratiosSpot || [], bands: [] },\r\n    { which: 'binance', ratios: ratiosBinance || [], bands: [] },\r\n    { which: 'coinbase', ratios: ratiosCoinbase || [], bands: [] }\r\n  ]\r\n  \r\n  /*var ratiosPerp = ORDERBOOK:AGGRPERP-BTCUSDLEVELS.zratios\r\n  var ratiosSpot = ORDERBOOK:AGGRSPOT-BTCUSDLEVELS.zratios \r\n  var ratiosBinance = renderer.sources['ORDERBOOK:BINANCE-BTCUSDTLEVELS'].zratios\r\n  var ratiosCoinbase = renderer.sources['ORDERBOOK:COINBASE-BTCUSDLEVELS'].zratios \r\n\r\n  var perps = []\r\n  var spots = []\r\n  var binance = []\r\n  var coinbase = []\r\n*/\r\n  //var ratio = 0\r\n\r\n  // for each ratio\r\n  for(let ratioIndex = 0; ratioIndex < 4; ratioIndex++){\r\n\r\n    var allOn = true;\r\n\r\n    // for each type (perp, spot, binance, ...)\r\n    for(let typeIndex = 0; typeIndex < 4; typeIndex++){\r\n\r\n      var c = m[typeIndex]\r\n\r\n      if( showType[c.which]  === false ){\r\n        c.bands.push([0, 0, '']) \r\n        continue\r\n      }\r\n        \r\n      /*\r\n      var ratioPerp = ratiosPerp && ratiosPerp.length > ratioIndex && ratiosPerp[ratioIndex]\r\n      var ratioSpot =  ratiosSpot && ratiosSpot.length > ratioIndex && ratiosSpot[ratioIndex]\r\n      var ratioBinance =  ratiosBinance && ratiosBinance.length > ratioIndex && ratiosBinance[ratioIndex]\r\n      var ratioCoinbase =  ratiosCoinbase && ratiosCoinbase.length > ratioIndex && ratiosCoinbase[ratioIndex]\r\n      */\r\n      var ratio = c.ratios.length && c.ratios[ratioIndex]\r\n      var direction = Math.sign(ratio)\r\n      var buyAlert = alerts[c.which]['buy'][ratioIndex]\r\n      var sellAlert = alerts[c.which]['buy'][ratioIndex]\r\n      var threshold = direction > 0 ? buyAlert : sellAlert\r\n      var thresholdAbs = Math.abs(threshold)\r\n    \r\n      var lower = $price.close + -1 * direction * (($price.close  * lowerPercent[ratioIndex]) / 100)  \r\n      var upper = $price.close + -1 * direction * (($price.close  * upperPercent[ratioIndex]) / 100)\r\n\r\n      if( !ratio || Math.abs(ratio) < thresholdAbs ){\r\n          allOn = false\r\n          c.bands.push([0, 0, '']) \r\n      }else{\r\n\r\n          var alphaRatio = Math.abs(ratio) < thresholdAbs ? 0 : startOpacity + (1 - startOpacity) * ((Math.abs(ratio) - thresholdAbs) / (100 - thresholdAbs))\r\n          var alphaRatioRounded = Math.round(alphaRatio * 100) / 100 \r\n          var colorRatio = 'rgba(' + whichColors[c.which].join(',') + ',' + alphaRatioRounded + ')'\r\n          \r\n          c.bands.push([lower, upper, colorRatio])\r\n      }\r\n      \r\n    }// end for each type\r\n\r\n    if( allOnIndicator && allOn ){\r\n      for(let typeIndex = 0; typeIndex < 4; typeIndex++){\r\n        var c = m[typeIndex]\r\n        c.bands[ratioIndex] = [lower, upper, options.allOnColor]\r\n      }\r\n    }\r\n\r\n  } // end for each ratios\r\n\r\n\r\nvar i = 0\r\n\r\nfor(let ratioIndex = 0; ratioIndex < 4; ratioIndex++){\r\n\r\n    for(let typeIndex = 0; typeIndex < 4; typeIndex++){\r\n\r\n       var c = m[typeIndex]\r\n    \r\n       if( c.bands.length && c.bands[ratioIndex][0] !== 0 ) {\r\n         renderer.indicators[indicatorId].series[i] = {\r\n          time: time, \r\n          lowerValue: c.bands[ratioIndex][0],\r\n          higherValue: c.bands[ratioIndex][1],\r\n          color:  c.bands[ratioIndex][2]\r\n        }\r\n      }\r\n      i++\r\n    }\r\n}\r\n\r\n\r\n\r\nreturn\r\n//perp\r\nbrokenarea({\r\n        time: time, \r\n        lowerValue: 0,\r\n        higherValue: 0,\r\n        color:  options.color\r\n      })\r\nbrokenarea({\r\n        time: time, \r\n        lowerValue: 0,\r\n        higherValue: 0,\r\n        color:  options.color\r\n      })\r\nbrokenarea({\r\n        time: time, \r\n        lowerValue: 0,\r\n        higherValue: 0,\r\n        color:  options.color\r\n      })\r\nbrokenarea({\r\n        time: time, \r\n        lowerValue: 0,\r\n        higherValue: 0,\r\n        color:  options.color\r\n      })     \r\n      brokenarea({\r\n        time: time, \r\n        lowerValue: 0,\r\n        higherValue: 0,\r\n        color:  options.color\r\n      })\r\nbrokenarea({\r\n        time: time, \r\n        lowerValue: 0,\r\n        higherValue: 0,\r\n        color:  options.color\r\n      })\r\nbrokenarea({\r\n        time: time, \r\n        lowerValue: 0,\r\n        higherValue: 0,\r\n        color:  options.color\r\n      })\r\nbrokenarea({\r\n        time: time, \r\n        lowerValue: 0,\r\n        higherValue: 0,\r\n        color:  options.color\r\n      })   \r\n      brokenarea({\r\n        time: time, \r\n        lowerValue: 0,\r\n        higherValue: 0,\r\n        color:  options.color\r\n      })\r\nbrokenarea({\r\n        time: time, \r\n        lowerValue: 0,\r\n        higherValue: 0,\r\n        color:  options.color\r\n      })\r\nbrokenarea({\r\n        time: time, \r\n        lowerValue: 0,\r\n        higherValue: 0,\r\n        color:  options.color\r\n      })\r\nbrokenarea({\r\n        time: time, \r\n        lowerValue: 0,\r\n        higherValue: 0,\r\n        color:  options.color\r\n      })   \r\n      brokenarea({\r\n        time: time, \r\n        lowerValue: 0,\r\n        higherValue: 0,\r\n        color:  options.color\r\n      })\r\nbrokenarea({\r\n        time: time, \r\n        lowerValue: 0,\r\n        higherValue: 0,\r\n        color:  options.color\r\n      })\r\nbrokenarea({\r\n        time: time, \r\n        lowerValue: 0,\r\n        higherValue: 0,\r\n        color:  options.color\r\n      })\r\nbrokenarea({\r\n        time: time, \r\n        lowerValue: 0,\r\n        higherValue: 0,\r\n        color:  options.color\r\n      })",
                "id": "orderbook-overlays",
                "name": "Orderbook Overlays",
                "options": {
                  "priceScaleId": "right",
                  "startOpacity": null,
                  "allOnColor": "rgb(242,54,69)",
                  "binanceColor": "rgb(255,255,255)",
                  "perpColor": "rgb(41,98,255)",
                  "spotColor": "rgb(255,235,59)",
                  "scaleMargins": {
                    "top": 0.29,
                    "bottom": 0.34
                  },
                  "coinbaseColor": "rgb(247,124,128)",
                  "visible": false,
                  "priceFormat": {
                    "type": "price",
                    "precision": 2,
                    "minMove": 0.01,
                    "auto": true
                  },
                  "toggleSpot": false,
                  "togglePerp": false,
                  "toggleBinance": true,
                  "toggleCoinbase": false,
                  "toggleAllOnIndicator": null
                },
                "description": null,
                "createdAt": 1703135778962,
                "updatedAt": 1703135778962,
                "unsavedChanges": false,
                "optionsDefinitions": {},
                "series": [
                  "orderbook-overlays copy 3",
                  "ow3lowtx",
                  "3lqy99ry",
                  "3742blfv",
                  "wewb4lyu",
                  "03zn6axq",
                  "kf1f5onv",
                  "n81lip82",
                  "g86swhbl",
                  "63ewgtlb",
                  "khgdwbr4",
                  "gd6z2hy8",
                  "vykxpwzc",
                  "y6m6trr9",
                  "6o0jdm24",
                  "11b2vors"
                ],
                "displayName": "Orderbook Overlays"
              },
              "obv-spots copy 1": {
                "script": "if (markers === 0) {\r\n  // first script execution (0 is default values for all persistent variables)\r\n\r\n  // create a var to store already drawn markers\r\n  markers = []\r\n\r\n  // contain the last marker that can change as the bar update\r\n  repaintableMarker = null\r\n\r\n  // if candle body has a price percent change less than bodyPercentWatch, we start a refinement\r\n  bodyPercentWatch = options.bodyPercentWatch || 0.3\r\n\r\n  // if a wick is x times greater than the other, we might use it to refine change the side\r\n  wickRatioThreshold = options.wickRatioThreshold || 1.5\r\n\r\n  // paint a marker when OBV has been refined (changed of direction)\r\n  toggleDebug = options.toggleDebug || false\r\n\r\n  // when on, we calculate the wick percent difference and keep only that volume to add to OBV \r\n  toggleVolumeWick = options.toggleVolumeWick || false\r\n\r\n  togglePrintNormalObv = options.togglePrintNormalObv || false\r\n}\r\nif (repaintableMarker && repaintableMarker.time < time) {\r\n  // bar is +1 since active marker was added, lock it in the array\r\n  markers.push(repaintableMarker)\r\n\r\n  // free up active marker\r\n  repaintableMarker = null\r\n}\r\n\r\nvar newMarker = null\r\nvar _vbuy = source(vbuy, type=spot)\r\nvar _vsell = source(vsell, type=spot)\r\nvar _open = $price.open\r\nvar _high = $price.high\r\nvar _low = $price.low\r\nvar _close = $price.close\r\n\r\nvar sign = _close > _open ? 1 : -1\r\nvar volume = _vbuy + _vsell\r\n\r\nvar bodySize = Math.abs(_close - _open);\r\nvar priceChange = (_close - _open) / _open; // Percentage change\r\n\r\nif( togglePrintNormalObv ){\r\n    plotline(cum(sign * volume), title=\"Original\", color=options.originalObvColor)\r\n}\r\n\r\nvar improved = false\r\n\r\n// Check if price change is less than 0.4%\r\nif (Math.abs(priceChange) < bodyPercentWatch/100 ) {\r\n    var upperWickSize = _high - _close;\r\n    var lowerWickSize = _close - _low;\r\n\r\n    // Calculate the thresholds\r\n    var upperWickThreshold = wickRatioThreshold * lowerWickSize;\r\n    var lowerWickThreshold = wickRatioThreshold * upperWickSize;\r\n\r\n    // Check if upper and lower wicks have similar sizes\r\n    if (upperWickSize < upperWickThreshold && lowerWickSize < lowerWickThreshold) {\r\n        // Neutral move, don't add volume\r\n        sign = 0\r\n        improved = true\r\n    }else{\r\n        // Calculate the thresholds\r\n        var upperWickThreshold = wickRatioThreshold * lowerWickSize;\r\n        var lowerWickThreshold = wickRatioThreshold * upperWickSize;\r\n\r\n        // Determine the side based on wick sizes\r\n        // upper: 500, lower 100\r\n        if (upperWickSize > upperWickThreshold) {\r\n            improved = sign !== -1\r\n            // More selling happened, add volume as negative\r\n            sign = -1\r\n            if( toggleVolumeWick ) {\r\n                improved = true\r\n                var percentageDifference = ((upperWickSize - lowerWickSize) / upperWickSize);\r\n                volume = percentageDifference * volume\r\n            }\r\n        } else if (lowerWickSize > lowerWickThreshold) {\r\n            improved = sign !== 1\r\n            // More buying happened, add volume as positive\r\n            sign = 1\r\n            if( toggleVolumeWick ) {\r\n                improved = true\r\n                var percentageDifference = ((lowerWickSize - upperWickSize) / lowerWickSize);\r\n                volume = percentageDifference * volume\r\n            }\r\n        }\r\n    }\r\n\r\n    if( improved && toggleDebug){\r\n        if (sign == -1) {\r\n            // newMarker is a temporary variable (not included in the indicator state)\r\n            // to avoid it being treated as persistent variable we wrap it inside parenthesis\r\n            (newMarker) = {\r\n                time: time,\r\n                position: 'aboveBar',\r\n                color: 'red',\r\n                shape: 'arrowDown'\r\n            }\r\n        }\r\n\r\n        if (sign == 1) {\r\n            (newMarker) = {\r\n                time: time,\r\n                position: 'belowBar',\r\n                color: 'lime',\r\n                shape: 'arrowUp'\r\n            }\r\n        } \r\n    }\r\n}\r\n\r\n\r\nif (newMarker || (repaintableMarker && !newMarker)) {\r\n  // override persistent variable repaintable marker\r\n  repaintableMarker = newMarker\r\n  \r\n  var index = togglePrintNormalObv ? 1 : 0\r\n\r\n  if (series[index].setMarkers) {\r\n    series[index].setMarkers(markers.concat(repaintableMarker))\r\n  }\r\n}\r\n\r\nvar obv = cum(sign * volume)\r\nplotline(obv, title=\"S\", color=options.refinedObvColor)",
                "id": "obv-spots copy 1",
                "name": "OBV spots",
                "options": {
                  "priceScaleId": "obv-copy-1",
                  "visible": true,
                  "scaleMargins": {
                    "top": 0.73,
                    "bottom": 0.07
                  },
                  "lineStyle": 1,
                  "color": "rgba(255,235,59,0.81)",
                  "bodyPercentWatch": 0.3,
                  "wickDiffPercent": 90,
                  "debug": null,
                  "toggleDebug": true,
                  "toggleVolumeWick": false,
                  "wickRatioThreshold": 1.5,
                  "togglePrintNormalObv": false,
                  "originalObvColor": "rgb(178,181,190)",
                  "refinedObvColor": "rgb(41,98,255)"
                },
                "description": null,
                "createdAt": 1701126053261,
                "updatedAt": 1701126059594,
                "unsavedChanges": false,
                "optionsDefinitions": {},
                "series": [
                  "obv-spots copy 1",
                  "di3hp6kx"
                ],
                "displayName": "OBV spots"
              }
            },
            "indicatorOrder": [
              "cvd",
              "liquidations",
              "price",
              "volume",
              "orderbook-overlays",
              "obv-spots copy 1"
            ],
            "priceScales": {
              "right": {
                "scaleMargins": {
                  "top": 0.29,
                  "bottom": 0.34
                },
                "priceFormat": {
                  "precision": 2,
                  "minMove": 0.01
                },
                "indicators": [
                  "Price"
                ]
              },
              "cvd": {
                "scaleMargins": {
                  "top": 0.73,
                  "bottom": 0.07
                },
                "indicators": [
                  "CVD"
                ]
              },
              "volume_liquidations": {
                "scaleMargins": {
                  "top": 0,
                  "bottom": 0.96
                }
              },
              "volume": {
                "scaleMargins": {
                  "top": 0.87,
                  "bottom": 0
                },
                "indicators": [
                  "Volume"
                ]
              },
              "obv-copy-1": {
                "scaleMargins": {
                  "top": 0.73,
                  "bottom": 0.07
                },
                "indicators": [
                  "OBV spots"
                ]
              }
            },
            "layouting": false,
            "showIndicators": true,
            "timeframe": "300",
            "refreshRate": 1000,
            "showAlerts": true,
            "showAlertsLabel": true,
            "showLegend": true,
            "fillGapsWithEmpty": true,
            "showHorizontalGridlines": false,
            "horizontalGridlinesColor": "rgba(255,255,255,.1)",
            "showVerticalGridlines": false,
            "verticalGridlinesColor": "rgba(255,255,255,.1)",
            "showWatermark": false,
            "watermarkColor": "rgba(255,255,255,.1)",
            "showBorder": true,
            "borderColor": null,
            "showLeftScale": false,
            "showRightScale": true,
            "showTimeScale": true,
            "hiddenMarkets": {},
            "barSpacing": 2.232183142994405
          },
          "markets": [
            "BINANCE:btcfdusd",
            "BINANCE:btcusdc",
            "BINANCE:btcusdt",
            "COINBASE:BTC-USD",
            "COINBASE:BTC-USDT",
            "ORDERBOOK:AGGRSPOT-BTCUSD"
          ]
        },
        "chart copy 3": {
          "id": "chart copy 3",
          "name": "",
          "type": "chart",
          "zoom": 1,
          "settings": {
            "indicatorsErrors": {},
            "indicators": {
              "cvd": {
                "enabled": true,
                "name": "CVD",
                "description": "Cumulative Volume Delta",
                "script": "plotline(cum(vbuy - vsell))",
                "options": {
                  "priceScaleId": "cvd",
                  "priceFormat": {
                    "type": "volume"
                  },
                  "color": "rgba(209,212,220,0.81)",
                  "scaleMargins": {
                    "top": 0.73,
                    "bottom": 0.07
                  },
                  "visible": true,
                  "lineWidth": 1,
                  "priceLineStyle": 1,
                  "lineStyle": 1
                },
                "id": "cvd",
                "createdAt": 1700269685372,
                "updatedAt": 1702412185043,
                "series": [
                  "cvd"
                ],
                "unsavedChanges": false,
                "preview": {},
                "optionsDefinitions": {}
              },
              "liquidations": {
                "enabled": true,
                "name": "Liquidations",
                "description": "Liquidations by side",
                "script": "plothistogram(lbuy, color=options.upColor)\nplothistogram(-lsell, color=options.downColor)",
                "options": {
                  "priceFormat": {
                    "type": "volume"
                  },
                  "priceScaleId": "volume_liquidations",
                  "upColor": "rgb(255,76,243)",
                  "downColor": "rgb(255,183,77)",
                  "scaleMargins": {
                    "top": 0,
                    "bottom": 0.96
                  },
                  "visible": false
                },
                "id": "liquidations",
                "createdAt": 1700269685372,
                "updatedAt": 1700815523685,
                "series": [
                  "liquidations",
                  "n51e34d4"
                ],
                "preview": {},
                "unsavedChanges": false,
                "optionsDefinitions": {}
              },
              "price": {
                "enabled": true,
                "name": "Price",
                "script": "src = { sources: { \"BINANCE:btcusdt\":BINANCE:btcusdt }, localTimestamp: time }\r\n\r\nvar ohlc = options.useHeikinAshi ? avg_heikinashi(src) : options.useGaps ? avg_ohlc_with_gaps(src) : avg_ohlc(src)\r\n\r\nplotcandlestick(ohlc, id=price)",
                "options": {
                  "priceScaleId": "right",
                  "priceFormat": {
                    "auto": true,
                    "precision": 2,
                    "minMove": 0.01
                  },
                  "priceLineVisible": true,
                  "lastValueVisible": true,
                  "borderVisible": false,
                  "upColor": "rgba(255,235,59,0.52)",
                  "downColor": "rgba(242,54,69,0.64)",
                  "borderUpColor": "rgba(255,245,157,0.66)",
                  "borderDownColor": "rgba(178,40,51,0.52)",
                  "wickUpColor": "rgb(223,211,144)",
                  "wickDownColor": "rgba(239,67,82,0.47)",
                  "useGaps": false,
                  "useHeikinAshi": false,
                  "scaleMargins": {
                    "top": 0.29,
                    "bottom": 0.34
                  },
                  "visible": true
                },
                "id": "price",
                "createdAt": 1700269685372,
                "updatedAt": 1702412161838,
                "series": [
                  "price"
                ],
                "unsavedChanges": false,
                "preview": {},
                "optionsDefinitions": {}
              },
              "volume": {
                "enabled": true,
                "name": "Volume",
                "description": "Volume + delta",
                "script": "var _vbuy = source(vbuy, type=spot)\nvar _vsell = source(vsell, type=spot)\n\nif (upColor === 0) {\n  if (options.showDelta) {\n    upColor = options.upBgColor\n    downColor = options.downBgColor\n  } else {\n    upColor = options.upColor\n    downColor = options.downColor\n  }\n}\n\nif (options.showDelta) {\n  plothistogram({ time: time, value: Math.abs(_vbuy-_vsell), color: _vbuy - _vsell > 0 ? options.upColor : options.downColor})\n}\n\nplothistogram({ time: time, value: _vbuy + _vsell, color: _vbuy > _vsell ? upColor : downColor })",
                "options": {
                  "priceScaleId": "volume",
                  "priceFormat": {
                    "type": "volume"
                  },
                  "upColor": "rgba(76,175,80,0.62)",
                  "downColor": "rgba(242,54,69,0.71)",
                  "scaleMargins": {
                    "top": 0.87,
                    "bottom": 0
                  },
                  "showDelta": true,
                  "upBgColor": "rgba(178,181,190,0.33)",
                  "downBgColor": "rgba(93,96,107,0.38)",
                  "visible": true,
                  "lastValueVisible": true,
                  "color": "rgba(195,168,122,0.54)",
                  "showDeltaOnly": true,
                  "showBoth": true
                },
                "id": "volume",
                "createdAt": 1700269685372,
                "updatedAt": 1702530630403,
                "series": [
                  "volume",
                  "5362gzat"
                ],
                "unsavedChanges": false,
                "preview": {},
                "displayName": "Volume",
                "optionsDefinitions": {}
              },
              "obv-spots copy 1": {
                "script": "if (markers === 0) {\r\n  // first script execution (0 is default values for all persistent variables)\r\n\r\n  // create a var to store already drawn markers\r\n  markers = []\r\n\r\n  // contain the last marker that can change as the bar update\r\n  repaintableMarker = null\r\n\r\n  // if candle body has a price percent change less than bodyPercentWatch, we start a refinement\r\n  bodyPercentWatch = options.bodyPercentWatch || 0.3\r\n\r\n  // if a wick is x times greater than the other, we might use it to refine change the side\r\n  wickRatioThreshold = options.wickRatioThreshold || 1.5\r\n\r\n  // paint a marker when OBV has been refined (changed of direction)\r\n  toggleDebug = options.toggleDebug || false\r\n\r\n  // when on, we calculate the wick percent difference and keep only that volume to add to OBV \r\n  toggleVolumeWick = options.toggleVolumeWick || false\r\n\r\n  togglePrintNormalObv = options.togglePrintNormalObv || false\r\n}\r\nif (repaintableMarker && repaintableMarker.time < time) {\r\n  // bar is +1 since active marker was added, lock it in the array\r\n  markers.push(repaintableMarker)\r\n\r\n  // free up active marker\r\n  repaintableMarker = null\r\n}\r\n\r\nvar newMarker = null\r\nvar _vbuy = source(vbuy, type=spot)\r\nvar _vsell = source(vsell, type=spot)\r\nvar _open = $price.open\r\nvar _high = $price.high\r\nvar _low = $price.low\r\nvar _close = $price.close\r\n\r\nvar sign = _close > _open ? 1 : -1\r\nvar volume = _vbuy + _vsell\r\n\r\nvar bodySize = Math.abs(_close - _open);\r\nvar priceChange = (_close - _open) / _open; // Percentage change\r\n\r\nif( togglePrintNormalObv ){\r\n    plotline(cum(sign * volume), title=\"Original\", color=options.originalObvColor)\r\n}\r\n\r\nvar improved = false\r\n\r\n// Check if price change is less than 0.4%\r\nif (Math.abs(priceChange) < bodyPercentWatch/100 ) {\r\n    var upperWickSize = _high - _close;\r\n    var lowerWickSize = _close - _low;\r\n\r\n    // Calculate the thresholds\r\n    var upperWickThreshold = wickRatioThreshold * lowerWickSize;\r\n    var lowerWickThreshold = wickRatioThreshold * upperWickSize;\r\n\r\n    // Check if upper and lower wicks have similar sizes\r\n    if (upperWickSize < upperWickThreshold && lowerWickSize < lowerWickThreshold) {\r\n        // Neutral move, don't add volume\r\n        sign = 0\r\n        improved = true\r\n    }else{\r\n        // Calculate the thresholds\r\n        var upperWickThreshold = wickRatioThreshold * lowerWickSize;\r\n        var lowerWickThreshold = wickRatioThreshold * upperWickSize;\r\n\r\n        // Determine the side based on wick sizes\r\n        // upper: 500, lower 100\r\n        if (upperWickSize > upperWickThreshold) {\r\n            improved = sign !== -1\r\n            // More selling happened, add volume as negative\r\n            sign = -1\r\n            if( toggleVolumeWick ) {\r\n                improved = true\r\n                var percentageDifference = ((upperWickSize - lowerWickSize) / upperWickSize);\r\n                volume = percentageDifference * volume\r\n            }\r\n        } else if (lowerWickSize > lowerWickThreshold) {\r\n            improved = sign !== 1\r\n            // More buying happened, add volume as positive\r\n            sign = 1\r\n            if( toggleVolumeWick ) {\r\n                improved = true\r\n                var percentageDifference = ((lowerWickSize - upperWickSize) / lowerWickSize);\r\n                volume = percentageDifference * volume\r\n            }\r\n        }\r\n    }\r\n\r\n    if( improved && toggleDebug){\r\n        if (sign == -1) {\r\n            // newMarker is a temporary variable (not included in the indicator state)\r\n            // to avoid it being treated as persistent variable we wrap it inside parenthesis\r\n            (newMarker) = {\r\n                time: time,\r\n                position: 'aboveBar',\r\n                color: 'red',\r\n                shape: 'arrowDown'\r\n            }\r\n        }\r\n\r\n        if (sign == 1) {\r\n            (newMarker) = {\r\n                time: time,\r\n                position: 'belowBar',\r\n                color: 'lime',\r\n                shape: 'arrowUp'\r\n            }\r\n        } \r\n    }\r\n}\r\n\r\n\r\nif (newMarker || (repaintableMarker && !newMarker)) {\r\n  // override persistent variable repaintable marker\r\n  repaintableMarker = newMarker\r\n  \r\n  var index = togglePrintNormalObv ? 1 : 0\r\n\r\n  if (series[index].setMarkers) {\r\n    series[index].setMarkers(markers.concat(repaintableMarker))\r\n  }\r\n}\r\n\r\nvar obv = cum(sign * volume)\r\nplotline(obv, title=\"S\", color=options.refinedObvColor)",
                "id": "obv-spots copy 1",
                "name": "OBV spots",
                "options": {
                  "priceScaleId": "obv-copy-1",
                  "visible": true,
                  "scaleMargins": {
                    "top": 0.73,
                    "bottom": 0.07
                  },
                  "lineStyle": 1,
                  "color": "rgba(255,235,59,0.81)",
                  "bodyPercentWatch": 0.3,
                  "wickDiffPercent": 90,
                  "debug": null,
                  "toggleDebug": true,
                  "toggleVolumeWick": false,
                  "wickRatioThreshold": 1.5,
                  "togglePrintNormalObv": false,
                  "originalObvColor": "rgb(178,181,190)",
                  "refinedObvColor": "rgb(41,98,255)"
                },
                "description": null,
                "createdAt": 1701126053261,
                "updatedAt": 1701126059594,
                "unsavedChanges": false,
                "optionsDefinitions": {},
                "series": [
                  "obv-spots copy 1",
                  "3sc4kga4"
                ],
                "displayName": "OBV spots"
              },
              "orderbook-overlays-copy-1": {
                "script": "if (!pendingMarkers) {\r\n    // runs only once\r\n    pendingMarkers = []\r\n    spotColor = options.spotColor.match(/\\(([\\d.]+),([\\d.]+),([\\d.]+),?([\\d.]+)?\\)$/).slice(1,5).map(a => +a)\r\n    perpColor = options.perpColor.match(/\\(([\\d.]+),([\\d.]+),([\\d.]+),?([\\d.]+)?\\)$/).slice(1,5).map(a => +a)\r\n    binanceColor = options.binanceColor.match(/\\(([\\d.]+),([\\d.]+),([\\d.]+),?([\\d.]+)?\\)$/).slice(1,5).map(a => +a)\r\n    coinbaseColor = options.coinbaseColor.match(/\\(([\\d.]+),([\\d.]+),([\\d.]+),?([\\d.]+)?\\)$/).slice(1,5).map(a => +a)\r\n    //allOnColor = options.allOnColor.match(/\\(([\\d.]+),([\\d.]+),([\\d.]+),?([\\d.]+)?\\)$/).slice(1,5).map(a => +a)\r\n\r\n    spotOpacity = spotColor.pop()\r\n    perpOpacity = perpColor.pop()\r\n    binanceOpacity = binanceColor.pop()\r\n    coinbaseOpacity = coinbaseColor.pop()\r\n   // allOnColorOpacity = allOnColor.pop()\r\n\r\n    startOpacity = options.startOpacity || 0.1\r\n  \r\n    spotBuyAlerts  = [40, 63, 46, 60]\r\n    spotSellAlerts = [-40, -63, -46, -60]\r\n\r\n    perpBuyAlerts  = [38, 27, 36, 35]\r\n    perpSellAlerts = [-20, -27, -36, -35]\r\n\r\n    binanceBuyAlerts  = [70, 70, 70, 70]\r\n    binanceSellAlerts = [-70, -70, -70, -70]\r\n\r\n    coinbaseBuyAlerts  = [50, 50, 50, 50]\r\n    coinbaseSellAlerts = [-50, -50, -50, -50]\r\n\r\n    alerts = {\r\n      spot: {\r\n        buy: spotBuyAlerts,\r\n        sell: spotSellAlerts\r\n      },\r\n      perp: {\r\n        buy: perpBuyAlerts,\r\n        sell: perpSellAlerts\r\n      },\r\n      binance: {\r\n        buy: binanceBuyAlerts,\r\n        sell: binanceSellAlerts\r\n      },\r\n      coinbase: {\r\n        buy: coinbaseBuyAlerts,\r\n        sell: coinbaseSellAlerts\r\n      }\r\n    }\r\n\r\n    whichColors = {\r\n      spot: spotColor,\r\n      perp: perpColor,\r\n      binance: binanceColor,\r\n      coinbase: coinbaseColor\r\n    }\r\n\r\n    allOnIndicator = options.toggleAllOnIndicator || false,\r\n\r\n    showType = {\r\n      spot: options.toggleSpot,\r\n      perp: options.togglePerp,\r\n      binance: options.toggleBinance,\r\n      coinbase: options.toggleCoinbase,\r\n    }\r\n\r\n    lowerPercent = [0.3, 1, 2.5, 5]\r\n    upperPercent = [1, 2.5, 5, 10]  \r\n\r\n  }\r\n  // </STARTUP SCRIPT> \r\n\r\n  var ratiosPerp = ORDERBOOK:AGGRPERP-BTCUSDLEVELS.zratios\r\n  var ratiosSpot = ORDERBOOK:AGGRSPOT-BTCUSDLEVELS.zratios \r\n  var ratiosBinance = renderer.sources['ORDERBOOK:BINANCE-BTCUSDTLEVELS'] && renderer.sources['ORDERBOOK:BINANCE-BTCUSDTLEVELS'].zratios\r\n  var ratiosCoinbase = renderer.sources['ORDERBOOK:COINBASE-BTCUSDLEVELS'] && renderer.sources['ORDERBOOK:COINBASE-BTCUSDLEVELS'].zratios \r\n\r\n  var m = [\r\n    { which: 'perp', ratios: ratiosPerp || [], bands: [] },\r\n    { which: 'spot', ratios: ratiosSpot || [], bands: [] },\r\n    { which: 'binance', ratios: ratiosBinance || [], bands: [] },\r\n    { which: 'coinbase', ratios: ratiosCoinbase || [], bands: [] }\r\n  ]\r\n  \r\n  /*var ratiosPerp = ORDERBOOK:AGGRPERP-BTCUSDLEVELS.zratios\r\n  var ratiosSpot = ORDERBOOK:AGGRSPOT-BTCUSDLEVELS.zratios \r\n  var ratiosBinance = renderer.sources['ORDERBOOK:BINANCE-BTCUSDTLEVELS'].zratios\r\n  var ratiosCoinbase = renderer.sources['ORDERBOOK:COINBASE-BTCUSDLEVELS'].zratios \r\n\r\n  var perps = []\r\n  var spots = []\r\n  var binance = []\r\n  var coinbase = []\r\n*/\r\n  //var ratio = 0\r\n\r\n  // for each ratio\r\n  for(let ratioIndex = 0; ratioIndex < 4; ratioIndex++){\r\n\r\n    var allOn = true;\r\n\r\n    // for each type (perp, spot, binance, ...)\r\n    for(let typeIndex = 0; typeIndex < 4; typeIndex++){\r\n\r\n      var c = m[typeIndex]\r\n\r\n      if( showType[c.which]  === false ){\r\n        c.bands.push([0, 0, '']) \r\n        continue\r\n      }\r\n        \r\n      /*\r\n      var ratioPerp = ratiosPerp && ratiosPerp.length > ratioIndex && ratiosPerp[ratioIndex]\r\n      var ratioSpot =  ratiosSpot && ratiosSpot.length > ratioIndex && ratiosSpot[ratioIndex]\r\n      var ratioBinance =  ratiosBinance && ratiosBinance.length > ratioIndex && ratiosBinance[ratioIndex]\r\n      var ratioCoinbase =  ratiosCoinbase && ratiosCoinbase.length > ratioIndex && ratiosCoinbase[ratioIndex]\r\n      */\r\n      var ratio = c.ratios.length && c.ratios[ratioIndex]\r\n      var direction = Math.sign(ratio)\r\n      var buyAlert = alerts[c.which]['buy'][ratioIndex]\r\n      var sellAlert = alerts[c.which]['buy'][ratioIndex]\r\n      var threshold = direction > 0 ? buyAlert : sellAlert\r\n      var thresholdAbs = Math.abs(threshold)\r\n    \r\n      var lower = $price.close + -1 * direction * (($price.close  * lowerPercent[ratioIndex]) / 100)  \r\n      var upper = $price.close + -1 * direction * (($price.close  * upperPercent[ratioIndex]) / 100)\r\n\r\n      if( !ratio || Math.abs(ratio) < thresholdAbs ){\r\n          allOn = false\r\n          c.bands.push([0, 0, '']) \r\n      }else{\r\n\r\n          var alphaRatio = Math.abs(ratio) < thresholdAbs ? 0 : startOpacity + (1 - startOpacity) * ((Math.abs(ratio) - thresholdAbs) / (100 - thresholdAbs))\r\n          var alphaRatioRounded = Math.round(alphaRatio * 100) / 100 \r\n          var colorRatio = 'rgba(' + whichColors[c.which].join(',') + ',' + alphaRatioRounded + ')'\r\n          \r\n          c.bands.push([lower, upper, colorRatio])\r\n      }\r\n      \r\n    }// end for each type\r\n\r\n    if( allOnIndicator && allOn ){\r\n      for(let typeIndex = 0; typeIndex < 4; typeIndex++){\r\n        var c = m[typeIndex]\r\n        c.bands[ratioIndex] = [lower, upper, options.allOnColor]\r\n      }\r\n    }\r\n\r\n  } // end for each ratios\r\n\r\n\r\nvar i = 0\r\n\r\nfor(let ratioIndex = 0; ratioIndex < 4; ratioIndex++){\r\n\r\n    for(let typeIndex = 0; typeIndex < 4; typeIndex++){\r\n\r\n       var c = m[typeIndex]\r\n    \r\n       if( c.bands.length && c.bands[ratioIndex][0] !== 0 ) {\r\n         renderer.indicators[indicatorId].series[i] = {\r\n          time: time, \r\n          lowerValue: c.bands[ratioIndex][0],\r\n          higherValue: c.bands[ratioIndex][1],\r\n          color:  c.bands[ratioIndex][2]\r\n        }\r\n      }\r\n      i++\r\n    }\r\n}\r\n\r\n\r\n\r\nreturn\r\n//perp\r\nbrokenarea({\r\n        time: time, \r\n        lowerValue: 0,\r\n        higherValue: 0,\r\n        color:  options.color\r\n      })\r\nbrokenarea({\r\n        time: time, \r\n        lowerValue: 0,\r\n        higherValue: 0,\r\n        color:  options.color\r\n      })\r\nbrokenarea({\r\n        time: time, \r\n        lowerValue: 0,\r\n        higherValue: 0,\r\n        color:  options.color\r\n      })\r\nbrokenarea({\r\n        time: time, \r\n        lowerValue: 0,\r\n        higherValue: 0,\r\n        color:  options.color\r\n      })     \r\n      brokenarea({\r\n        time: time, \r\n        lowerValue: 0,\r\n        higherValue: 0,\r\n        color:  options.color\r\n      })\r\nbrokenarea({\r\n        time: time, \r\n        lowerValue: 0,\r\n        higherValue: 0,\r\n        color:  options.color\r\n      })\r\nbrokenarea({\r\n        time: time, \r\n        lowerValue: 0,\r\n        higherValue: 0,\r\n        color:  options.color\r\n      })\r\nbrokenarea({\r\n        time: time, \r\n        lowerValue: 0,\r\n        higherValue: 0,\r\n        color:  options.color\r\n      })   \r\n      brokenarea({\r\n        time: time, \r\n        lowerValue: 0,\r\n        higherValue: 0,\r\n        color:  options.color\r\n      })\r\nbrokenarea({\r\n        time: time, \r\n        lowerValue: 0,\r\n        higherValue: 0,\r\n        color:  options.color\r\n      })\r\nbrokenarea({\r\n        time: time, \r\n        lowerValue: 0,\r\n        higherValue: 0,\r\n        color:  options.color\r\n      })\r\nbrokenarea({\r\n        time: time, \r\n        lowerValue: 0,\r\n        higherValue: 0,\r\n        color:  options.color\r\n      })   \r\n      brokenarea({\r\n        time: time, \r\n        lowerValue: 0,\r\n        higherValue: 0,\r\n        color:  options.color\r\n      })\r\nbrokenarea({\r\n        time: time, \r\n        lowerValue: 0,\r\n        higherValue: 0,\r\n        color:  options.color\r\n      })\r\nbrokenarea({\r\n        time: time, \r\n        lowerValue: 0,\r\n        higherValue: 0,\r\n        color:  options.color\r\n      })\r\nbrokenarea({\r\n        time: time, \r\n        lowerValue: 0,\r\n        higherValue: 0,\r\n        color:  options.color\r\n      })",
                "id": "orderbook-overlays-copy-1",
                "name": "Orderbook Overlays copy 1",
                "options": {
                  "priceScaleId": "right",
                  "startOpacity": null,
                  "allOnColor": "rgb(242,54,69)",
                  "binanceColor": "rgb(255,255,255)",
                  "perpColor": "rgb(41,98,255)",
                  "spotColor": "rgb(255,235,59)",
                  "scaleMargins": {
                    "top": 0.29,
                    "bottom": 0.34
                  },
                  "coinbaseColor": "rgb(247,124,128)",
                  "visible": true,
                  "priceFormat": {
                    "type": "price",
                    "precision": 2,
                    "minMove": 0.01,
                    "auto": true
                  },
                  "toggleSpot": true,
                  "togglePerp": false,
                  "toggleBinance": false,
                  "toggleCoinbase": false,
                  "toggleAllOnIndicator": null
                },
                "description": null,
                "unsavedChanges": false,
                "optionsDefinitions": {},
                "series": [
                  "orderbook-overlays-copy-1",
                  "b90q1903",
                  "43b8bu5a",
                  "9xjmu543",
                  "pfoug2tr",
                  "gfdnep66",
                  "atf8f6bo",
                  "1wy9f4qi",
                  "8mgi2n1i",
                  "hsq4mjz0",
                  "ulbnsg97",
                  "k541j3a2",
                  "jw8ms75x",
                  "rkcotgov",
                  "epjfzb9g",
                  "or5p7jcm"
                ],
                "displayName": "Orderbook Overlays copy 1"
              }
            },
            "indicatorOrder": [
              "cvd",
              "liquidations",
              "price",
              "volume",
              "obv-spots copy 1",
              "orderbook-overlays-copy-1"
            ],
            "priceScales": {
              "right": {
                "scaleMargins": {
                  "top": 0.29,
                  "bottom": 0.34
                },
                "priceFormat": {
                  "precision": 2,
                  "minMove": 0.01
                },
                "indicators": [
                  "Price"
                ]
              },
              "cvd": {
                "scaleMargins": {
                  "top": 0.73,
                  "bottom": 0.07
                },
                "indicators": [
                  "CVD"
                ]
              },
              "volume_liquidations": {
                "scaleMargins": {
                  "top": 0,
                  "bottom": 0.96
                }
              },
              "volume": {
                "scaleMargins": {
                  "top": 0.87,
                  "bottom": 0
                },
                "indicators": [
                  "Volume"
                ]
              },
              "obv-copy-1": {
                "scaleMargins": {
                  "top": 0.73,
                  "bottom": 0.07
                },
                "indicators": [
                  "OBV spots"
                ]
              }
            },
            "layouting": false,
            "showIndicators": true,
            "timeframe": "300",
            "refreshRate": 1000,
            "showAlerts": true,
            "showAlertsLabel": true,
            "showLegend": true,
            "fillGapsWithEmpty": true,
            "showHorizontalGridlines": false,
            "horizontalGridlinesColor": "rgba(255,255,255,.1)",
            "showVerticalGridlines": false,
            "verticalGridlinesColor": "rgba(255,255,255,.1)",
            "showWatermark": false,
            "watermarkColor": "rgba(255,255,255,.1)",
            "showBorder": true,
            "borderColor": null,
            "showLeftScale": false,
            "showRightScale": true,
            "showTimeScale": true,
            "hiddenMarkets": {},
            "barSpacing": 2.232183142994405
          },
          "markets": [
            "BINANCE_FUTURES:btcusd_perp",
            "BINANCE_FUTURES:btcusdt",
            "BYBIT:BTCUSD",
            "BYBIT:BTCUSDT",
            "OKEX:BTC-USD-SWAP",
            "OKEX:BTC-USDC-SWAP",
            "OKEX:BTC-USDT-SWAP",
            "ORDERBOOK:AGGRPERP-BTCUSD"
          ]
        },
        "chart copy 4": {
          "id": "chart copy 4",
          "name": "",
          "type": "chart",
          "zoom": 1,
          "settings": {
            "indicatorsErrors": {},
            "indicators": {
              "cvd": {
                "enabled": true,
                "name": "CVD",
                "description": "Cumulative Volume Delta",
                "script": "plotline(cum(vbuy - vsell))",
                "options": {
                  "priceScaleId": "cvd",
                  "priceFormat": {
                    "type": "volume"
                  },
                  "color": "rgba(209,212,220,0.81)",
                  "scaleMargins": {
                    "top": 0.73,
                    "bottom": 0.07
                  },
                  "visible": true,
                  "lineWidth": 1,
                  "priceLineStyle": 1,
                  "lineStyle": 1
                },
                "id": "cvd",
                "createdAt": 1700269685372,
                "updatedAt": 1702412185043,
                "series": [
                  "cvd"
                ],
                "unsavedChanges": false,
                "preview": {},
                "optionsDefinitions": {}
              },
              "liquidations": {
                "enabled": true,
                "name": "Liquidations",
                "description": "Liquidations by side",
                "script": "plothistogram(lbuy, color=options.upColor)\nplothistogram(-lsell, color=options.downColor)",
                "options": {
                  "priceFormat": {
                    "type": "volume"
                  },
                  "priceScaleId": "volume_liquidations",
                  "upColor": "rgb(255,76,243)",
                  "downColor": "rgb(255,183,77)",
                  "scaleMargins": {
                    "top": 0,
                    "bottom": 0.96
                  },
                  "visible": false
                },
                "id": "liquidations",
                "createdAt": 1700269685372,
                "updatedAt": 1700815523685,
                "series": [
                  "liquidations",
                  "n51e34d4"
                ],
                "preview": {},
                "unsavedChanges": false,
                "optionsDefinitions": {}
              },
              "price": {
                "enabled": true,
                "name": "Price",
                "script": "src = { sources: { \"COINBASE:BTC-USDT\":COINBASE:BTC-USDT }, localTimestamp: time }\r\n\r\nvar ohlc = options.useHeikinAshi ? avg_heikinashi(src) : options.useGaps ? avg_ohlc_with_gaps(src) : avg_ohlc(src)\r\n\r\nplotcandlestick(ohlc, id=price)",
                "options": {
                  "priceScaleId": "right",
                  "priceFormat": {
                    "auto": true,
                    "precision": 2,
                    "minMove": 0.01
                  },
                  "priceLineVisible": true,
                  "lastValueVisible": true,
                  "borderVisible": false,
                  "upColor": "rgba(255,235,59,0.52)",
                  "downColor": "rgba(242,54,69,0.64)",
                  "borderUpColor": "rgba(255,245,157,0.66)",
                  "borderDownColor": "rgba(178,40,51,0.52)",
                  "wickUpColor": "rgb(223,211,144)",
                  "wickDownColor": "rgba(239,67,82,0.47)",
                  "useGaps": false,
                  "useHeikinAshi": false,
                  "scaleMargins": {
                    "top": 0.29,
                    "bottom": 0.34
                  },
                  "visible": true
                },
                "id": "price",
                "createdAt": 1700269685372,
                "updatedAt": 1702412161838,
                "series": [
                  "price copy 1"
                ],
                "unsavedChanges": false,
                "preview": {},
                "optionsDefinitions": {}
              },
              "volume": {
                "enabled": true,
                "name": "Volume",
                "description": "Volume + delta",
                "script": "var _vbuy = source(vbuy, type=spot)\nvar _vsell = source(vsell, type=spot)\n\nif (upColor === 0) {\n  if (options.showDelta) {\n    upColor = options.upBgColor\n    downColor = options.downBgColor\n  } else {\n    upColor = options.upColor\n    downColor = options.downColor\n  }\n}\n\nif (options.showDelta) {\n  plothistogram({ time: time, value: Math.abs(_vbuy-_vsell), color: _vbuy - _vsell > 0 ? options.upColor : options.downColor})\n}\n\nplothistogram({ time: time, value: _vbuy + _vsell, color: _vbuy > _vsell ? upColor : downColor })",
                "options": {
                  "priceScaleId": "volume",
                  "priceFormat": {
                    "type": "volume"
                  },
                  "upColor": "rgba(76,175,80,0.62)",
                  "downColor": "rgba(242,54,69,0.71)",
                  "scaleMargins": {
                    "top": 0.87,
                    "bottom": 0
                  },
                  "showDelta": true,
                  "upBgColor": "rgba(178,181,190,0.33)",
                  "downBgColor": "rgba(93,96,107,0.38)",
                  "visible": true,
                  "lastValueVisible": true,
                  "color": "rgba(195,168,122,0.54)",
                  "showDeltaOnly": true,
                  "showBoth": true
                },
                "id": "volume",
                "createdAt": 1700269685372,
                "updatedAt": 1702530630403,
                "series": [
                  "volume copy 1",
                  "nlv7yzaj"
                ],
                "unsavedChanges": false,
                "preview": {},
                "displayName": "Volume",
                "optionsDefinitions": {}
              },
              "orderbook-overlays": {
                "script": "if (!pendingMarkers) {\r\n    // runs only once\r\n    pendingMarkers = []\r\n    spotColor = options.spotColor.match(/\\(([\\d.]+),([\\d.]+),([\\d.]+),?([\\d.]+)?\\)$/).slice(1,5).map(a => +a)\r\n    perpColor = options.perpColor.match(/\\(([\\d.]+),([\\d.]+),([\\d.]+),?([\\d.]+)?\\)$/).slice(1,5).map(a => +a)\r\n    binanceColor = options.binanceColor.match(/\\(([\\d.]+),([\\d.]+),([\\d.]+),?([\\d.]+)?\\)$/).slice(1,5).map(a => +a)\r\n    coinbaseColor = options.coinbaseColor.match(/\\(([\\d.]+),([\\d.]+),([\\d.]+),?([\\d.]+)?\\)$/).slice(1,5).map(a => +a)\r\n    //allOnColor = options.allOnColor.match(/\\(([\\d.]+),([\\d.]+),([\\d.]+),?([\\d.]+)?\\)$/).slice(1,5).map(a => +a)\r\n\r\n    spotOpacity = spotColor.pop()\r\n    perpOpacity = perpColor.pop()\r\n    binanceOpacity = binanceColor.pop()\r\n    coinbaseOpacity = coinbaseColor.pop()\r\n   // allOnColorOpacity = allOnColor.pop()\r\n\r\n    startOpacity = options.startOpacity || 0.1\r\n  \r\n    spotBuyAlerts  = [40, 63, 46, 60]\r\n    spotSellAlerts = [-40, -63, -46, -60]\r\n\r\n    perpBuyAlerts  = [38, 27, 36, 35]\r\n    perpSellAlerts = [-20, -27, -36, -35]\r\n\r\n    binanceBuyAlerts  = [70, 70, 70, 70]\r\n    binanceSellAlerts = [-70, -70, -70, -70]\r\n\r\n    coinbaseBuyAlerts  = [50, 50, 50, 50]\r\n    coinbaseSellAlerts = [-50, -50, -50, -50]\r\n\r\n    alerts = {\r\n      spot: {\r\n        buy: spotBuyAlerts,\r\n        sell: spotSellAlerts\r\n      },\r\n      perp: {\r\n        buy: perpBuyAlerts,\r\n        sell: perpSellAlerts\r\n      },\r\n      binance: {\r\n        buy: binanceBuyAlerts,\r\n        sell: binanceSellAlerts\r\n      },\r\n      coinbase: {\r\n        buy: coinbaseBuyAlerts,\r\n        sell: coinbaseSellAlerts\r\n      }\r\n    }\r\n\r\n    whichColors = {\r\n      spot: spotColor,\r\n      perp: perpColor,\r\n      binance: binanceColor,\r\n      coinbase: coinbaseColor\r\n    }\r\n\r\n    allOnIndicator = options.toggleAllOnIndicator || false,\r\n\r\n    showType = {\r\n      spot: options.toggleSpot,\r\n      perp: options.togglePerp,\r\n      binance: options.toggleBinance,\r\n      coinbase: options.toggleCoinbase,\r\n    }\r\n\r\n    lowerPercent = [0.3, 1, 2.5, 5]\r\n    upperPercent = [1, 2.5, 5, 10]  \r\n\r\n  }\r\n  // </STARTUP SCRIPT> \r\n\r\n  var ratiosPerp = ORDERBOOK:AGGRPERP-BTCUSDLEVELS.zratios\r\n  var ratiosSpot = ORDERBOOK:AGGRSPOT-BTCUSDLEVELS.zratios \r\n  var ratiosBinance = renderer.sources['ORDERBOOK:BINANCE-BTCUSDTLEVELS'] && renderer.sources['ORDERBOOK:BINANCE-BTCUSDTLEVELS'].zratios\r\n  var ratiosCoinbase = renderer.sources['ORDERBOOK:COINBASE-BTCUSDLEVELS'] && renderer.sources['ORDERBOOK:COINBASE-BTCUSDLEVELS'].zratios \r\n\r\n  var m = [\r\n    { which: 'perp', ratios: ratiosPerp || [], bands: [] },\r\n    { which: 'spot', ratios: ratiosSpot || [], bands: [] },\r\n    { which: 'binance', ratios: ratiosBinance || [], bands: [] },\r\n    { which: 'coinbase', ratios: ratiosCoinbase || [], bands: [] }\r\n  ]\r\n  \r\n  /*var ratiosPerp = ORDERBOOK:AGGRPERP-BTCUSDLEVELS.zratios\r\n  var ratiosSpot = ORDERBOOK:AGGRSPOT-BTCUSDLEVELS.zratios \r\n  var ratiosBinance = renderer.sources['ORDERBOOK:BINANCE-BTCUSDTLEVELS'].zratios\r\n  var ratiosCoinbase = renderer.sources['ORDERBOOK:COINBASE-BTCUSDLEVELS'].zratios \r\n\r\n  var perps = []\r\n  var spots = []\r\n  var binance = []\r\n  var coinbase = []\r\n*/\r\n  //var ratio = 0\r\n\r\n  // for each ratio\r\n  for(let ratioIndex = 0; ratioIndex < 4; ratioIndex++){\r\n\r\n    var allOn = true;\r\n\r\n    // for each type (perp, spot, binance, ...)\r\n    for(let typeIndex = 0; typeIndex < 4; typeIndex++){\r\n\r\n      var c = m[typeIndex]\r\n\r\n      if( showType[c.which]  === false ){\r\n        c.bands.push([0, 0, '']) \r\n        continue\r\n      }\r\n        \r\n      /*\r\n      var ratioPerp = ratiosPerp && ratiosPerp.length > ratioIndex && ratiosPerp[ratioIndex]\r\n      var ratioSpot =  ratiosSpot && ratiosSpot.length > ratioIndex && ratiosSpot[ratioIndex]\r\n      var ratioBinance =  ratiosBinance && ratiosBinance.length > ratioIndex && ratiosBinance[ratioIndex]\r\n      var ratioCoinbase =  ratiosCoinbase && ratiosCoinbase.length > ratioIndex && ratiosCoinbase[ratioIndex]\r\n      */\r\n      var ratio = c.ratios.length && c.ratios[ratioIndex]\r\n      var direction = Math.sign(ratio)\r\n      var buyAlert = alerts[c.which]['buy'][ratioIndex]\r\n      var sellAlert = alerts[c.which]['buy'][ratioIndex]\r\n      var threshold = direction > 0 ? buyAlert : sellAlert\r\n      var thresholdAbs = Math.abs(threshold)\r\n    \r\n      var lower = $price.close + -1 * direction * (($price.close  * lowerPercent[ratioIndex]) / 100)  \r\n      var upper = $price.close + -1 * direction * (($price.close  * upperPercent[ratioIndex]) / 100)\r\n\r\n      if( !ratio || Math.abs(ratio) < thresholdAbs ){\r\n          allOn = false\r\n          c.bands.push([0, 0, '']) \r\n      }else{\r\n\r\n          var alphaRatio = Math.abs(ratio) < thresholdAbs ? 0 : startOpacity + (1 - startOpacity) * ((Math.abs(ratio) - thresholdAbs) / (100 - thresholdAbs))\r\n          var alphaRatioRounded = Math.round(alphaRatio * 100) / 100 \r\n          var colorRatio = 'rgba(' + whichColors[c.which].join(',') + ',' + alphaRatioRounded + ')'\r\n          \r\n          c.bands.push([lower, upper, colorRatio])\r\n      }\r\n      \r\n    }// end for each type\r\n\r\n    if( allOnIndicator && allOn ){\r\n      for(let typeIndex = 0; typeIndex < 4; typeIndex++){\r\n        var c = m[typeIndex]\r\n        c.bands[ratioIndex] = [lower, upper, options.allOnColor]\r\n      }\r\n    }\r\n\r\n  } // end for each ratios\r\n\r\n\r\nvar i = 0\r\n\r\nfor(let ratioIndex = 0; ratioIndex < 4; ratioIndex++){\r\n\r\n    for(let typeIndex = 0; typeIndex < 4; typeIndex++){\r\n\r\n       var c = m[typeIndex]\r\n    \r\n       if( c.bands.length && c.bands[ratioIndex][0] !== 0 ) {\r\n         renderer.indicators[indicatorId].series[i] = {\r\n          time: time, \r\n          lowerValue: c.bands[ratioIndex][0],\r\n          higherValue: c.bands[ratioIndex][1],\r\n          color:  c.bands[ratioIndex][2]\r\n        }\r\n      }\r\n      i++\r\n    }\r\n}\r\n\r\n\r\n\r\nreturn\r\n//perp\r\nbrokenarea({\r\n        time: time, \r\n        lowerValue: 0,\r\n        higherValue: 0,\r\n        color:  options.color\r\n      })\r\nbrokenarea({\r\n        time: time, \r\n        lowerValue: 0,\r\n        higherValue: 0,\r\n        color:  options.color\r\n      })\r\nbrokenarea({\r\n        time: time, \r\n        lowerValue: 0,\r\n        higherValue: 0,\r\n        color:  options.color\r\n      })\r\nbrokenarea({\r\n        time: time, \r\n        lowerValue: 0,\r\n        higherValue: 0,\r\n        color:  options.color\r\n      })     \r\n      brokenarea({\r\n        time: time, \r\n        lowerValue: 0,\r\n        higherValue: 0,\r\n        color:  options.color\r\n      })\r\nbrokenarea({\r\n        time: time, \r\n        lowerValue: 0,\r\n        higherValue: 0,\r\n        color:  options.color\r\n      })\r\nbrokenarea({\r\n        time: time, \r\n        lowerValue: 0,\r\n        higherValue: 0,\r\n        color:  options.color\r\n      })\r\nbrokenarea({\r\n        time: time, \r\n        lowerValue: 0,\r\n        higherValue: 0,\r\n        color:  options.color\r\n      })   \r\n      brokenarea({\r\n        time: time, \r\n        lowerValue: 0,\r\n        higherValue: 0,\r\n        color:  options.color\r\n      })\r\nbrokenarea({\r\n        time: time, \r\n        lowerValue: 0,\r\n        higherValue: 0,\r\n        color:  options.color\r\n      })\r\nbrokenarea({\r\n        time: time, \r\n        lowerValue: 0,\r\n        higherValue: 0,\r\n        color:  options.color\r\n      })\r\nbrokenarea({\r\n        time: time, \r\n        lowerValue: 0,\r\n        higherValue: 0,\r\n        color:  options.color\r\n      })   \r\n      brokenarea({\r\n        time: time, \r\n        lowerValue: 0,\r\n        higherValue: 0,\r\n        color:  options.color\r\n      })\r\nbrokenarea({\r\n        time: time, \r\n        lowerValue: 0,\r\n        higherValue: 0,\r\n        color:  options.color\r\n      })\r\nbrokenarea({\r\n        time: time, \r\n        lowerValue: 0,\r\n        higherValue: 0,\r\n        color:  options.color\r\n      })\r\nbrokenarea({\r\n        time: time, \r\n        lowerValue: 0,\r\n        higherValue: 0,\r\n        color:  options.color\r\n      })",
                "id": "orderbook-overlays",
                "name": "Orderbook Overlays",
                "options": {
                  "priceScaleId": "right",
                  "startOpacity": null,
                  "allOnColor": "rgb(242,54,69)",
                  "binanceColor": "rgb(255,255,255)",
                  "perpColor": "rgb(41,98,255)",
                  "spotColor": "rgb(255,235,59)",
                  "scaleMargins": {
                    "top": 0.29,
                    "bottom": 0.34
                  },
                  "coinbaseColor": "rgb(247,124,128)",
                  "visible": false,
                  "priceFormat": {
                    "type": "price",
                    "precision": 2,
                    "minMove": 0.01,
                    "auto": true
                  },
                  "toggleSpot": false,
                  "togglePerp": false,
                  "toggleBinance": true,
                  "toggleCoinbase": false,
                  "toggleAllOnIndicator": null
                },
                "description": null,
                "createdAt": 1703135778962,
                "updatedAt": 1703135778962,
                "unsavedChanges": false,
                "optionsDefinitions": {},
                "series": [
                  "orderbook-overlays copy 1",
                  "uhd1zpf9",
                  "domyzio3",
                  "x1wkji4k",
                  "8hhza57r",
                  "hvi8cb2d",
                  "quvewkyv",
                  "1y8jte9b",
                  "15a2vh8z",
                  "0g85t1xt",
                  "4pxlzxj2",
                  "k86pqxux",
                  "dhe836fl",
                  "wbtlgc0w",
                  "dmkdwcuy",
                  "mb41abtr"
                ],
                "displayName": "Orderbook Overlays"
              },
              "obv-spots copy 1": {
                "script": "if (markers === 0) {\r\n  // first script execution (0 is default values for all persistent variables)\r\n\r\n  // create a var to store already drawn markers\r\n  markers = []\r\n\r\n  // contain the last marker that can change as the bar update\r\n  repaintableMarker = null\r\n\r\n  // if candle body has a price percent change less than bodyPercentWatch, we start a refinement\r\n  bodyPercentWatch = options.bodyPercentWatch || 0.3\r\n\r\n  // if a wick is x times greater than the other, we might use it to refine change the side\r\n  wickRatioThreshold = options.wickRatioThreshold || 1.5\r\n\r\n  // paint a marker when OBV has been refined (changed of direction)\r\n  toggleDebug = options.toggleDebug || false\r\n\r\n  // when on, we calculate the wick percent difference and keep only that volume to add to OBV \r\n  toggleVolumeWick = options.toggleVolumeWick || false\r\n\r\n  togglePrintNormalObv = options.togglePrintNormalObv || false\r\n}\r\nif (repaintableMarker && repaintableMarker.time < time) {\r\n  // bar is +1 since active marker was added, lock it in the array\r\n  markers.push(repaintableMarker)\r\n\r\n  // free up active marker\r\n  repaintableMarker = null\r\n}\r\n\r\nvar newMarker = null\r\nvar _vbuy = source(vbuy, type=spot)\r\nvar _vsell = source(vsell, type=spot)\r\nvar _open = $price.open\r\nvar _high = $price.high\r\nvar _low = $price.low\r\nvar _close = $price.close\r\n\r\nvar sign = _close > _open ? 1 : -1\r\nvar volume = _vbuy + _vsell\r\n\r\nvar bodySize = Math.abs(_close - _open);\r\nvar priceChange = (_close - _open) / _open; // Percentage change\r\n\r\nif( togglePrintNormalObv ){\r\n    plotline(cum(sign * volume), title=\"Original\", color=options.originalObvColor)\r\n}\r\n\r\nvar improved = false\r\n\r\n// Check if price change is less than 0.4%\r\nif (Math.abs(priceChange) < bodyPercentWatch/100 ) {\r\n    var upperWickSize = _high - _close;\r\n    var lowerWickSize = _close - _low;\r\n\r\n    // Calculate the thresholds\r\n    var upperWickThreshold = wickRatioThreshold * lowerWickSize;\r\n    var lowerWickThreshold = wickRatioThreshold * upperWickSize;\r\n\r\n    // Check if upper and lower wicks have similar sizes\r\n    if (upperWickSize < upperWickThreshold && lowerWickSize < lowerWickThreshold) {\r\n        // Neutral move, don't add volume\r\n        sign = 0\r\n        improved = true\r\n    }else{\r\n        // Calculate the thresholds\r\n        var upperWickThreshold = wickRatioThreshold * lowerWickSize;\r\n        var lowerWickThreshold = wickRatioThreshold * upperWickSize;\r\n\r\n        // Determine the side based on wick sizes\r\n        // upper: 500, lower 100\r\n        if (upperWickSize > upperWickThreshold) {\r\n            improved = sign !== -1\r\n            // More selling happened, add volume as negative\r\n            sign = -1\r\n            if( toggleVolumeWick ) {\r\n                improved = true\r\n                var percentageDifference = ((upperWickSize - lowerWickSize) / upperWickSize);\r\n                volume = percentageDifference * volume\r\n            }\r\n        } else if (lowerWickSize > lowerWickThreshold) {\r\n            improved = sign !== 1\r\n            // More buying happened, add volume as positive\r\n            sign = 1\r\n            if( toggleVolumeWick ) {\r\n                improved = true\r\n                var percentageDifference = ((lowerWickSize - upperWickSize) / lowerWickSize);\r\n                volume = percentageDifference * volume\r\n            }\r\n        }\r\n    }\r\n\r\n    if( improved && toggleDebug){\r\n        if (sign == -1) {\r\n            // newMarker is a temporary variable (not included in the indicator state)\r\n            // to avoid it being treated as persistent variable we wrap it inside parenthesis\r\n            (newMarker) = {\r\n                time: time,\r\n                position: 'aboveBar',\r\n                color: 'red',\r\n                shape: 'arrowDown'\r\n            }\r\n        }\r\n\r\n        if (sign == 1) {\r\n            (newMarker) = {\r\n                time: time,\r\n                position: 'belowBar',\r\n                color: 'lime',\r\n                shape: 'arrowUp'\r\n            }\r\n        } \r\n    }\r\n}\r\n\r\n\r\nif (newMarker || (repaintableMarker && !newMarker)) {\r\n  // override persistent variable repaintable marker\r\n  repaintableMarker = newMarker\r\n  \r\n  var index = togglePrintNormalObv ? 1 : 0\r\n\r\n  if (series[index].setMarkers) {\r\n    series[index].setMarkers(markers.concat(repaintableMarker))\r\n  }\r\n}\r\n\r\nvar obv = cum(sign * volume)\r\nplotline(obv, title=\"S\", color=options.refinedObvColor)",
                "id": "obv-spots copy 1",
                "name": "OBV spots",
                "options": {
                  "priceScaleId": "obv-copy-1",
                  "visible": true,
                  "scaleMargins": {
                    "top": 0.73,
                    "bottom": 0.07
                  },
                  "lineStyle": 1,
                  "color": "rgba(255,235,59,0.81)",
                  "bodyPercentWatch": 0.3,
                  "wickDiffPercent": 90,
                  "debug": null,
                  "toggleDebug": true,
                  "toggleVolumeWick": false,
                  "wickRatioThreshold": 1.5,
                  "togglePrintNormalObv": false,
                  "originalObvColor": "rgb(178,181,190)",
                  "refinedObvColor": "rgb(41,98,255)"
                },
                "description": null,
                "createdAt": 1701126053261,
                "updatedAt": 1701126059594,
                "unsavedChanges": false,
                "optionsDefinitions": {},
                "series": [
                  "obv-spots copy 1",
                  "dmczndz0"
                ],
                "displayName": "OBV spots"
              },
              "orderbook-overlays-copy-1": {
                "script": "if (!pendingMarkers) {\r\n    // runs only once\r\n    pendingMarkers = []\r\n    spotColor = options.spotColor.match(/\\(([\\d.]+),([\\d.]+),([\\d.]+),?([\\d.]+)?\\)$/).slice(1,5).map(a => +a)\r\n    perpColor = options.perpColor.match(/\\(([\\d.]+),([\\d.]+),([\\d.]+),?([\\d.]+)?\\)$/).slice(1,5).map(a => +a)\r\n    binanceColor = options.binanceColor.match(/\\(([\\d.]+),([\\d.]+),([\\d.]+),?([\\d.]+)?\\)$/).slice(1,5).map(a => +a)\r\n    coinbaseColor = options.coinbaseColor.match(/\\(([\\d.]+),([\\d.]+),([\\d.]+),?([\\d.]+)?\\)$/).slice(1,5).map(a => +a)\r\n    //allOnColor = options.allOnColor.match(/\\(([\\d.]+),([\\d.]+),([\\d.]+),?([\\d.]+)?\\)$/).slice(1,5).map(a => +a)\r\n\r\n    spotOpacity = spotColor.pop()\r\n    perpOpacity = perpColor.pop()\r\n    binanceOpacity = binanceColor.pop()\r\n    coinbaseOpacity = coinbaseColor.pop()\r\n   // allOnColorOpacity = allOnColor.pop()\r\n\r\n    startOpacity = options.startOpacity || 0.1\r\n  \r\n    spotBuyAlerts  = [40, 63, 46, 60]\r\n    spotSellAlerts = [-40, -63, -46, -60]\r\n\r\n    perpBuyAlerts  = [38, 27, 36, 35]\r\n    perpSellAlerts = [-20, -27, -36, -35]\r\n\r\n    binanceBuyAlerts  = [70, 70, 70, 70]\r\n    binanceSellAlerts = [-70, -70, -70, -70]\r\n\r\n    coinbaseBuyAlerts  = [50, 50, 50, 50]\r\n    coinbaseSellAlerts = [-50, -50, -50, -50]\r\n\r\n    alerts = {\r\n      spot: {\r\n        buy: spotBuyAlerts,\r\n        sell: spotSellAlerts\r\n      },\r\n      perp: {\r\n        buy: perpBuyAlerts,\r\n        sell: perpSellAlerts\r\n      },\r\n      binance: {\r\n        buy: binanceBuyAlerts,\r\n        sell: binanceSellAlerts\r\n      },\r\n      coinbase: {\r\n        buy: coinbaseBuyAlerts,\r\n        sell: coinbaseSellAlerts\r\n      }\r\n    }\r\n\r\n    whichColors = {\r\n      spot: spotColor,\r\n      perp: perpColor,\r\n      binance: binanceColor,\r\n      coinbase: coinbaseColor\r\n    }\r\n\r\n    allOnIndicator = options.toggleAllOnIndicator || false,\r\n\r\n    showType = {\r\n      spot: options.toggleSpot,\r\n      perp: options.togglePerp,\r\n      binance: options.toggleBinance,\r\n      coinbase: options.toggleCoinbase,\r\n    }\r\n\r\n    lowerPercent = [0.3, 1, 2.5, 5]\r\n    upperPercent = [1, 2.5, 5, 10]  \r\n\r\n  }\r\n  // </STARTUP SCRIPT> \r\n\r\n  var ratiosPerp = ORDERBOOK:AGGRPERP-BTCUSDLEVELS.zratios\r\n  var ratiosSpot = ORDERBOOK:AGGRSPOT-BTCUSDLEVELS.zratios \r\n  var ratiosBinance = renderer.sources['ORDERBOOK:BINANCE-BTCUSDTLEVELS'] && renderer.sources['ORDERBOOK:BINANCE-BTCUSDTLEVELS'].zratios\r\n  var ratiosCoinbase = renderer.sources['ORDERBOOK:COINBASE-BTCUSDLEVELS'] && renderer.sources['ORDERBOOK:COINBASE-BTCUSDLEVELS'].zratios \r\n\r\n  var m = [\r\n    { which: 'perp', ratios: ratiosPerp || [], bands: [] },\r\n    { which: 'spot', ratios: ratiosSpot || [], bands: [] },\r\n    { which: 'binance', ratios: ratiosBinance || [], bands: [] },\r\n    { which: 'coinbase', ratios: ratiosCoinbase || [], bands: [] }\r\n  ]\r\n  \r\n  /*var ratiosPerp = ORDERBOOK:AGGRPERP-BTCUSDLEVELS.zratios\r\n  var ratiosSpot = ORDERBOOK:AGGRSPOT-BTCUSDLEVELS.zratios \r\n  var ratiosBinance = renderer.sources['ORDERBOOK:BINANCE-BTCUSDTLEVELS'].zratios\r\n  var ratiosCoinbase = renderer.sources['ORDERBOOK:COINBASE-BTCUSDLEVELS'].zratios \r\n\r\n  var perps = []\r\n  var spots = []\r\n  var binance = []\r\n  var coinbase = []\r\n*/\r\n  //var ratio = 0\r\n\r\n  // for each ratio\r\n  for(let ratioIndex = 0; ratioIndex < 4; ratioIndex++){\r\n\r\n    var allOn = true;\r\n\r\n    // for each type (perp, spot, binance, ...)\r\n    for(let typeIndex = 0; typeIndex < 4; typeIndex++){\r\n\r\n      var c = m[typeIndex]\r\n\r\n      if( showType[c.which]  === false ){\r\n        c.bands.push([0, 0, '']) \r\n        continue\r\n      }\r\n        \r\n      /*\r\n      var ratioPerp = ratiosPerp && ratiosPerp.length > ratioIndex && ratiosPerp[ratioIndex]\r\n      var ratioSpot =  ratiosSpot && ratiosSpot.length > ratioIndex && ratiosSpot[ratioIndex]\r\n      var ratioBinance =  ratiosBinance && ratiosBinance.length > ratioIndex && ratiosBinance[ratioIndex]\r\n      var ratioCoinbase =  ratiosCoinbase && ratiosCoinbase.length > ratioIndex && ratiosCoinbase[ratioIndex]\r\n      */\r\n      var ratio = c.ratios.length && c.ratios[ratioIndex]\r\n      var direction = Math.sign(ratio)\r\n      var buyAlert = alerts[c.which]['buy'][ratioIndex]\r\n      var sellAlert = alerts[c.which]['buy'][ratioIndex]\r\n      var threshold = direction > 0 ? buyAlert : sellAlert\r\n      var thresholdAbs = Math.abs(threshold)\r\n    \r\n      var lower = $price.close + -1 * direction * (($price.close  * lowerPercent[ratioIndex]) / 100)  \r\n      var upper = $price.close + -1 * direction * (($price.close  * upperPercent[ratioIndex]) / 100)\r\n\r\n      if( !ratio || Math.abs(ratio) < thresholdAbs ){\r\n          allOn = false\r\n          c.bands.push([0, 0, '']) \r\n      }else{\r\n\r\n          var alphaRatio = Math.abs(ratio) < thresholdAbs ? 0 : startOpacity + (1 - startOpacity) * ((Math.abs(ratio) - thresholdAbs) / (100 - thresholdAbs))\r\n          var alphaRatioRounded = Math.round(alphaRatio * 100) / 100 \r\n          var colorRatio = 'rgba(' + whichColors[c.which].join(',') + ',' + alphaRatioRounded + ')'\r\n          \r\n          c.bands.push([lower, upper, colorRatio])\r\n      }\r\n      \r\n    }// end for each type\r\n\r\n    if( allOnIndicator && allOn ){\r\n      for(let typeIndex = 0; typeIndex < 4; typeIndex++){\r\n        var c = m[typeIndex]\r\n        c.bands[ratioIndex] = [lower, upper, options.allOnColor]\r\n      }\r\n    }\r\n\r\n  } // end for each ratios\r\n\r\n\r\nvar i = 0\r\n\r\nfor(let ratioIndex = 0; ratioIndex < 4; ratioIndex++){\r\n\r\n    for(let typeIndex = 0; typeIndex < 4; typeIndex++){\r\n\r\n       var c = m[typeIndex]\r\n    \r\n       if( c.bands.length && c.bands[ratioIndex][0] !== 0 ) {\r\n         renderer.indicators[indicatorId].series[i] = {\r\n          time: time, \r\n          lowerValue: c.bands[ratioIndex][0],\r\n          higherValue: c.bands[ratioIndex][1],\r\n          color:  c.bands[ratioIndex][2]\r\n        }\r\n      }\r\n      i++\r\n    }\r\n}\r\n\r\n\r\n\r\nreturn\r\n//perp\r\nbrokenarea({\r\n        time: time, \r\n        lowerValue: 0,\r\n        higherValue: 0,\r\n        color:  options.color\r\n      })\r\nbrokenarea({\r\n        time: time, \r\n        lowerValue: 0,\r\n        higherValue: 0,\r\n        color:  options.color\r\n      })\r\nbrokenarea({\r\n        time: time, \r\n        lowerValue: 0,\r\n        higherValue: 0,\r\n        color:  options.color\r\n      })\r\nbrokenarea({\r\n        time: time, \r\n        lowerValue: 0,\r\n        higherValue: 0,\r\n        color:  options.color\r\n      })     \r\n      brokenarea({\r\n        time: time, \r\n        lowerValue: 0,\r\n        higherValue: 0,\r\n        color:  options.color\r\n      })\r\nbrokenarea({\r\n        time: time, \r\n        lowerValue: 0,\r\n        higherValue: 0,\r\n        color:  options.color\r\n      })\r\nbrokenarea({\r\n        time: time, \r\n        lowerValue: 0,\r\n        higherValue: 0,\r\n        color:  options.color\r\n      })\r\nbrokenarea({\r\n        time: time, \r\n        lowerValue: 0,\r\n        higherValue: 0,\r\n        color:  options.color\r\n      })   \r\n      brokenarea({\r\n        time: time, \r\n        lowerValue: 0,\r\n        higherValue: 0,\r\n        color:  options.color\r\n      })\r\nbrokenarea({\r\n        time: time, \r\n        lowerValue: 0,\r\n        higherValue: 0,\r\n        color:  options.color\r\n      })\r\nbrokenarea({\r\n        time: time, \r\n        lowerValue: 0,\r\n        higherValue: 0,\r\n        color:  options.color\r\n      })\r\nbrokenarea({\r\n        time: time, \r\n        lowerValue: 0,\r\n        higherValue: 0,\r\n        color:  options.color\r\n      })   \r\n      brokenarea({\r\n        time: time, \r\n        lowerValue: 0,\r\n        higherValue: 0,\r\n        color:  options.color\r\n      })\r\nbrokenarea({\r\n        time: time, \r\n        lowerValue: 0,\r\n        higherValue: 0,\r\n        color:  options.color\r\n      })\r\nbrokenarea({\r\n        time: time, \r\n        lowerValue: 0,\r\n        higherValue: 0,\r\n        color:  options.color\r\n      })\r\nbrokenarea({\r\n        time: time, \r\n        lowerValue: 0,\r\n        higherValue: 0,\r\n        color:  options.color\r\n      })",
                "id": "orderbook-overlays-copy-1",
                "name": "Orderbook Overlays copy 1",
                "options": {
                  "priceScaleId": "right",
                  "startOpacity": null,
                  "allOnColor": "rgb(242,54,69)",
                  "binanceColor": "rgb(255,255,255)",
                  "perpColor": "rgb(41,98,255)",
                  "spotColor": "rgb(255,235,59)",
                  "scaleMargins": {
                    "top": 0.29,
                    "bottom": 0.34
                  },
                  "coinbaseColor": "rgb(247,124,128)",
                  "visible": true,
                  "priceFormat": {
                    "type": "price",
                    "precision": 2,
                    "minMove": 0.01,
                    "auto": true
                  },
                  "toggleSpot": false,
                  "togglePerp": false,
                  "toggleBinance": false,
                  "toggleCoinbase": true,
                  "toggleAllOnIndicator": null
                },
                "description": null,
                "unsavedChanges": true,
                "optionsDefinitions": {},
                "series": [
                  "orderbook-overlays-copy-1",
                  "l8pxjapg",
                  "aitmjzsf",
                  "zlg2kiua",
                  "sgkfkyox",
                  "cw6e1sxx",
                  "ai5fl697",
                  "i4w8fmm1",
                  "c8hnyqw0",
                  "tuodanhx",
                  "qrpfibfh",
                  "0flngy42",
                  "1z53w4wc",
                  "yufyxou0",
                  "xujiph28",
                  "9q5tbxxb"
                ],
                "displayName": "Orderbook Overlays copy 1"
              }
            },
            "indicatorOrder": [
              "cvd",
              "liquidations",
              "price",
              "volume",
              "orderbook-overlays",
              "obv-spots copy 1",
              "orderbook-overlays-copy-1"
            ],
            "priceScales": {
              "right": {
                "scaleMargins": {
                  "top": 0.3,
                  "bottom": 0.32
                },
                "priceFormat": {
                  "precision": 2,
                  "minMove": 0.01
                },
                "indicators": [
                  "Orderbook Overlays"
                ]
              },
              "cvd": {
                "scaleMargins": {
                  "top": 0.73,
                  "bottom": 0.07
                },
                "indicators": [
                  "CVD"
                ]
              },
              "volume_liquidations": {
                "scaleMargins": {
                  "top": 0,
                  "bottom": 0.96
                }
              },
              "volume": {
                "scaleMargins": {
                  "top": 0.87,
                  "bottom": 0
                },
                "indicators": [
                  "Volume"
                ]
              },
              "obv-copy-1": {
                "scaleMargins": {
                  "top": 0.73,
                  "bottom": 0.07
                },
                "indicators": [
                  "OBV spots"
                ]
              }
            },
            "layouting": false,
            "showIndicators": true,
            "timeframe": "300",
            "refreshRate": 1000,
            "showAlerts": true,
            "showAlertsLabel": true,
            "showLegend": true,
            "fillGapsWithEmpty": true,
            "showHorizontalGridlines": false,
            "horizontalGridlinesColor": "rgba(255,255,255,.1)",
            "showVerticalGridlines": false,
            "verticalGridlinesColor": "rgba(255,255,255,.1)",
            "showWatermark": false,
            "watermarkColor": "rgba(255,255,255,.1)",
            "showBorder": true,
            "borderColor": null,
            "showLeftScale": false,
            "showRightScale": true,
            "showTimeScale": true,
            "hiddenMarkets": {},
            "barSpacing": 2.6439307757262256
          },
          "markets": [
            "COINBASE:BTC-USD",
            "ORDERBOOK:BITMEX-XBTUSD"
          ]
        }
      },
      "layout": [
        {
          "i": "chart",
          "type": "chart",
          "x": 0,
          "y": 0,
          "w": 8,
          "h": 12,
          "moved": false
        },
        {
          "i": "chart copy 1",
          "type": "chart",
          "x": 8,
          "y": 0,
          "w": 8,
          "h": 12,
          "moved": false
        },
        {
          "i": "chart copy 2",
          "type": "chart",
          "x": 0,
          "y": 12,
          "w": 12,
          "h": 12,
          "moved": false
        },
        {
          "i": "chart copy 3",
          "type": "chart",
          "x": 12,
          "y": 12,
          "w": 12,
          "h": 12,
          "moved": false
        },
        {
          "i": "chart copy 4",
          "type": "chart",
          "x": 16,
          "y": 0,
          "w": 8,
          "h": 12,
          "moved": false
        }
      ]
    },
    "chart": {
      "indicatorsErrors": {},
      "indicators": {
        "cvd": {
          "enabled": true,
          "name": "CVD",
          "description": "Cumulative Volume Delta",
          "script": "plotline(cum(vbuy - vsell), title=cvd)",
          "options": {
            "priceScaleId": "cvd",
            "priceFormat": {
              "type": "volume"
            },
            "color": "rgba(209,212,220,0.81)",
            "scaleMargins": {
              "top": 0.73,
              "bottom": 0.07
            },
            "visible": true,
            "lineWidth": 1,
            "priceLineStyle": 1,
            "lineStyle": 1
          },
          "id": "cvd",
          "createdAt": 1700269685372,
          "updatedAt": 1702412185043,
          "series": [
            "cvd"
          ],
          "unsavedChanges": false,
          "preview": {},
          "optionsDefinitions": {}
        },
        "liquidations": {
          "enabled": true,
          "name": "Liquidations",
          "description": "Liquidations by side",
          "script": "plothistogram(lbuy, color=options.upColor)\nplothistogram(-lsell, color=options.downColor)",
          "options": {
            "priceFormat": {
              "type": "volume"
            },
            "priceScaleId": "volume_liquidations",
            "upColor": "rgb(255,76,243)",
            "downColor": "rgb(255,183,77)",
            "scaleMargins": {
              "top": 0,
              "bottom": 0.96
            },
            "visible": false
          },
          "id": "liquidations",
          "createdAt": 1700269685372,
          "updatedAt": 1700815523685,
          "series": [
            "liquidations",
            "n51e34d4"
          ],
          "preview": {},
          "unsavedChanges": false,
          "optionsDefinitions": {}
        },
        "price": {
          "enabled": true,
          "name": "Price",
          "script": "src = { sources: { \"BINANCE:btcusdt\":BINANCE:btcusdt }, localTimestamp: time }\r\n\r\nvar ohlc = options.useHeikinAshi ? avg_heikinashi(src) : options.useGaps ? avg_ohlc_with_gaps(src) : avg_ohlc(src)\r\n\r\nplotcandlestick(ohlc, id=price)",
          "options": {
            "priceScaleId": "right",
            "priceFormat": {
              "auto": true,
              "precision": 1,
              "minMove": 0.1
            },
            "priceLineVisible": true,
            "lastValueVisible": true,
            "borderVisible": false,
            "upColor": "rgba(255,235,59,0.52)",
            "downColor": "rgba(242,54,69,0.64)",
            "borderUpColor": "rgba(255,245,157,0.66)",
            "borderDownColor": "rgba(178,40,51,0.52)",
            "wickUpColor": "rgb(223,211,144)",
            "wickDownColor": "rgba(239,67,82,0.47)",
            "useGaps": false,
            "useHeikinAshi": false,
            "scaleMargins": {
              "top": 0.29,
              "bottom": 0.34
            },
            "visible": true
          },
          "id": "price",
          "createdAt": 1700269685372,
          "updatedAt": 1702412161838,
          "series": [
            "price"
          ],
          "unsavedChanges": true,
          "preview": {},
          "optionsDefinitions": {}
        },
        "volume": {
          "enabled": true,
          "name": "Volume",
          "description": "Volume + delta",
          "script": "var _vbuy = source(vbuy, type=spot)\nvar _vsell = source(vsell, type=spot)\n\nif (upColor === 0) {\n  if (options.showDelta) {\n    upColor = options.upBgColor\n    downColor = options.downBgColor\n  } else {\n    upColor = options.upColor\n    downColor = options.downColor\n  }\n}\n\nif (options.showDelta) {\n  plothistogram({ time: time, value: Math.abs(_vbuy-_vsell), color: _vbuy - _vsell > 0 ? options.upColor : options.downColor})\n}\n\nplothistogram({ time: time, value: _vbuy + _vsell, color: _vbuy > _vsell ? upColor : downColor })",
          "options": {
            "priceScaleId": "volume",
            "priceFormat": {
              "type": "volume"
            },
            "upColor": "rgba(76,175,80,0.62)",
            "downColor": "rgba(242,54,69,0.71)",
            "scaleMargins": {
              "top": 0.87,
              "bottom": 0
            },
            "showDelta": true,
            "upBgColor": "rgba(178,181,190,0.33)",
            "downBgColor": "rgba(93,96,107,0.38)",
            "visible": true,
            "lastValueVisible": true,
            "color": "rgba(195,168,122,0.54)",
            "showDeltaOnly": true,
            "showBoth": true
          },
          "id": "volume",
          "createdAt": 1700269685372,
          "updatedAt": 1702530630403,
          "series": [
            "volume",
            "j8b2sunh"
          ],
          "unsavedChanges": false,
          "preview": {},
          "displayName": "Volume",
          "optionsDefinitions": {}
        },
        "orderbook-overlays": {
          "script": "if (!pendingMarkers) {\r\n    // runs only once\r\n    pendingMarkers = []\r\n    spotColor = options.spotColor.match(/\\(([\\d.]+),([\\d.]+),([\\d.]+),?([\\d.]+)?\\)$/).slice(1,5).map(a => +a)\r\n    perpColor = options.perpColor.match(/\\(([\\d.]+),([\\d.]+),([\\d.]+),?([\\d.]+)?\\)$/).slice(1,5).map(a => +a)\r\n    binanceColor = options.binanceColor.match(/\\(([\\d.]+),([\\d.]+),([\\d.]+),?([\\d.]+)?\\)$/).slice(1,5).map(a => +a)\r\n    coinbaseColor = options.coinbaseColor.match(/\\(([\\d.]+),([\\d.]+),([\\d.]+),?([\\d.]+)?\\)$/).slice(1,5).map(a => +a)\r\n    bitmexColor = options.bitmexColor.match(/\\(([\\d.]+),([\\d.]+),([\\d.]+),?([\\d.]+)?\\)$/).slice(1, 5).map(a => +a);\r\n\r\n    //allOnColor = options.allOnColor.match(/\\(([\\d.]+),([\\d.]+),([\\d.]+),?([\\d.]+)?\\)$/).slice(1,5).map(a => +a)\r\n\r\n    spotOpacity = spotColor.pop()\r\n    perpOpacity = perpColor.pop()\r\n    binanceOpacity = binanceColor.pop()\r\n    coinbaseOpacity = coinbaseColor.pop()\r\n    bitmexOpacity = bitmexColor.pop()\r\n   // allOnColorOpacity = allOnColor.pop()\r\n\r\n    startOpacity = options.startOpacity || 0.1\r\n  \r\n    spotBuyAlerts  = [40, 63, 46, 60]\r\n    spotSellAlerts = [-40, -63, -46, -60]\r\n\r\n    perpBuyAlerts  = [38, 27, 36, 35]\r\n    perpSellAlerts = [-20, -27, -36, -35]\r\n\r\n    binanceBuyAlerts  = [70, 70, 70, 70]\r\n    binanceSellAlerts = [-70, -70, -70, -70]\r\n\r\n    coinbaseBuyAlerts  = [50, 50, 50, 50]\r\n    coinbaseSellAlerts = [-50, -70, -65, -50]\r\n\r\n    bitmexBuyAlerts  = [-50, -60, -50, -50]\r\n    bitmexSellAlerts = [-50, -60, -50, -50]\r\n\r\n    alerts = {\r\n      spot: {\r\n        buy: spotBuyAlerts,\r\n        sell: spotSellAlerts\r\n      },\r\n      perp: {\r\n        buy: perpBuyAlerts,\r\n        sell: perpSellAlerts\r\n      },\r\n      binance: {\r\n        buy: binanceBuyAlerts,\r\n        sell: binanceSellAlerts\r\n      },\r\n      coinbase: {\r\n        buy: coinbaseBuyAlerts,\r\n        sell: coinbaseSellAlerts\r\n      },\r\n        bitmex: {\r\n            buy: bitmexBuyAlerts,\r\n            sell: bitmexSellAlerts\r\n        }\r\n    }\r\n\r\n    whichColors = {\r\n      spot: spotColor,\r\n      perp: perpColor,\r\n      binance: binanceColor,\r\n      coinbase: coinbaseColor,\r\n      bitmex: bitmexColor\r\n    }\r\n\r\n    allOnIndicator = options.toggleAllOnIndicator || false,\r\n\r\n    showType = {\r\n      spot: options.toggleSpot,\r\n      perp: options.togglePerp,\r\n      binance: options.toggleBinance,\r\n      coinbase: options.toggleCoinbase,\r\n      bitmex: options.toggleBitmex\r\n    }\r\n\r\n    showBand = [\r\n        options.toggleBand1 || false,\r\n        options.toggleBand2 || false,\r\n        options.toggleBand3 || false,\r\n        options.toggleBand4 || false,\r\n    ]\r\n\r\n    lowerPercent = [options.band0lowerPercent || 0.11, 1, 2.5, 5]\r\n    upperPercent = [1, 2.5, 5, 10]  \r\n\r\n  }\r\n  // </STARTUP SCRIPT> \r\n\r\n  var ratiosPerp = ORDERBOOK:AGGRPERP-BTCUSD.zratios\r\n  var ratiosSpot = ORDERBOOK:AGGRSPOT-BTCUSD.zratios \r\n  var ratiosBinance = renderer.sources['ORDERBOOK:BINANCE-BTCUSDT'] && renderer.sources['ORDERBOOK:BINANCE-BTCUSDT'].zratios\r\n  var ratiosCoinbase = renderer.sources['ORDERBOOK:COINBASE-BTCUSD'] && renderer.sources['ORDERBOOK:COINBASE-BTCUSD'].zratios \r\n  var ratiosBitmex = renderer.sources['ORDERBOOK:BITMEX-XBTUSD'] && renderer.sources['ORDERBOOK:BITMEX-XBTUSD'].zratios\r\n\r\n  var m = [\r\n      { which: 'perp', ratios: ratiosPerp || [], bands: [] },\r\n      { which: 'spot', ratios: ratiosSpot || [], bands: [] },\r\n      { which: 'binance', ratios: ratiosBinance || [], bands: [] },\r\n      { which: 'coinbase', ratios: ratiosCoinbase || [], bands: [] },\r\n      { which: 'bitmex', ratios: ratiosBitmex || [], bands: [] }\r\n  ];\r\n\r\n  // for each ratio\r\n  for(let ratioIndex = 0; ratioIndex < 4; ratioIndex++){\r\n\r\n    // TODO must be same direction\r\n    var allOn = true;\r\n\r\n    // for each type (perp, spot, binance, ...)\r\n    for(let typeIndex = 0; typeIndex < m.length; typeIndex++){\r\n\r\n      var c = m[typeIndex]\r\n\r\n      if( showBand[ratioIndex] === false || showType[c.which]  === false ){\r\n        c.bands.push([0, 0, '']) \r\n        continue\r\n      }\r\n        \r\n      var ratio = c.ratios.length && c.ratios[ratioIndex]\r\n      var direction = Math.sign(ratio)\r\n      var buyAlert = alerts[c.which]['buy'][ratioIndex]\r\n      var sellAlert = alerts[c.which]['sell'][ratioIndex]\r\n      var threshold = direction > 0 ? buyAlert : sellAlert\r\n      var thresholdAbs = Math.abs(threshold)\r\n    \r\n      var lower = $price.close + -1 * direction * (($price.close  * lowerPercent[ratioIndex]) / 100)  \r\n      var upper = $price.close + -1 * direction * (($price.close  * upperPercent[ratioIndex]) / 100)\r\n\r\n      if( !ratio || Math.abs(ratio) < thresholdAbs ){\r\n          allOn = false\r\n          c.bands.push([0, 0, '']) \r\n      }else{\r\n\r\n          var alphaRatio = Math.abs(ratio) < thresholdAbs ? 0 : startOpacity + (1 - startOpacity) * ((Math.abs(ratio) - thresholdAbs) / (100 - thresholdAbs))\r\n          var alphaRatioRounded = Math.round(alphaRatio * 100) / 100 \r\n          var colorRatio = 'rgba(' + whichColors[c.which].join(',') + ',' + alphaRatioRounded + ')'\r\n          \r\n          c.bands.push([lower, upper, colorRatio])\r\n      }\r\n      \r\n    }// end for each type\r\n\r\n    if( allOnIndicator && allOn ){\r\n      for(let typeIndex = 0; typeIndex < 4; typeIndex++){\r\n        var c = m[typeIndex]\r\n        c.bands[ratioIndex] = [lower, upper, options.allOnColor]\r\n      }\r\n    }\r\n\r\n  } // end for each ratios\r\n\r\n\r\nvar i = 0\r\n\r\nfor(let ratioIndex = 0; ratioIndex < 4; ratioIndex++){\r\n\r\n    if( showBand[ratioIndex] === false ){\r\n      i = i + m.length\r\n      continue\r\n    }\r\n\r\n    for(let typeIndex = 0; typeIndex < m.length; typeIndex++){\r\n\r\n       var c = m[typeIndex]\r\n    \r\n       if( c.bands.length && c.bands[ratioIndex][0] !== 0 ) {\r\n         renderer.indicators[indicatorId].series[i] = {\r\n          time: time, \r\n          lowerValue: c.bands[ratioIndex][0],\r\n          higherValue: c.bands[ratioIndex][1],\r\n          color:  c.bands[ratioIndex][2]\r\n        }\r\n      }\r\n\r\n      i++\r\n    }\r\n}\r\n\r\n\r\n\r\nreturn\r\n//perp\r\nbrokenarea({\r\n        time: time, \r\n        lowerValue: 0,\r\n        higherValue: 0,\r\n        color:  options.color\r\n      })\r\nbrokenarea({\r\n        time: time, \r\n        lowerValue: 0,\r\n        higherValue: 0,\r\n        color:  options.color\r\n      })\r\nbrokenarea({\r\n        time: time, \r\n        lowerValue: 0,\r\n        higherValue: 0,\r\n        color:  options.color\r\n      })\r\nbrokenarea({\r\n        time: time, \r\n        lowerValue: 0,\r\n        higherValue: 0,\r\n        color:  options.color\r\n      })     \r\n      brokenarea({\r\n        time: time, \r\n        lowerValue: 0,\r\n        higherValue: 0,\r\n        color:  options.color\r\n      })\r\nbrokenarea({\r\n        time: time, \r\n        lowerValue: 0,\r\n        higherValue: 0,\r\n        color:  options.color\r\n      })\r\nbrokenarea({\r\n        time: time, \r\n        lowerValue: 0,\r\n        higherValue: 0,\r\n        color:  options.color\r\n      })\r\nbrokenarea({\r\n        time: time, \r\n        lowerValue: 0,\r\n        higherValue: 0,\r\n        color:  options.color\r\n      })   \r\n      brokenarea({\r\n        time: time, \r\n        lowerValue: 0,\r\n        higherValue: 0,\r\n        color:  options.color\r\n      })\r\nbrokenarea({\r\n        time: time, \r\n        lowerValue: 0,\r\n        higherValue: 0,\r\n        color:  options.color\r\n      })\r\nbrokenarea({\r\n        time: time, \r\n        lowerValue: 0,\r\n        higherValue: 0,\r\n        color:  options.color\r\n      })\r\nbrokenarea({\r\n        time: time, \r\n        lowerValue: 0,\r\n        higherValue: 0,\r\n        color:  options.color\r\n      })   \r\n      brokenarea({\r\n        time: time, \r\n        lowerValue: 0,\r\n        higherValue: 0,\r\n        color:  options.color\r\n      })\r\nbrokenarea({\r\n        time: time, \r\n        lowerValue: 0,\r\n        higherValue: 0,\r\n        color:  options.color\r\n      })\r\nbrokenarea({\r\n        time: time, \r\n        lowerValue: 0,\r\n        higherValue: 0,\r\n        color:  options.color\r\n      })\r\nbrokenarea({\r\n        time: time, \r\n        lowerValue: 0,\r\n        higherValue: 0,\r\n        color:  options.color\r\n      })\r\n            brokenarea({\r\n        time: time, \r\n        lowerValue: 0,\r\n        higherValue: 0,\r\n        color:  options.color\r\n      })\r\nbrokenarea({\r\n        time: time, \r\n        lowerValue: 0,\r\n        higherValue: 0,\r\n        color:  options.color\r\n      })\r\nbrokenarea({\r\n        time: time, \r\n        lowerValue: 0,\r\n        higherValue: 0,\r\n        color:  options.color\r\n      })\r\nbrokenarea({\r\n        time: time, \r\n        lowerValue: 0,\r\n        higherValue: 0,\r\n        color:  options.color\r\n      })",
          "id": "orderbook-overlays",
          "name": "Orderbook Overlays",
          "options": {
            "priceScaleId": "right",
            "startOpacity": null,
            "allOnColor": "rgb(242,54,69)",
            "binanceColor": "rgb(255,255,255)",
            "perpColor": "rgb(41,98,255)",
            "spotColor": "rgb(255,235,59)",
            "scaleMargins": {
              "top": 0.29,
              "bottom": 0.34
            },
            "coinbaseColor": "rgb(247,124,128)",
            "visible": true,
            "priceFormat": {
              "type": "price",
              "precision": 1,
              "minMove": 0.1,
              "auto": true
            },
            "toggleSpot": false,
            "togglePerp": false,
            "toggleBinance": true,
            "toggleCoinbase": false,
            "toggleAllOnIndicator": null,
            "toggleBitmex": null,
            "bitmexColor": "rgb(206,147,216)",
            "toggleBand1": true,
            "toggleBand2": true,
            "toggleBand3": true,
            "toggleBand4": true,
            "band0lowerPercent": null
          },
          "description": null,
          "createdAt": 1703135778962,
          "updatedAt": 1703135778962,
          "unsavedChanges": true,
          "optionsDefinitions": {},
          "series": [
            "orderbook-overlays",
            "ks71p753",
            "5tle1jo8",
            "8yfbht21",
            "et09ytet",
            "h2qmqzq7",
            "g42uo2v7",
            "2u95c1uj",
            "1aipjak3",
            "ke1sn6ap",
            "zm4hi0lp",
            "85c8lyaq",
            "5kfdoe5c",
            "nxt3bafv",
            "40hgfjm3",
            "53xo4943",
            "62vk8r0s",
            "eqc7ult1",
            "t9xx3mmp",
            "5gfjom0m"
          ],
          "displayName": "Orderbook Overlays"
        },
        "obv-spots copy 1": {
          "script": "if (markers === 0) {\r\n  // first script execution (0 is default values for all persistent variables)\r\n\r\n  // create a var to store already drawn markers\r\n  markers = []\r\n\r\n  // contain the last marker that can change as the bar update\r\n  repaintableMarker = null\r\n\r\n  // if candle body has a price percent change less than bodyPercentWatch, we start a refinement\r\n  bodyPercentWatch = options.bodyPercentWatch || 0.3\r\n\r\n  // if a wick is x times greater than the other, we might use it to refine change the side\r\n  wickRatioThreshold = options.wickRatioThreshold || 1.5\r\n\r\n  // paint a marker when OBV has been refined (changed of direction)\r\n  toggleDebug = options.toggleDebug || false\r\n\r\n  // when on, we calculate the wick percent difference and keep only that volume to add to OBV \r\n  toggleVolumeWick = options.toggleVolumeWick || false\r\n\r\n  togglePrintNormalObv = options.togglePrintNormalObv || false\r\n}\r\nif (repaintableMarker && repaintableMarker.time < time) {\r\n  // bar is +1 since active marker was added, lock it in the array\r\n  markers.push(repaintableMarker)\r\n\r\n  // free up active marker\r\n  repaintableMarker = null\r\n}\r\n\r\nvar newMarker = null\r\nvar _vbuy = source(vbuy, type=spot)\r\nvar _vsell = source(vsell, type=spot)\r\nvar _open = $price.open\r\nvar _high = $price.high\r\nvar _low = $price.low\r\nvar _close = $price.close\r\n\r\nvar sign = _close > _open ? 1 : -1\r\nvar volume = _vbuy + _vsell\r\n\r\nvar bodySize = Math.abs(_close - _open);\r\nvar priceChange = (_close - _open) / _open; // Percentage change\r\n\r\nif( togglePrintNormalObv ){\r\n    plotline(cum(sign * volume), title=\"Original\", color=options.originalObvColor)\r\n}\r\n\r\nvar improved = false\r\n\r\n// Check if price change is less than 0.4%\r\nif (Math.abs(priceChange) < bodyPercentWatch/100 ) {\r\n    var upperWickSize = _high - _close;\r\n    var lowerWickSize = _close - _low;\r\n\r\n    // Calculate the thresholds\r\n    var upperWickThreshold = wickRatioThreshold * lowerWickSize;\r\n    var lowerWickThreshold = wickRatioThreshold * upperWickSize;\r\n\r\n    // Check if upper and lower wicks have similar sizes\r\n    if (upperWickSize < upperWickThreshold && lowerWickSize < lowerWickThreshold) {\r\n        // Neutral move, don't add volume\r\n        sign = 0\r\n        improved = true\r\n    }else{\r\n        // Calculate the thresholds\r\n        var upperWickThreshold = wickRatioThreshold * lowerWickSize;\r\n        var lowerWickThreshold = wickRatioThreshold * upperWickSize;\r\n\r\n        // Determine the side based on wick sizes\r\n        // upper: 500, lower 100\r\n        if (upperWickSize > upperWickThreshold) {\r\n            improved = sign !== -1\r\n            // More selling happened, add volume as negative\r\n            sign = -1\r\n            if( toggleVolumeWick ) {\r\n                improved = true\r\n                var percentageDifference = ((upperWickSize - lowerWickSize) / upperWickSize);\r\n                volume = percentageDifference * volume\r\n            }\r\n        } else if (lowerWickSize > lowerWickThreshold) {\r\n            improved = sign !== 1\r\n            // More buying happened, add volume as positive\r\n            sign = 1\r\n            if( toggleVolumeWick ) {\r\n                improved = true\r\n                var percentageDifference = ((lowerWickSize - upperWickSize) / lowerWickSize);\r\n                volume = percentageDifference * volume\r\n            }\r\n        }\r\n    }\r\n\r\n    if( improved && toggleDebug){\r\n        if (sign == -1) {\r\n            // newMarker is a temporary variable (not included in the indicator state)\r\n            // to avoid it being treated as persistent variable we wrap it inside parenthesis\r\n            (newMarker) = {\r\n                time: time,\r\n                position: 'aboveBar',\r\n                color: 'red',\r\n                shape: 'arrowDown'\r\n            }\r\n        }\r\n\r\n        if (sign == 1) {\r\n            (newMarker) = {\r\n                time: time,\r\n                position: 'belowBar',\r\n                color: 'lime',\r\n                shape: 'arrowUp'\r\n            }\r\n        } \r\n    }\r\n}\r\n\r\n\r\nif (newMarker || (repaintableMarker && !newMarker)) {\r\n  // override persistent variable repaintable marker\r\n  repaintableMarker = newMarker\r\n  \r\n  var index = togglePrintNormalObv ? 1 : 0\r\n\r\n  if (series[index].setMarkers) {\r\n    series[index].setMarkers(markers.concat(repaintableMarker))\r\n  }\r\n}\r\n\r\nvar obv = cum(sign * volume)\r\nplotline(obv, title=\"S\", color=options.refinedObvColor)",
          "id": "obv-spots copy 1",
          "name": "OBV spots",
          "options": {
            "priceScaleId": "obv-copy-1",
            "visible": true,
            "scaleMargins": {
              "top": 0.73,
              "bottom": 0.07
            },
            "lineStyle": 1,
            "color": "rgba(255,235,59,0.81)",
            "bodyPercentWatch": 0.3,
            "wickDiffPercent": 90,
            "debug": null,
            "toggleDebug": true,
            "toggleVolumeWick": true,
            "wickRatioThreshold": 1.5,
            "togglePrintNormalObv": false,
            "originalObvColor": "rgb(178,181,190)",
            "refinedObvColor": "rgb(41,98,255)"
          },
          "description": null,
          "createdAt": 1701126053261,
          "updatedAt": 1701126059594,
          "unsavedChanges": true,
          "optionsDefinitions": {},
          "series": [
            "obv-spots copy 1",
            "5nr2riyx"
          ],
          "displayName": "OBV spots"
        }
      },
      "indicatorOrder": [
        "cvd",
        "liquidations",
        "price",
        "volume",
        "orderbook-overlays",
        "obv-spots copy 1"
      ],
      "priceScales": {
        "right": {
          "scaleMargins": {
            "top": 0.29,
            "bottom": 0.34
          },
          "priceFormat": {
            "precision": 1,
            "minMove": 0.1
          },
          "indicators": [
            "Price"
          ]
        },
        "cvd": {
          "scaleMargins": {
            "top": 0.73,
            "bottom": 0.07
          },
          "indicators": [
            "CVD"
          ]
        },
        "volume_liquidations": {
          "scaleMargins": {
            "top": 0,
            "bottom": 0.96
          }
        },
        "volume": {
          "scaleMargins": {
            "top": 0.87,
            "bottom": 0
          },
          "indicators": [
            "Volume"
          ]
        },
        "obv-copy-1": {
          "scaleMargins": {
            "top": 0.73,
            "bottom": 0.07
          },
          "indicators": [
            "OBV spots"
          ]
        }
      },
      "layouting": false,
      "showIndicators": true,
      "timeframe": "900",
      "refreshRate": 10000,
      "showAlerts": true,
      "showAlertsLabel": true,
      "showLegend": false,
      "fillGapsWithEmpty": true,
      "showHorizontalGridlines": false,
      "horizontalGridlinesColor": "rgba(255,255,255,.1)",
      "showVerticalGridlines": false,
      "verticalGridlinesColor": "rgba(255,255,255,.1)",
      "showWatermark": true,
      "watermarkColor": "rgba(255,255,255,.1)",
      "showBorder": true,
      "borderColor": null,
      "showLeftScale": false,
      "showRightScale": true,
      "showTimeScale": true,
      "hiddenMarkets": {},
      "barSpacing": 5.452222895638527,
      "_id": "chart"
    },
    "settings": {
      "_id": "settings",
      "preferQuoteCurrencySize": true,
      "aggregationLength": 1000,
      "calculateSlippage": null,
      "wsProxyUrl": null,
      "disableAnimations": false,
      "autoHideHeaders": true,
      "autoHideNames": true,
      "theme": "dark",
      "backgroundColor": "rgb(23,27,41)",
      "textColor": "",
      "buyColor": "rgb(100, 157, 102)",
      "sellColor": "rgb(239, 67, 82)",
      "timezoneOffset": 46800000,
      "useAudio": false,
      "audioVolume": 1,
      "audioFilters": {
        "PingPongDelay": true,
        "Compressor": false,
        "Delay": false,
        "HighPassFilter": true,
        "LowPassFilter": false
      },
      "sections": [
        "settings-workspaces",
        "settings-trades",
        "timeframe-minutes",
        "settings-exchanges",
        "search-exchanges",
        "search-extras",
        "indicator-right-colors",
        "indicator-left-script",
        "indicator-right-scale",
        "search-type",
        "settings-other"
      ],
      "searchTypes": {
        "recentSearches": true,
        "historical": false,
        "spots": false,
        "perpetuals": false,
        "futures": false,
        "normalize": false,
        "mergeUsdt": false
      },
      "searchQuotes": {},
      "previousSearchSelections": [
        {
          "label": "BTCUSD+AGGRPERPBTCUSD",
          "markets": [
            "BINANCE_FUTURES:btcusd_perp",
            "BINANCE_FUTURES:btcusdt",
            "BYBIT:BTCUSD",
            "BYBIT:BTCUSDT",
            "OKEX:BTC-USD-SWAP",
            "OKEX:BTC-USDC-SWAP",
            "OKEX:BTC-USDT-SWAP",
            "ORDERBOOK:AGGRPERP-BTCUSD"
          ],
          "count": 8
        },
        {
          "label": "BTCUSD+AGGRSPOTBTCUSD",
          "markets": [
            "BINANCE:btcfdusd",
            "BINANCE:btcusdc",
            "BINANCE:btcusdt",
            "COINBASE:BTC-USD",
            "COINBASE:BTC-USDT",
            "ORDERBOOK:AGGRSPOT-BTCUSD"
          ],
          "count": 6
        },
        {
          "label": "BTCUSD+BITMEXXBUSD",
          "markets": [
            "COINBASE:BTC-USD",
            "ORDERBOOK:BITMEX-XBTUSD"
          ],
          "count": 2
        },
        {
          "label": "BTCUSD+COINBASEBTCUSD",
          "markets": [
            "COINBASE:BTC-USD",
            "ORDERBOOK:COINBASE-BTCUSD"
          ],
          "count": 2
        },
        {
          "label": "BTCUSD+BINANCEBTCUSD",
          "markets": [
            "BINANCE:btcusdt",
            "ORDERBOOK:BINANCE-BTCUSDT"
          ],
          "count": 2
        },
        {
          "label": "BTCUSD+AGGRPERPBTCUSD+AGGRSPO...",
          "markets": [
            "COINBASE:BTC-USD",
            "ORDERBOOK:AGGRPERP-BTCUSD",
            "ORDERBOOK:AGGRSPOT-BTCUSD",
            "ORDERBOOK:BINANCE-BTCUSDT",
            "ORDERBOOK:BITMEX-XBTUSD",
            "ORDERBOOK:COINBASE-BTCUSD"
          ],
          "count": 6
        },
        {
          "label": "BTCUSD+COINBASEBTCUSDLEVELS",
          "markets": [
            "COINBASE:BTC-USD",
            "ORDERBOOK:COINBASE-BTCUSDLEVELS"
          ],
          "count": 2
        },
        {
          "label": "BTCUSD+BITMEXXBTUSDLEVELS",
          "markets": [
            "COINBASE:BTC-USD",
            "ORDERBOOK:BITMEX-XBTUSDLEVELS"
          ],
          "count": 2
        },
        {
          "label": "ORDERBOOK:COINBASE-BTCUSDLEVELS",
          "markets": [
            "ORDERBOOK:COINBASE-BTCUSDLEVELS"
          ],
          "count": 0
        },
        {
          "label": "BTCUSD+AGGRPERPBTCUSDLEVELS",
          "markets": [
            "BINANCE_FUTURES:btcusd_perp",
            "BINANCE_FUTURES:btcusdt",
            "BYBIT:BTCUSD",
            "BYBIT:BTCUSDT",
            "OKEX:BTC-USD-SWAP",
            "OKEX:BTC-USDC-SWAP",
            "OKEX:BTC-USDT-SWAP",
            "ORDERBOOK:AGGRPERP-BTCUSDLEVELS"
          ],
          "count": 8
        },
        {
          "label": "BTCUSD+AGGRPERPBTCUSDLEVELS",
          "markets": [
            "BINANCE_FUTURES:btcusd_perp",
            "BINANCE_FUTURES:btcusdt",
            "BYBIT:BTCUSD",
            "BYBIT:BTCUSDC-SPOT",
            "BYBIT:BTCUSDT",
            "BYBIT:BTCUSDT-SPOT",
            "OKEX:BTC-USD-SWAP",
            "OKEX:BTC-USDC",
            "OKEX:BTC-USDC-SWAP",
            "OKEX:BTC-USDT",
            "OKEX:BTC-USDT-SWAP",
            "ORDERBOOK:AGGRPERP-BTCUSDLEVELS"
          ],
          "count": 12
        },
        {
          "label": "BTCUSD+AGGRSPOTBTCUSDLEVELS",
          "markets": [
            "BINANCE_FUTURES:btcusd_perp",
            "BINANCE_FUTURES:btcusdt",
            "BYBIT:BTCUSD",
            "BYBIT:BTCUSDC-SPOT",
            "BYBIT:BTCUSDT",
            "BYBIT:BTCUSDT-SPOT",
            "OKEX:BTC-USD-SWAP",
            "OKEX:BTC-USDC",
            "OKEX:BTC-USDC-SWAP",
            "OKEX:BTC-USDT",
            "OKEX:BTC-USDT-SWAP",
            "ORDERBOOK:AGGRSPOT-BTCUSDLEVELS"
          ],
          "count": 12
        },
        {
          "label": "BTCUSD+AGGRSPOTBTCUSDLEVELS",
          "markets": [
            "BINANCE_FUTURES:btcusd_perp",
            "BINANCE_FUTURES:btcusdt",
            "ORDERBOOK:AGGRSPOT-BTCUSDLEVELS"
          ],
          "count": 3
        },
        {
          "label": "BTCUSD+AGGRSPOTBTCUSDLEVELS",
          "markets": [
            "BINANCE:btcfdusd",
            "BINANCE:btcusdc",
            "BINANCE:btcusdt",
            "COINBASE:BTC-USD",
            "COINBASE:BTC-USDT",
            "ORDERBOOK:AGGRSPOT-BTCUSDLEVELS"
          ],
          "count": 6
        },
        {
          "label": "BTCUSD",
          "markets": [
            "BINANCE:btcfdusd",
            "BINANCE:btcusdc",
            "BINANCE:btcusdt",
            "COINBASE:BTC-USD",
            "COINBASE:BTC-USDT"
          ],
          "count": 5
        },
        {
          "label": "BTCUSD+BINANCEBTCUSDTLEVELS",
          "markets": [
            "BINANCE:btcusdt",
            "ORDERBOOK:BINANCE-BTCUSDTLEVELS"
          ],
          "count": 2
        },
        {
          "label": "BTCUSD+AGGRSPOTBTCUSDLEVELS+B...",
          "markets": [
            "BINANCE:btcusdt",
            "ORDERBOOK:AGGRSPOT-BTCUSDLEVELS",
            "ORDERBOOK:BINANCE-BTCUSDTLEVELS"
          ],
          "count": 3
        },
        {
          "label": "BINANCE:btcusdt",
          "markets": [
            "BINANCE:btcusdt"
          ],
          "count": 0
        }
      ],
      "searchExchanges": {
        "AGGR": false,
        "BINANCE": false,
        "BINANCE_FUTURES": false,
        "BINANCE_US": false,
        "BITFINEX": false,
        "BITGET": false,
        "BITMART": false,
        "BITMEX": false,
        "BITSTAMP": false,
        "BYBIT": false,
        "COINBASE": false,
        "CRYPTOCOM": false,
        "DERIBIT": false,
        "DYDX": false,
        "GATEIO": false,
        "HITBTC": false,
        "HUOBI": false,
        "KRAKEN": false,
        "KUCOIN": false,
        "MEXC": false,
        "OKEX": false,
        "ORDERBOOK": true,
        "PHEMEX": false,
        "POLONIEX": false,
        "UNISWAP": false
      },
      "timeframes": [
        {
          "label": "1s",
          "value": "1"
        },
        {
          "label": "3s",
          "value": "3"
        },
        {
          "label": "5s",
          "value": "5"
        },
        {
          "label": "10s",
          "value": "10"
        },
        {
          "label": "15s",
          "value": "15"
        },
        {
          "label": "30s",
          "value": "30"
        },
        {
          "label": "1m",
          "value": "60"
        },
        {
          "label": "3m",
          "value": "180"
        },
        {
          "label": "5m",
          "value": "300"
        },
        {
          "label": "15m",
          "value": "900"
        },
        {
          "label": "21m",
          "value": "1260"
        },
        {
          "label": "30m",
          "value": "1800"
        },
        {
          "label": "1h",
          "value": "3600"
        },
        {
          "label": "2h",
          "value": "7200"
        },
        {
          "label": "4h",
          "value": "14400"
        },
        {
          "label": "6h",
          "value": "21600"
        },
        {
          "label": "8h",
          "value": "28800"
        },
        {
          "label": "12h",
          "value": "43200"
        },
        {
          "label": "1d",
          "value": "86400"
        },
        {
          "label": "21 ticks",
          "value": "21t"
        },
        {
          "label": "50 ticks",
          "value": "50t"
        },
        {
          "label": "89 ticks",
          "value": "89t"
        },
        {
          "label": "100 ticks",
          "value": "100t"
        },
        {
          "label": "200 ticks",
          "value": "200t"
        },
        {
          "label": "610 ticks",
          "value": "610t"
        },
        {
          "label": "1000 ticks",
          "value": "1000t"
        },
        {
          "label": "1597 ticks",
          "value": "1597t"
        }
      ],
      "favoriteTimeframes": {},
      "normalizeWatermarks": true,
      "alerts": false,
      "alertsColor": "rgb(0,255,0)",
      "alertsLineStyle": 1,
      "alertsLineWidth": 1,
      "alertsClick": false,
      "alertSound": null,
      "showThresholdsAsTable": true,
      "indicatorDialogNavigation": "{\"optionsQuery\":\"\",\"editorOptions\":{},\"columnWidth\":0,\"tab\":\"script\"}"
    },
    "exchanges": {
      "AGGR": {
        "disabled": false
      },
      "BINANCE": {
        "disabled": false
      },
      "BINANCE_FUTURES": {
        "disabled": false
      },
      "BINANCE_US": {
        "disabled": true
      },
      "BITFINEX": {
        "disabled": true
      },
      "BITGET": {
        "disabled": true
      },
      "BITMART": {
        "disabled": true
      },
      "BITMEX": {
        "disabled": false
      },
      "BITSTAMP": {
        "disabled": true
      },
      "BYBIT": {
        "disabled": false
      },
      "COINBASE": {
        "disabled": false
      },
      "CRYPTOCOM": {
        "disabled": true
      },
      "DERIBIT": {
        "disabled": true
      },
      "DYDX": {
        "disabled": true
      },
      "GATEIO": {
        "disabled": true
      },
      "HITBTC": {
        "disabled": true
      },
      "HUOBI": {
        "disabled": true
      },
      "KRAKEN": {
        "disabled": true
      },
      "KUCOIN": {
        "disabled": true
      },
      "MEXC": {
        "disabled": true
      },
      "OKEX": {
        "disabled": false
      },
      "ORDERBOOK": {
        "disabled": false
      },
      "PHEMEX": {
        "disabled": true
      },
      "POLONIEX": {
        "disabled": true
      },
      "UNISWAP": {
        "disabled": true
      },
      "_id": "exchanges"
    },
    "chart copy 1": {
      "indicatorsErrors": {},
      "indicators": {
        "cvd": {
          "enabled": true,
          "name": "CVD",
          "description": "Cumulative Volume Delta",
          "script": "plotline(cum(vbuy - vsell), title=cvd)",
          "options": {
            "priceScaleId": "cvd",
            "priceFormat": {
              "type": "volume"
            },
            "color": "rgba(209,212,220,0.81)",
            "scaleMargins": {
              "top": 0.73,
              "bottom": 0.07
            },
            "visible": true,
            "lineWidth": 1,
            "priceLineStyle": 1,
            "lineStyle": 1
          },
          "id": "cvd",
          "createdAt": 1700269685372,
          "updatedAt": 1702412185043,
          "series": [
            "cvd"
          ],
          "unsavedChanges": false,
          "preview": {},
          "optionsDefinitions": {}
        },
        "liquidations": {
          "enabled": true,
          "name": "Liquidations",
          "description": "Liquidations by side",
          "script": "plothistogram(lbuy, color=options.upColor)\nplothistogram(-lsell, color=options.downColor)",
          "options": {
            "priceFormat": {
              "type": "volume"
            },
            "priceScaleId": "volume_liquidations",
            "upColor": "rgb(255,76,243)",
            "downColor": "rgb(255,183,77)",
            "scaleMargins": {
              "top": 0,
              "bottom": 0.96
            },
            "visible": false
          },
          "id": "liquidations",
          "createdAt": 1700269685372,
          "updatedAt": 1700815523685,
          "series": [
            "liquidations",
            "n51e34d4"
          ],
          "preview": {},
          "unsavedChanges": false,
          "optionsDefinitions": {}
        },
        "price": {
          "enabled": true,
          "name": "Price",
          "script": "src = { sources: { \"COINBASE:BTC-USD\":COINBASE:BTC-USD }, localTimestamp: time }\r\n\r\nvar ohlc = options.useHeikinAshi ? avg_heikinashi(src) : options.useGaps ? avg_ohlc_with_gaps(src) : avg_ohlc(src)\r\n\r\nplotcandlestick(ohlc, id=price)",
          "options": {
            "priceScaleId": "right",
            "priceFormat": {
              "auto": true,
              "precision": 1,
              "minMove": 0.1
            },
            "priceLineVisible": true,
            "lastValueVisible": true,
            "borderVisible": false,
            "upColor": "rgba(255,235,59,0.52)",
            "downColor": "rgba(242,54,69,0.64)",
            "borderUpColor": "rgba(255,245,157,0.66)",
            "borderDownColor": "rgba(178,40,51,0.52)",
            "wickUpColor": "rgb(223,211,144)",
            "wickDownColor": "rgba(239,67,82,0.47)",
            "useGaps": false,
            "useHeikinAshi": false,
            "scaleMargins": {
              "top": 0.3,
              "bottom": 0.32
            },
            "visible": true
          },
          "id": "price",
          "createdAt": 1700269685372,
          "updatedAt": 1702412161838,
          "series": [
            "price"
          ],
          "unsavedChanges": true,
          "preview": {},
          "optionsDefinitions": {}
        },
        "volume": {
          "enabled": true,
          "name": "Volume",
          "description": "Volume + delta",
          "script": "var _vbuy = source(vbuy, type=spot)\nvar _vsell = source(vsell, type=spot)\n\nif (upColor === 0) {\n  if (options.showDelta) {\n    upColor = options.upBgColor\n    downColor = options.downBgColor\n  } else {\n    upColor = options.upColor\n    downColor = options.downColor\n  }\n}\n\nif (options.showDelta) {\n  plothistogram({ time: time, value: Math.abs(_vbuy-_vsell), color: _vbuy - _vsell > 0 ? options.upColor : options.downColor})\n}\n\nplothistogram({ time: time, value: _vbuy + _vsell, color: _vbuy > _vsell ? upColor : downColor })",
          "options": {
            "priceScaleId": "volume",
            "priceFormat": {
              "type": "volume"
            },
            "upColor": "rgba(76,175,80,0.62)",
            "downColor": "rgba(242,54,69,0.71)",
            "scaleMargins": {
              "top": 0.87,
              "bottom": 0
            },
            "showDelta": true,
            "upBgColor": "rgba(178,181,190,0.33)",
            "downBgColor": "rgba(93,96,107,0.38)",
            "visible": true,
            "lastValueVisible": true,
            "color": "rgba(195,168,122,0.54)",
            "showDeltaOnly": true,
            "showBoth": true
          },
          "id": "volume",
          "createdAt": 1700269685372,
          "updatedAt": 1702530630403,
          "series": [
            "volume",
            "e19gatkp"
          ],
          "unsavedChanges": false,
          "preview": {},
          "displayName": "Volume",
          "optionsDefinitions": {}
        },
        "obv-spots copy 1": {
          "script": "if (markers === 0) {\r\n  // first script execution (0 is default values for all persistent variables)\r\n\r\n  // create a var to store already drawn markers\r\n  markers = []\r\n\r\n  // contain the last marker that can change as the bar update\r\n  repaintableMarker = null\r\n\r\n  // if candle body has a price percent change less than bodyPercentWatch, we start a refinement\r\n  bodyPercentWatch = options.bodyPercentWatch || 0.3\r\n\r\n  // if a wick is x times greater than the other, we might use it to refine change the side\r\n  wickRatioThreshold = options.wickRatioThreshold || 1.5\r\n\r\n  // paint a marker when OBV has been refined (changed of direction)\r\n  toggleDebug = options.toggleDebug || false\r\n\r\n  // when on, we calculate the wick percent difference and keep only that volume to add to OBV \r\n  toggleVolumeWick = options.toggleVolumeWick || false\r\n\r\n  togglePrintNormalObv = options.togglePrintNormalObv || false\r\n}\r\nif (repaintableMarker && repaintableMarker.time < time) {\r\n  // bar is +1 since active marker was added, lock it in the array\r\n  markers.push(repaintableMarker)\r\n\r\n  // free up active marker\r\n  repaintableMarker = null\r\n}\r\n\r\nvar newMarker = null\r\nvar _vbuy = source(vbuy, type=spot)\r\nvar _vsell = source(vsell, type=spot)\r\nvar _open = $price.open\r\nvar _high = $price.high\r\nvar _low = $price.low\r\nvar _close = $price.close\r\n\r\nvar sign = _close > _open ? 1 : -1\r\nvar volume = _vbuy + _vsell\r\n\r\nvar bodySize = Math.abs(_close - _open);\r\nvar priceChange = (_close - _open) / _open; // Percentage change\r\n\r\nif( togglePrintNormalObv ){\r\n    plotline(cum(sign * volume), title=\"Original\", color=options.originalObvColor)\r\n}\r\n\r\nvar improved = false\r\n\r\n// Check if price change is less than 0.4%\r\nif (Math.abs(priceChange) < bodyPercentWatch/100 ) {\r\n    var upperWickSize = _high - _close;\r\n    var lowerWickSize = _close - _low;\r\n\r\n    // Calculate the thresholds\r\n    var upperWickThreshold = wickRatioThreshold * lowerWickSize;\r\n    var lowerWickThreshold = wickRatioThreshold * upperWickSize;\r\n\r\n    // Check if upper and lower wicks have similar sizes\r\n    if (upperWickSize < upperWickThreshold && lowerWickSize < lowerWickThreshold) {\r\n        // Neutral move, don't add volume\r\n        sign = 0\r\n        improved = true\r\n    }else{\r\n        // Calculate the thresholds\r\n        var upperWickThreshold = wickRatioThreshold * lowerWickSize;\r\n        var lowerWickThreshold = wickRatioThreshold * upperWickSize;\r\n\r\n        // Determine the side based on wick sizes\r\n        // upper: 500, lower 100\r\n        if (upperWickSize > upperWickThreshold) {\r\n            improved = sign !== -1\r\n            // More selling happened, add volume as negative\r\n            sign = -1\r\n            if( toggleVolumeWick ) {\r\n                improved = true\r\n                var percentageDifference = ((upperWickSize - lowerWickSize) / upperWickSize);\r\n                volume = percentageDifference * volume\r\n            }\r\n        } else if (lowerWickSize > lowerWickThreshold) {\r\n            improved = sign !== 1\r\n            // More buying happened, add volume as positive\r\n            sign = 1\r\n            if( toggleVolumeWick ) {\r\n                improved = true\r\n                var percentageDifference = ((lowerWickSize - upperWickSize) / lowerWickSize);\r\n                volume = percentageDifference * volume\r\n            }\r\n        }\r\n    }\r\n\r\n    if( improved && toggleDebug){\r\n        if (sign == -1) {\r\n            // newMarker is a temporary variable (not included in the indicator state)\r\n            // to avoid it being treated as persistent variable we wrap it inside parenthesis\r\n            (newMarker) = {\r\n                time: time,\r\n                position: 'aboveBar',\r\n                color: 'red',\r\n                shape: 'arrowDown'\r\n            }\r\n        }\r\n\r\n        if (sign == 1) {\r\n            (newMarker) = {\r\n                time: time,\r\n                position: 'belowBar',\r\n                color: 'lime',\r\n                shape: 'arrowUp'\r\n            }\r\n        } \r\n    }\r\n}\r\n\r\n\r\nif (newMarker || (repaintableMarker && !newMarker)) {\r\n  // override persistent variable repaintable marker\r\n  repaintableMarker = newMarker\r\n  \r\n  var index = togglePrintNormalObv ? 1 : 0\r\n\r\n  if (series[index].setMarkers) {\r\n    series[index].setMarkers(markers.concat(repaintableMarker))\r\n  }\r\n}\r\n\r\nvar obv = cum(sign * volume)\r\nplotline(obv, title=\"S\", color=options.refinedObvColor)",
          "id": "obv-spots copy 1",
          "name": "OBV spots",
          "options": {
            "priceScaleId": "obv-copy-1",
            "visible": true,
            "scaleMargins": {
              "top": 0.73,
              "bottom": 0.07
            },
            "lineStyle": 1,
            "color": "rgba(255,235,59,0.81)",
            "bodyPercentWatch": 0.3,
            "wickDiffPercent": 90,
            "debug": null,
            "toggleDebug": true,
            "toggleVolumeWick": true,
            "wickRatioThreshold": 1.5,
            "togglePrintNormalObv": false,
            "originalObvColor": "rgb(178,181,190)",
            "refinedObvColor": "rgb(41,98,255)"
          },
          "description": null,
          "createdAt": 1701126053261,
          "updatedAt": 1701126059594,
          "unsavedChanges": true,
          "optionsDefinitions": {},
          "series": [
            "obv-spots copy 1",
            "tj4atraj"
          ],
          "displayName": "OBV spots"
        },
        "orderbook-overlays-coinbase": {
          "script": "if (!pendingMarkers) {\r\n    // runs only once\r\n    pendingMarkers = []\r\n    spotColor = options.spotColor.match(/\\(([\\d.]+),([\\d.]+),([\\d.]+),?([\\d.]+)?\\)$/).slice(1,5).map(a => +a)\r\n    perpColor = options.perpColor.match(/\\(([\\d.]+),([\\d.]+),([\\d.]+),?([\\d.]+)?\\)$/).slice(1,5).map(a => +a)\r\n    binanceColor = options.binanceColor.match(/\\(([\\d.]+),([\\d.]+),([\\d.]+),?([\\d.]+)?\\)$/).slice(1,5).map(a => +a)\r\n    coinbaseColor = options.coinbaseColor.match(/\\(([\\d.]+),([\\d.]+),([\\d.]+),?([\\d.]+)?\\)$/).slice(1,5).map(a => +a)\r\n    bitmexColor = options.bitmexColor.match(/\\(([\\d.]+),([\\d.]+),([\\d.]+),?([\\d.]+)?\\)$/).slice(1, 5).map(a => +a);\r\n\r\n    //allOnColor = options.allOnColor.match(/\\(([\\d.]+),([\\d.]+),([\\d.]+),?([\\d.]+)?\\)$/).slice(1,5).map(a => +a)\r\n\r\n    spotOpacity = spotColor.pop()\r\n    perpOpacity = perpColor.pop()\r\n    binanceOpacity = binanceColor.pop()\r\n    coinbaseOpacity = coinbaseColor.pop()\r\n    bitmexOpacity = bitmexColor.pop()\r\n   // allOnColorOpacity = allOnColor.pop()\r\n\r\n    startOpacity = options.startOpacity || 0.1\r\n  \r\n    spotBuyAlerts  = [40, 63, 46, 60]\r\n    spotSellAlerts = [-40, -63, -46, -60]\r\n\r\n    perpBuyAlerts  = [38, 27, 36, 35]\r\n    perpSellAlerts = [-20, -27, -36, -35]\r\n\r\n    binanceBuyAlerts  = [70, 70, 70, 70]\r\n    binanceSellAlerts = [-70, -70, -70, -70]\r\n\r\n    coinbaseBuyAlerts  = [50, 50, 50, 50]\r\n    coinbaseSellAlerts = [-50, -70, -65, -50]\r\n\r\n    bitmexBuyAlerts  = [-50, -60, -50, -50]\r\n    bitmexSellAlerts = [-50, -60, -50, -50]\r\n\r\n    alerts = {\r\n      spot: {\r\n        buy: spotBuyAlerts,\r\n        sell: spotSellAlerts\r\n      },\r\n      perp: {\r\n        buy: perpBuyAlerts,\r\n        sell: perpSellAlerts\r\n      },\r\n      binance: {\r\n        buy: binanceBuyAlerts,\r\n        sell: binanceSellAlerts\r\n      },\r\n      coinbase: {\r\n        buy: coinbaseBuyAlerts,\r\n        sell: coinbaseSellAlerts\r\n      },\r\n        bitmex: {\r\n            buy: bitmexBuyAlerts,\r\n            sell: bitmexSellAlerts\r\n        }\r\n    }\r\n\r\n    whichColors = {\r\n      spot: spotColor,\r\n      perp: perpColor,\r\n      binance: binanceColor,\r\n      coinbase: coinbaseColor,\r\n      bitmex: bitmexColor\r\n    }\r\n\r\n    allOnIndicator = options.toggleAllOnIndicator || false,\r\n\r\n    showType = {\r\n      spot: options.toggleSpot,\r\n      perp: options.togglePerp,\r\n      binance: options.toggleBinance,\r\n      coinbase: options.toggleCoinbase,\r\n      bitmex: options.toggleBitmex\r\n    }\r\n\r\n    showBand = [\r\n        options.toggleBand1 || false,\r\n        options.toggleBand2 || false,\r\n        options.toggleBand3 || false,\r\n        options.toggleBand4 || false,\r\n    ]\r\n\r\n    lowerPercent = [options.band0lowerPercent || 0.11, 1, 2.5, 5]\r\n    upperPercent = [1, 2.5, 5, 10]  \r\n\r\n  }\r\n  // </STARTUP SCRIPT> \r\n\r\n  var ratiosPerp = ORDERBOOK:AGGRPERP-BTCUSD.zratios\r\n  var ratiosSpot = ORDERBOOK:AGGRSPOT-BTCUSD.zratios \r\n  var ratiosBinance = renderer.sources['ORDERBOOK:BINANCE-BTCUSDTLEVELS'] && renderer.sources['ORDERBOOK:BINANCE-BTCUSDTLEVELS'].zratios\r\n  var ratiosCoinbase = renderer.sources['ORDERBOOK:COINBASE-BTCUSD'] && renderer.sources['ORDERBOOK:COINBASE-BTCUSD'].zratios \r\n  var ratiosBitmex = renderer.sources['ORDERBOOK:BITMEX-XBTUSDLEVELS'] && renderer.sources['ORDERBOOK:BITMEX-XBTUSDLEVELS'].zratios\r\n\r\n  var m = [\r\n      { which: 'perp', ratios: ratiosPerp || [], bands: [] },\r\n      { which: 'spot', ratios: ratiosSpot || [], bands: [] },\r\n      { which: 'binance', ratios: ratiosBinance || [], bands: [] },\r\n      { which: 'coinbase', ratios: ratiosCoinbase || [], bands: [] },\r\n      { which: 'bitmex', ratios: ratiosBitmex || [], bands: [] }\r\n  ];\r\n  \r\n  /*var ratiosPerp = ORDERBOOK:AGGRPERP-BTCUSD.zratios\r\n  var ratiosSpot = ORDERBOOK:AGGRSPOT-BTCUSD.zratios \r\n  var ratiosBinance = renderer.sources['ORDERBOOK:BINANCE-BTCUSDTLEVELS'].zratios\r\n  var ratiosCoinbase = renderer.sources['ORDERBOOK:COINBASE-BTCUSD'].zratios \r\n\r\n  var perps = []\r\n  var spots = []\r\n  var binance = []\r\n  var coinbase = []\r\n*/\r\n  //var ratio = 0\r\n\r\n  // for each ratio\r\n  for(let ratioIndex = 0; ratioIndex < 4; ratioIndex++){\r\n\r\n    // TODO must be same direction\r\n    var allOn = true;\r\n\r\n    // for each type (perp, spot, binance, ...)\r\n    for(let typeIndex = 0; typeIndex < m.length; typeIndex++){\r\n\r\n      var c = m[typeIndex]\r\n\r\n      if( showBand[ratioIndex] === false || showType[c.which]  === false ){\r\n        c.bands.push([0, 0, '']) \r\n        continue\r\n      }\r\n        \r\n      /*\r\n      var ratioPerp = ratiosPerp && ratiosPerp.length > ratioIndex && ratiosPerp[ratioIndex]\r\n      var ratioSpot =  ratiosSpot && ratiosSpot.length > ratioIndex && ratiosSpot[ratioIndex]\r\n      var ratioBinance =  ratiosBinance && ratiosBinance.length > ratioIndex && ratiosBinance[ratioIndex]\r\n      var ratioCoinbase =  ratiosCoinbase && ratiosCoinbase.length > ratioIndex && ratiosCoinbase[ratioIndex]\r\n      */\r\n      var ratio = c.ratios.length && c.ratios[ratioIndex]\r\n      var direction = Math.sign(ratio)\r\n      var buyAlert = alerts[c.which]['buy'][ratioIndex]\r\n      var sellAlert = alerts[c.which]['sell'][ratioIndex]\r\n      var threshold = direction > 0 ? buyAlert : sellAlert\r\n      var thresholdAbs = Math.abs(threshold)\r\n    \r\n      var lower = $price.close + -1 * direction * (($price.close  * lowerPercent[ratioIndex]) / 100)  \r\n      var upper = $price.close + -1 * direction * (($price.close  * upperPercent[ratioIndex]) / 100)\r\n\r\n      if( !ratio || Math.abs(ratio) < thresholdAbs ){\r\n          allOn = false\r\n          c.bands.push([0, 0, '']) \r\n      }else{\r\n\r\n          var alphaRatio = Math.abs(ratio) < thresholdAbs ? 0 : startOpacity + (1 - startOpacity) * ((Math.abs(ratio) - thresholdAbs) / (100 - thresholdAbs))\r\n          var alphaRatioRounded = Math.round(alphaRatio * 100) / 100 \r\n          var colorRatio = 'rgba(' + whichColors[c.which].join(',') + ',' + alphaRatioRounded + ')'\r\n          \r\n          c.bands.push([lower, upper, colorRatio])\r\n      }\r\n      \r\n    }// end for each type\r\n\r\n    if( allOnIndicator && allOn ){\r\n      for(let typeIndex = 0; typeIndex < 4; typeIndex++){\r\n        var c = m[typeIndex]\r\n        c.bands[ratioIndex] = [lower, upper, options.allOnColor]\r\n      }\r\n    }\r\n\r\n  } // end for each ratios\r\n\r\n\r\nvar i = 0\r\n\r\nfor(let ratioIndex = 0; ratioIndex < 4; ratioIndex++){\r\n\r\n    if( showBand[ratioIndex] === false ){\r\n      i = i + m.length\r\n      continue\r\n    }\r\n\r\n    for(let typeIndex = 0; typeIndex < m.length; typeIndex++){\r\n\r\n       var c = m[typeIndex]\r\n    \r\n       if( c.bands.length && c.bands[ratioIndex][0] !== 0 ) {\r\n         renderer.indicators[indicatorId].series[i] = {\r\n          time: time, \r\n          lowerValue: c.bands[ratioIndex][0],\r\n          higherValue: c.bands[ratioIndex][1],\r\n          color:  c.bands[ratioIndex][2]\r\n        }\r\n      }\r\n\r\n      i++\r\n    }\r\n}\r\n\r\n\r\n\r\nreturn\r\n//perp\r\nbrokenarea({\r\n        time: time, \r\n        lowerValue: 0,\r\n        higherValue: 0,\r\n        color:  options.color\r\n      })\r\nbrokenarea({\r\n        time: time, \r\n        lowerValue: 0,\r\n        higherValue: 0,\r\n        color:  options.color\r\n      })\r\nbrokenarea({\r\n        time: time, \r\n        lowerValue: 0,\r\n        higherValue: 0,\r\n        color:  options.color\r\n      })\r\nbrokenarea({\r\n        time: time, \r\n        lowerValue: 0,\r\n        higherValue: 0,\r\n        color:  options.color\r\n      })     \r\n      brokenarea({\r\n        time: time, \r\n        lowerValue: 0,\r\n        higherValue: 0,\r\n        color:  options.color\r\n      })\r\nbrokenarea({\r\n        time: time, \r\n        lowerValue: 0,\r\n        higherValue: 0,\r\n        color:  options.color\r\n      })\r\nbrokenarea({\r\n        time: time, \r\n        lowerValue: 0,\r\n        higherValue: 0,\r\n        color:  options.color\r\n      })\r\nbrokenarea({\r\n        time: time, \r\n        lowerValue: 0,\r\n        higherValue: 0,\r\n        color:  options.color\r\n      })   \r\n      brokenarea({\r\n        time: time, \r\n        lowerValue: 0,\r\n        higherValue: 0,\r\n        color:  options.color\r\n      })\r\nbrokenarea({\r\n        time: time, \r\n        lowerValue: 0,\r\n        higherValue: 0,\r\n        color:  options.color\r\n      })\r\nbrokenarea({\r\n        time: time, \r\n        lowerValue: 0,\r\n        higherValue: 0,\r\n        color:  options.color\r\n      })\r\nbrokenarea({\r\n        time: time, \r\n        lowerValue: 0,\r\n        higherValue: 0,\r\n        color:  options.color\r\n      })   \r\n      brokenarea({\r\n        time: time, \r\n        lowerValue: 0,\r\n        higherValue: 0,\r\n        color:  options.color\r\n      })\r\nbrokenarea({\r\n        time: time, \r\n        lowerValue: 0,\r\n        higherValue: 0,\r\n        color:  options.color\r\n      })\r\nbrokenarea({\r\n        time: time, \r\n        lowerValue: 0,\r\n        higherValue: 0,\r\n        color:  options.color\r\n      })\r\nbrokenarea({\r\n        time: time, \r\n        lowerValue: 0,\r\n        higherValue: 0,\r\n        color:  options.color\r\n      })\r\n            brokenarea({\r\n        time: time, \r\n        lowerValue: 0,\r\n        higherValue: 0,\r\n        color:  options.color\r\n      })\r\nbrokenarea({\r\n        time: time, \r\n        lowerValue: 0,\r\n        higherValue: 0,\r\n        color:  options.color\r\n      })\r\nbrokenarea({\r\n        time: time, \r\n        lowerValue: 0,\r\n        higherValue: 0,\r\n        color:  options.color\r\n      })\r\nbrokenarea({\r\n        time: time, \r\n        lowerValue: 0,\r\n        higherValue: 0,\r\n        color:  options.color\r\n      })",
          "id": "orderbook-overlays-coinbase",
          "name": "Orderbook Overlays Coinbase",
          "options": {
            "priceScaleId": "right",
            "startOpacity": null,
            "allOnColor": "rgb(242,54,69)",
            "binanceColor": "rgb(255,255,255)",
            "perpColor": "rgb(41,98,255)",
            "spotColor": "rgb(255,235,59)",
            "scaleMargins": {
              "top": 0.3,
              "bottom": 0.32
            },
            "coinbaseColor": "rgb(247,124,128)",
            "visible": true,
            "priceFormat": {
              "type": "price",
              "precision": 1,
              "minMove": 0.1,
              "auto": true
            },
            "toggleSpot": false,
            "togglePerp": false,
            "toggleBinance": false,
            "toggleCoinbase": true,
            "toggleAllOnIndicator": null,
            "toggleBitmex": true,
            "bitmexColor": "rgb(206,147,216)",
            "toggleBand1": true,
            "toggleBand2": true,
            "toggleBand3": true,
            "toggleBand4": true,
            "band0lowerPercent": null
          },
          "description": null,
          "unsavedChanges": true,
          "optionsDefinitions": {},
          "series": [
            "orderbook-overlays-coinbase",
            "etc2ujqi",
            "8pklv6z6",
            "vmobfbqm",
            "nir4ex1y",
            "4stqbmg0",
            "uqccq3vp",
            "n8uvv4nb",
            "1qn2lu70",
            "tlsfexv4",
            "y4htjvxe",
            "3opbhd1a",
            "beiemqzy",
            "4zc5lvy6",
            "lrb5mzy8",
            "hliyupzl",
            "t40za38o",
            "ifk68jch",
            "qc36etth",
            "1xeno5et"
          ],
          "displayName": "Orderbook Overlays Coinbase"
        }
      },
      "indicatorOrder": [
        "cvd",
        "liquidations",
        "price",
        "volume",
        "obv-spots copy 1",
        "orderbook-overlays-coinbase"
      ],
      "priceScales": {
        "right": {
          "scaleMargins": {
            "top": 0.3,
            "bottom": 0.32
          },
          "priceFormat": {
            "precision": 1,
            "minMove": 0.1
          },
          "indicators": [
            "Price"
          ]
        },
        "cvd": {
          "scaleMargins": {
            "top": 0.73,
            "bottom": 0.07
          },
          "indicators": [
            "CVD"
          ]
        },
        "volume_liquidations": {
          "scaleMargins": {
            "top": 0,
            "bottom": 0.96
          }
        },
        "volume": {
          "scaleMargins": {
            "top": 0.87,
            "bottom": 0
          },
          "indicators": [
            "Volume"
          ]
        },
        "obv-copy-1": {
          "scaleMargins": {
            "top": 0.73,
            "bottom": 0.07
          },
          "indicators": [
            "OBV spots"
          ]
        }
      },
      "layouting": false,
      "showIndicators": true,
      "timeframe": "900",
      "refreshRate": 10000,
      "showAlerts": true,
      "showAlertsLabel": true,
      "showLegend": false,
      "fillGapsWithEmpty": true,
      "showHorizontalGridlines": false,
      "horizontalGridlinesColor": "rgba(255,255,255,.1)",
      "showVerticalGridlines": false,
      "verticalGridlinesColor": "rgba(255,255,255,.1)",
      "showWatermark": true,
      "watermarkColor": "rgba(255,255,255,.1)",
      "showBorder": true,
      "borderColor": null,
      "showLeftScale": false,
      "showRightScale": true,
      "showTimeScale": true,
      "hiddenMarkets": {},
      "barSpacing": 4.105501065929656,
      "_id": "chart copy 1"
    },
    "chart copy 2": {
      "indicatorsErrors": {},
      "indicators": {
        "cvd": {
          "enabled": true,
          "name": "CVD",
          "description": "Cumulative Volume Delta",
          "script": "plotline(cum(vbuy - vsell), title=cvd)",
          "options": {
            "priceScaleId": "cvd",
            "priceFormat": {
              "type": "volume"
            },
            "color": "rgba(209,212,220,0.81)",
            "scaleMargins": {
              "top": 0.73,
              "bottom": 0.07
            },
            "visible": true,
            "lineWidth": 1,
            "priceLineStyle": 1,
            "lineStyle": 1
          },
          "id": "cvd",
          "createdAt": 1700269685372,
          "updatedAt": 1702412185043,
          "series": [
            "cvd"
          ],
          "unsavedChanges": true,
          "preview": {},
          "optionsDefinitions": {}
        },
        "liquidations": {
          "enabled": true,
          "name": "Liquidations",
          "description": "Liquidations by side",
          "script": "plothistogram(lbuy, color=options.upColor)\nplothistogram(-lsell, color=options.downColor)",
          "options": {
            "priceFormat": {
              "type": "volume"
            },
            "priceScaleId": "volume_liquidations",
            "upColor": "rgb(255,76,243)",
            "downColor": "rgb(255,183,77)",
            "scaleMargins": {
              "top": 0,
              "bottom": 0.96
            },
            "visible": false
          },
          "id": "liquidations",
          "createdAt": 1700269685372,
          "updatedAt": 1700815523685,
          "series": [
            "liquidations",
            "n51e34d4"
          ],
          "preview": {},
          "unsavedChanges": false,
          "optionsDefinitions": {}
        },
        "price": {
          "enabled": true,
          "name": "Price",
          "script": "src = { sources: { \"BINANCE:btcusdt\":BINANCE:btcusdt }, localTimestamp: time }\r\n\r\nvar ohlc = options.useHeikinAshi ? avg_heikinashi(src) : options.useGaps ? avg_ohlc_with_gaps(src) : avg_ohlc(src)\r\n\r\nplotcandlestick(ohlc, id=price)",
          "options": {
            "priceScaleId": "right",
            "priceFormat": {
              "auto": true,
              "precision": 1,
              "minMove": 0.1
            },
            "priceLineVisible": true,
            "lastValueVisible": true,
            "borderVisible": false,
            "upColor": "rgba(255,235,59,0.52)",
            "downColor": "rgba(242,54,69,0.64)",
            "borderUpColor": "rgba(255,245,157,0.66)",
            "borderDownColor": "rgba(178,40,51,0.52)",
            "wickUpColor": "rgb(223,211,144)",
            "wickDownColor": "rgba(239,67,82,0.47)",
            "useGaps": false,
            "useHeikinAshi": false,
            "scaleMargins": {
              "top": 0.29,
              "bottom": 0.34
            },
            "visible": true
          },
          "id": "price",
          "createdAt": 1700269685372,
          "updatedAt": 1702412161838,
          "series": [
            "price"
          ],
          "unsavedChanges": true,
          "preview": {},
          "optionsDefinitions": {}
        },
        "volume": {
          "enabled": true,
          "name": "Volume",
          "description": "Volume + delta",
          "script": "var _vbuy = source(vbuy, type=spot)\nvar _vsell = source(vsell, type=spot)\n\nif (upColor === 0) {\n  if (options.showDelta) {\n    upColor = options.upBgColor\n    downColor = options.downBgColor\n  } else {\n    upColor = options.upColor\n    downColor = options.downColor\n  }\n}\n\nif (options.showDelta) {\n  plothistogram({ time: time, value: Math.abs(_vbuy-_vsell), color: _vbuy - _vsell > 0 ? options.upColor : options.downColor})\n}\n\nplothistogram({ time: time, value: _vbuy + _vsell, color: _vbuy > _vsell ? upColor : downColor })",
          "options": {
            "priceScaleId": "volume",
            "priceFormat": {
              "type": "volume"
            },
            "upColor": "rgba(76,175,80,0.62)",
            "downColor": "rgba(242,54,69,0.71)",
            "scaleMargins": {
              "top": 0.87,
              "bottom": 0
            },
            "showDelta": true,
            "upBgColor": "rgba(178,181,190,0.33)",
            "downBgColor": "rgba(93,96,107,0.38)",
            "visible": true,
            "lastValueVisible": true,
            "color": "rgba(195,168,122,0.54)",
            "showDeltaOnly": true,
            "showBoth": true
          },
          "id": "volume",
          "createdAt": 1700269685372,
          "updatedAt": 1702530630403,
          "series": [
            "volume",
            "uecv8arj"
          ],
          "unsavedChanges": false,
          "preview": {},
          "displayName": "Volume",
          "optionsDefinitions": {}
        },
        "obv-spots copy 1": {
          "script": "if (markers === 0) {\r\n  // first script execution (0 is default values for all persistent variables)\r\n\r\n  // create a var to store already drawn markers\r\n  markers = []\r\n\r\n  // contain the last marker that can change as the bar update\r\n  repaintableMarker = null\r\n\r\n  // if candle body has a price percent change less than bodyPercentWatch, we start a refinement\r\n  bodyPercentWatch = options.bodyPercentWatch || 0.3\r\n\r\n  // if a wick is x times greater than the other, we might use it to refine change the side\r\n  wickRatioThreshold = options.wickRatioThreshold || 1.5\r\n\r\n  // paint a marker when OBV has been refined (changed of direction)\r\n  toggleDebug = options.toggleDebug || false\r\n\r\n  // when on, we calculate the wick percent difference and keep only that volume to add to OBV \r\n  toggleVolumeWick = options.toggleVolumeWick || false\r\n\r\n  togglePrintNormalObv = options.togglePrintNormalObv || false\r\n}\r\nif (repaintableMarker && repaintableMarker.time < time) {\r\n  // bar is +1 since active marker was added, lock it in the array\r\n  markers.push(repaintableMarker)\r\n\r\n  // free up active marker\r\n  repaintableMarker = null\r\n}\r\n\r\nvar newMarker = null\r\nvar _vbuy = source(vbuy, type=spot)\r\nvar _vsell = source(vsell, type=spot)\r\nvar _open = $price.open\r\nvar _high = $price.high\r\nvar _low = $price.low\r\nvar _close = $price.close\r\n\r\nvar sign = _close > _open ? 1 : -1\r\nvar volume = _vbuy + _vsell\r\n\r\nvar bodySize = Math.abs(_close - _open);\r\nvar priceChange = (_close - _open) / _open; // Percentage change\r\n\r\nif( togglePrintNormalObv ){\r\n    plotline(cum(sign * volume), title=\"Original\", color=options.originalObvColor)\r\n}\r\n\r\nvar improved = false\r\n\r\n// Check if price change is less than 0.4%\r\nif (Math.abs(priceChange) < bodyPercentWatch/100 ) {\r\n    var upperWickSize = _high - _close;\r\n    var lowerWickSize = _close - _low;\r\n\r\n    // Calculate the thresholds\r\n    var upperWickThreshold = wickRatioThreshold * lowerWickSize;\r\n    var lowerWickThreshold = wickRatioThreshold * upperWickSize;\r\n\r\n    // Check if upper and lower wicks have similar sizes\r\n    if (upperWickSize < upperWickThreshold && lowerWickSize < lowerWickThreshold) {\r\n        // Neutral move, don't add volume\r\n        sign = 0\r\n        improved = true\r\n    }else{\r\n        // Calculate the thresholds\r\n        var upperWickThreshold = wickRatioThreshold * lowerWickSize;\r\n        var lowerWickThreshold = wickRatioThreshold * upperWickSize;\r\n\r\n        // Determine the side based on wick sizes\r\n        // upper: 500, lower 100\r\n        if (upperWickSize > upperWickThreshold) {\r\n            improved = sign !== -1\r\n            // More selling happened, add volume as negative\r\n            sign = -1\r\n            if( toggleVolumeWick ) {\r\n                improved = true\r\n                var percentageDifference = ((upperWickSize - lowerWickSize) / upperWickSize);\r\n                volume = percentageDifference * volume\r\n            }\r\n        } else if (lowerWickSize > lowerWickThreshold) {\r\n            improved = sign !== 1\r\n            // More buying happened, add volume as positive\r\n            sign = 1\r\n            if( toggleVolumeWick ) {\r\n                improved = true\r\n                var percentageDifference = ((lowerWickSize - upperWickSize) / lowerWickSize);\r\n                volume = percentageDifference * volume\r\n            }\r\n        }\r\n    }\r\n\r\n    if( improved && toggleDebug){\r\n        if (sign == -1) {\r\n            // newMarker is a temporary variable (not included in the indicator state)\r\n            // to avoid it being treated as persistent variable we wrap it inside parenthesis\r\n            (newMarker) = {\r\n                time: time,\r\n                position: 'aboveBar',\r\n                color: 'red',\r\n                shape: 'arrowDown'\r\n            }\r\n        }\r\n\r\n        if (sign == 1) {\r\n            (newMarker) = {\r\n                time: time,\r\n                position: 'belowBar',\r\n                color: 'lime',\r\n                shape: 'arrowUp'\r\n            }\r\n        } \r\n    }\r\n}\r\n\r\n\r\nif (newMarker || (repaintableMarker && !newMarker)) {\r\n  // override persistent variable repaintable marker\r\n  repaintableMarker = newMarker\r\n  \r\n  var index = togglePrintNormalObv ? 1 : 0\r\n\r\n  if (series[index].setMarkers) {\r\n    series[index].setMarkers(markers.concat(repaintableMarker))\r\n  }\r\n}\r\n\r\nvar obv = cum(sign * volume)\r\nplotline(obv, title=\"S\", color=options.refinedObvColor)",
          "id": "obv-spots copy 1",
          "name": "OBV spots",
          "options": {
            "priceScaleId": "obv-copy-1",
            "visible": true,
            "scaleMargins": {
              "top": 0.73,
              "bottom": 0.07
            },
            "lineStyle": 1,
            "color": "rgba(255,235,59,0.81)",
            "bodyPercentWatch": 0.3,
            "wickDiffPercent": 90,
            "debug": null,
            "toggleDebug": true,
            "toggleVolumeWick": true,
            "wickRatioThreshold": 1.5,
            "togglePrintNormalObv": false,
            "originalObvColor": "rgb(178,181,190)",
            "refinedObvColor": "rgb(41,98,255)"
          },
          "description": null,
          "createdAt": 1701126053261,
          "updatedAt": 1701126059594,
          "unsavedChanges": true,
          "optionsDefinitions": {},
          "series": [
            "obv-spots copy 1",
            "ran6p6x7"
          ],
          "displayName": "OBV spots"
        },
        "orderbook-overlays-spot": {
          "script": "if (!pendingMarkers) {\r\n    // runs only once\r\n    pendingMarkers = []\r\n    spotColor = options.spotColor.match(/\\(([\\d.]+),([\\d.]+),([\\d.]+),?([\\d.]+)?\\)$/).slice(1,5).map(a => +a)\r\n    perpColor = options.perpColor.match(/\\(([\\d.]+),([\\d.]+),([\\d.]+),?([\\d.]+)?\\)$/).slice(1,5).map(a => +a)\r\n    binanceColor = options.binanceColor.match(/\\(([\\d.]+),([\\d.]+),([\\d.]+),?([\\d.]+)?\\)$/).slice(1,5).map(a => +a)\r\n    coinbaseColor = options.coinbaseColor.match(/\\(([\\d.]+),([\\d.]+),([\\d.]+),?([\\d.]+)?\\)$/).slice(1,5).map(a => +a)\r\n    bitmexColor = options.bitmexColor.match(/\\(([\\d.]+),([\\d.]+),([\\d.]+),?([\\d.]+)?\\)$/).slice(1, 5).map(a => +a);\r\n\r\n    //allOnColor = options.allOnColor.match(/\\(([\\d.]+),([\\d.]+),([\\d.]+),?([\\d.]+)?\\)$/).slice(1,5).map(a => +a)\r\n\r\n    spotOpacity = spotColor.pop()\r\n    perpOpacity = perpColor.pop()\r\n    binanceOpacity = binanceColor.pop()\r\n    coinbaseOpacity = coinbaseColor.pop()\r\n    bitmexOpacity = bitmexColor.pop()\r\n   // allOnColorOpacity = allOnColor.pop()\r\n\r\n    startOpacity = options.startOpacity || 0.1\r\n  \r\n    spotBuyAlerts  = [40, 63, 46, 60]\r\n    spotSellAlerts = [-40, -63, -46, -60]\r\n\r\n    perpBuyAlerts  = [38, 27, 36, 35]\r\n    perpSellAlerts = [-20, -27, -36, -35]\r\n\r\n    binanceBuyAlerts  = [70, 70, 70, 70]\r\n    binanceSellAlerts = [-70, -70, -70, -70]\r\n\r\n    coinbaseBuyAlerts  = [50, 50, 50, 50]\r\n    coinbaseSellAlerts = [-50, -70, -65, -50]\r\n\r\n    bitmexBuyAlerts  = [-50, -60, -50, -50]\r\n    bitmexSellAlerts = [-50, -60, -50, -50]\r\n\r\n    alerts = {\r\n      spot: {\r\n        buy: spotBuyAlerts,\r\n        sell: spotSellAlerts\r\n      },\r\n      perp: {\r\n        buy: perpBuyAlerts,\r\n        sell: perpSellAlerts\r\n      },\r\n      binance: {\r\n        buy: binanceBuyAlerts,\r\n        sell: binanceSellAlerts\r\n      },\r\n      coinbase: {\r\n        buy: coinbaseBuyAlerts,\r\n        sell: coinbaseSellAlerts\r\n      },\r\n        bitmex: {\r\n            buy: bitmexBuyAlerts,\r\n            sell: bitmexSellAlerts\r\n        }\r\n    }\r\n\r\n    whichColors = {\r\n      spot: spotColor,\r\n      perp: perpColor,\r\n      binance: binanceColor,\r\n      coinbase: coinbaseColor,\r\n      bitmex: bitmexColor\r\n    }\r\n\r\n    allOnIndicator = options.toggleAllOnIndicator || false,\r\n\r\n    showType = {\r\n      spot: options.toggleSpot,\r\n      perp: options.togglePerp,\r\n      binance: options.toggleBinance,\r\n      coinbase: options.toggleCoinbase,\r\n      bitmex: options.toggleBitmex\r\n    }\r\n\r\n    showBand = [\r\n        options.toggleBand1 || false,\r\n        options.toggleBand2 || false,\r\n        options.toggleBand3 || false,\r\n        options.toggleBand4 || false,\r\n    ]\r\n\r\n    lowerPercent = [options.band0lowerPercent || 0.11, 1, 2.5, 5]\r\n    upperPercent = [1, 2.5, 5, 10]  \r\n\r\n  }\r\n  // </STARTUP SCRIPT> \r\n\r\n  var ratiosPerp = ORDERBOOK:AGGRPERP-BTCUSD.zratios\r\n  var ratiosSpot = ORDERBOOK:AGGRSPOT-BTCUSD.zratios \r\n  var ratiosBinance = renderer.sources['ORDERBOOK:BINANCE-BTCUSDTLEVELS'] && renderer.sources['ORDERBOOK:BINANCE-BTCUSDTLEVELS'].zratios\r\n  var ratiosCoinbase = renderer.sources['ORDERBOOK:COINBASE-BTCUSD'] && renderer.sources['ORDERBOOK:COINBASE-BTCUSD'].zratios \r\n  var ratiosBitmex = renderer.sources['ORDERBOOK:BITMEX-XBTUSDLEVELS'] && renderer.sources['ORDERBOOK:BITMEX-XBTUSDLEVELS'].zratios\r\n\r\n  var m = [\r\n      { which: 'perp', ratios: ratiosPerp || [], bands: [] },\r\n      { which: 'spot', ratios: ratiosSpot || [], bands: [] },\r\n      { which: 'binance', ratios: ratiosBinance || [], bands: [] },\r\n      { which: 'coinbase', ratios: ratiosCoinbase || [], bands: [] },\r\n      { which: 'bitmex', ratios: ratiosBitmex || [], bands: [] }\r\n  ];\r\n  \r\n  /*var ratiosPerp = ORDERBOOK:AGGRPERP-BTCUSD.zratios\r\n  var ratiosSpot = ORDERBOOK:AGGRSPOT-BTCUSD.zratios \r\n  var ratiosBinance = renderer.sources['ORDERBOOK:BINANCE-BTCUSDTLEVELS'].zratios\r\n  var ratiosCoinbase = renderer.sources['ORDERBOOK:COINBASE-BTCUSD'].zratios \r\n\r\n  var perps = []\r\n  var spots = []\r\n  var binance = []\r\n  var coinbase = []\r\n*/\r\n  //var ratio = 0\r\n\r\n  // for each ratio\r\n  for(let ratioIndex = 0; ratioIndex < 4; ratioIndex++){\r\n\r\n    // TODO must be same direction\r\n    var allOn = true;\r\n\r\n    // for each type (perp, spot, binance, ...)\r\n    for(let typeIndex = 0; typeIndex < m.length; typeIndex++){\r\n\r\n      var c = m[typeIndex]\r\n\r\n      if( showBand[ratioIndex] === false || showType[c.which]  === false ){\r\n        c.bands.push([0, 0, '']) \r\n        continue\r\n      }\r\n        \r\n      /*\r\n      var ratioPerp = ratiosPerp && ratiosPerp.length > ratioIndex && ratiosPerp[ratioIndex]\r\n      var ratioSpot =  ratiosSpot && ratiosSpot.length > ratioIndex && ratiosSpot[ratioIndex]\r\n      var ratioBinance =  ratiosBinance && ratiosBinance.length > ratioIndex && ratiosBinance[ratioIndex]\r\n      var ratioCoinbase =  ratiosCoinbase && ratiosCoinbase.length > ratioIndex && ratiosCoinbase[ratioIndex]\r\n      */\r\n      var ratio = c.ratios.length && c.ratios[ratioIndex]\r\n      var direction = Math.sign(ratio)\r\n      var buyAlert = alerts[c.which]['buy'][ratioIndex]\r\n      var sellAlert = alerts[c.which]['sell'][ratioIndex]\r\n      var threshold = direction > 0 ? buyAlert : sellAlert\r\n      var thresholdAbs = Math.abs(threshold)\r\n    \r\n      var lower = $price.close + -1 * direction * (($price.close  * lowerPercent[ratioIndex]) / 100)  \r\n      var upper = $price.close + -1 * direction * (($price.close  * upperPercent[ratioIndex]) / 100)\r\n\r\n      if( !ratio || Math.abs(ratio) < thresholdAbs ){\r\n          allOn = false\r\n          c.bands.push([0, 0, '']) \r\n      }else{\r\n\r\n          var alphaRatio = Math.abs(ratio) < thresholdAbs ? 0 : startOpacity + (1 - startOpacity) * ((Math.abs(ratio) - thresholdAbs) / (100 - thresholdAbs))\r\n          var alphaRatioRounded = Math.round(alphaRatio * 100) / 100 \r\n          var colorRatio = 'rgba(' + whichColors[c.which].join(',') + ',' + alphaRatioRounded + ')'\r\n          \r\n          c.bands.push([lower, upper, colorRatio])\r\n      }\r\n      \r\n    }// end for each type\r\n\r\n    if( allOnIndicator && allOn ){\r\n      for(let typeIndex = 0; typeIndex < 4; typeIndex++){\r\n        var c = m[typeIndex]\r\n        c.bands[ratioIndex] = [lower, upper, options.allOnColor]\r\n      }\r\n    }\r\n\r\n  } // end for each ratios\r\n\r\n\r\nvar i = 0\r\n\r\nfor(let ratioIndex = 0; ratioIndex < 4; ratioIndex++){\r\n\r\n    if( showBand[ratioIndex] === false ){\r\n      i = i + m.length\r\n      continue\r\n    }\r\n\r\n    for(let typeIndex = 0; typeIndex < m.length; typeIndex++){\r\n\r\n       var c = m[typeIndex]\r\n    \r\n       if( c.bands.length && c.bands[ratioIndex][0] !== 0 ) {\r\n         renderer.indicators[indicatorId].series[i] = {\r\n          time: time, \r\n          lowerValue: c.bands[ratioIndex][0],\r\n          higherValue: c.bands[ratioIndex][1],\r\n          color:  c.bands[ratioIndex][2]\r\n        }\r\n      }\r\n\r\n      i++\r\n    }\r\n}\r\n\r\n\r\n\r\nreturn\r\n//perp\r\nbrokenarea({\r\n        time: time, \r\n        lowerValue: 0,\r\n        higherValue: 0,\r\n        color:  options.color\r\n      })\r\nbrokenarea({\r\n        time: time, \r\n        lowerValue: 0,\r\n        higherValue: 0,\r\n        color:  options.color\r\n      })\r\nbrokenarea({\r\n        time: time, \r\n        lowerValue: 0,\r\n        higherValue: 0,\r\n        color:  options.color\r\n      })\r\nbrokenarea({\r\n        time: time, \r\n        lowerValue: 0,\r\n        higherValue: 0,\r\n        color:  options.color\r\n      })     \r\n      brokenarea({\r\n        time: time, \r\n        lowerValue: 0,\r\n        higherValue: 0,\r\n        color:  options.color\r\n      })\r\nbrokenarea({\r\n        time: time, \r\n        lowerValue: 0,\r\n        higherValue: 0,\r\n        color:  options.color\r\n      })\r\nbrokenarea({\r\n        time: time, \r\n        lowerValue: 0,\r\n        higherValue: 0,\r\n        color:  options.color\r\n      })\r\nbrokenarea({\r\n        time: time, \r\n        lowerValue: 0,\r\n        higherValue: 0,\r\n        color:  options.color\r\n      })   \r\n      brokenarea({\r\n        time: time, \r\n        lowerValue: 0,\r\n        higherValue: 0,\r\n        color:  options.color\r\n      })\r\nbrokenarea({\r\n        time: time, \r\n        lowerValue: 0,\r\n        higherValue: 0,\r\n        color:  options.color\r\n      })\r\nbrokenarea({\r\n        time: time, \r\n        lowerValue: 0,\r\n        higherValue: 0,\r\n        color:  options.color\r\n      })\r\nbrokenarea({\r\n        time: time, \r\n        lowerValue: 0,\r\n        higherValue: 0,\r\n        color:  options.color\r\n      })   \r\n      brokenarea({\r\n        time: time, \r\n        lowerValue: 0,\r\n        higherValue: 0,\r\n        color:  options.color\r\n      })\r\nbrokenarea({\r\n        time: time, \r\n        lowerValue: 0,\r\n        higherValue: 0,\r\n        color:  options.color\r\n      })\r\nbrokenarea({\r\n        time: time, \r\n        lowerValue: 0,\r\n        higherValue: 0,\r\n        color:  options.color\r\n      })\r\nbrokenarea({\r\n        time: time, \r\n        lowerValue: 0,\r\n        higherValue: 0,\r\n        color:  options.color\r\n      })\r\n            brokenarea({\r\n        time: time, \r\n        lowerValue: 0,\r\n        higherValue: 0,\r\n        color:  options.color\r\n      })\r\nbrokenarea({\r\n        time: time, \r\n        lowerValue: 0,\r\n        higherValue: 0,\r\n        color:  options.color\r\n      })\r\nbrokenarea({\r\n        time: time, \r\n        lowerValue: 0,\r\n        higherValue: 0,\r\n        color:  options.color\r\n      })\r\nbrokenarea({\r\n        time: time, \r\n        lowerValue: 0,\r\n        higherValue: 0,\r\n        color:  options.color\r\n      })",
          "id": "orderbook-overlays-spot",
          "name": "Orderbook Overlays Spot",
          "options": {
            "priceScaleId": "right",
            "startOpacity": null,
            "allOnColor": "rgb(242,54,69)",
            "binanceColor": "rgb(255,255,255)",
            "perpColor": "rgb(41,98,255)",
            "spotColor": "rgb(255,235,59)",
            "scaleMargins": {
              "top": 0.29,
              "bottom": 0.34
            },
            "coinbaseColor": "rgb(247,124,128)",
            "visible": true,
            "priceFormat": {
              "type": "price",
              "precision": 1,
              "minMove": 0.1,
              "auto": true
            },
            "toggleSpot": true,
            "togglePerp": false,
            "toggleBinance": false,
            "toggleCoinbase": false,
            "toggleAllOnIndicator": null,
            "toggleBitmex": null,
            "bitmexColor": "rgb(206,147,216)",
            "toggleBand1": true,
            "toggleBand2": true,
            "toggleBand3": true,
            "toggleBand4": true,
            "band0lowerPercent": null
          },
          "description": null,
          "unsavedChanges": true,
          "optionsDefinitions": {},
          "series": [
            "orderbook-overlays-spot",
            "32u1d5ub",
            "4y88up7z",
            "54iortn5",
            "3a670g4x",
            "28xecxgo",
            "pcx3w4cz",
            "15i9teiv",
            "eb2w4c8z",
            "o6vpjkx2",
            "koprx5jo",
            "7eaa7e91",
            "h4lw5wht",
            "1rccsa6x",
            "6rj9n996",
            "479523vp",
            "rccusybk",
            "5ofjvzph",
            "dlw19dco",
            "zilvbws3"
          ],
          "displayName": "Orderbook Overlays Spot"
        }
      },
      "indicatorOrder": [
        "cvd",
        "liquidations",
        "price",
        "volume",
        "obv-spots copy 1",
        "orderbook-overlays-spot"
      ],
      "priceScales": {
        "right": {
          "scaleMargins": {
            "top": 0.29,
            "bottom": 0.34
          },
          "priceFormat": {
            "precision": 1,
            "minMove": 0.1
          },
          "indicators": [
            "Price"
          ]
        },
        "cvd": {
          "scaleMargins": {
            "top": 0.73,
            "bottom": 0.07
          },
          "indicators": [
            "CVD"
          ]
        },
        "volume_liquidations": {
          "scaleMargins": {
            "top": 0,
            "bottom": 0.96
          }
        },
        "volume": {
          "scaleMargins": {
            "top": 0.87,
            "bottom": 0
          },
          "indicators": [
            "Volume"
          ]
        },
        "obv-copy-1": {
          "scaleMargins": {
            "top": 0.73,
            "bottom": 0.07
          },
          "indicators": [
            "OBV spots"
          ]
        }
      },
      "layouting": false,
      "showIndicators": true,
      "timeframe": "900",
      "refreshRate": 10000,
      "showAlerts": true,
      "showAlertsLabel": true,
      "showLegend": false,
      "fillGapsWithEmpty": true,
      "showHorizontalGridlines": false,
      "horizontalGridlinesColor": "rgba(255,255,255,.1)",
      "showVerticalGridlines": false,
      "verticalGridlinesColor": "rgba(255,255,255,.1)",
      "showWatermark": true,
      "watermarkColor": "rgba(255,255,255,.1)",
      "showBorder": true,
      "borderColor": null,
      "showLeftScale": false,
      "showRightScale": true,
      "showTimeScale": true,
      "hiddenMarkets": {},
      "barSpacing": 1.355538668502142,
      "_id": "chart copy 2"
    },
    "chart copy 3": {
      "indicatorsErrors": {},
      "indicators": {
        "cvd": {
          "enabled": true,
          "name": "CVD",
          "description": "Cumulative Volume Delta",
          "script": "plotline(cum(vbuy - vsell), title=cvd)",
          "options": {
            "priceScaleId": "cvd",
            "priceFormat": {
              "type": "volume"
            },
            "color": "rgba(209,212,220,0.81)",
            "scaleMargins": {
              "top": 0.73,
              "bottom": 0.07
            },
            "visible": true,
            "lineWidth": 1,
            "priceLineStyle": 1,
            "lineStyle": 1
          },
          "id": "cvd",
          "createdAt": 1700269685372,
          "updatedAt": 1702412185043,
          "series": [
            "cvd"
          ],
          "unsavedChanges": false,
          "preview": {},
          "optionsDefinitions": {}
        },
        "liquidations": {
          "enabled": true,
          "name": "Liquidations",
          "description": "Liquidations by side",
          "script": "plothistogram(lbuy, color=options.upColor)\nplothistogram(-lsell, color=options.downColor)",
          "options": {
            "priceFormat": {
              "type": "volume"
            },
            "priceScaleId": "volume_liquidations",
            "upColor": "rgb(255,76,243)",
            "downColor": "rgb(255,183,77)",
            "scaleMargins": {
              "top": 0,
              "bottom": 0.96
            },
            "visible": false
          },
          "id": "liquidations",
          "createdAt": 1700269685372,
          "updatedAt": 1700815523685,
          "series": [
            "liquidations",
            "n51e34d4"
          ],
          "preview": {},
          "unsavedChanges": false,
          "optionsDefinitions": {}
        },
        "price": {
          "enabled": true,
          "name": "Price",
          "script": "src = { sources: { \"BINANCE_FUTURES:btcusdt\":BINANCE_FUTURES:btcusdt }, localTimestamp: time }\r\n\r\nvar ohlc = options.useHeikinAshi ? avg_heikinashi(src) : options.useGaps ? avg_ohlc_with_gaps(src) : avg_ohlc(src)\r\n\r\nplotcandlestick(ohlc, id=price)",
          "options": {
            "priceScaleId": "right",
            "priceFormat": {
              "auto": true,
              "precision": 1,
              "minMove": 0.1
            },
            "priceLineVisible": true,
            "lastValueVisible": true,
            "borderVisible": false,
            "upColor": "rgba(255,235,59,0.52)",
            "downColor": "rgba(242,54,69,0.64)",
            "borderUpColor": "rgba(255,245,157,0.66)",
            "borderDownColor": "rgba(178,40,51,0.52)",
            "wickUpColor": "rgb(223,211,144)",
            "wickDownColor": "rgba(239,67,82,0.47)",
            "useGaps": false,
            "useHeikinAshi": false,
            "scaleMargins": {
              "top": 0.29,
              "bottom": 0.34
            },
            "visible": true
          },
          "id": "price",
          "createdAt": 1700269685372,
          "updatedAt": 1702412161838,
          "series": [
            "price"
          ],
          "unsavedChanges": true,
          "preview": {},
          "optionsDefinitions": {}
        },
        "volume": {
          "enabled": true,
          "name": "Volume",
          "description": "Volume + delta",
          "script": "var _vbuy = source(vbuy, type=perp)\nvar _vsell = source(vsell, type=perp)\n\nif (upColor === 0) {\n  if (options.showDelta) {\n    upColor = options.upBgColor\n    downColor = options.downBgColor\n  } else {\n    upColor = options.upColor\n    downColor = options.downColor\n  }\n}\n\nif (options.showDelta) {\n  plothistogram({ time: time, value: Math.abs(_vbuy-_vsell), color: _vbuy - _vsell > 0 ? options.upColor : options.downColor})\n}\n\nplothistogram({ time: time, value: _vbuy + _vsell, color: _vbuy > _vsell ? upColor : downColor })",
          "options": {
            "priceScaleId": "volume",
            "priceFormat": {
              "type": "volume"
            },
            "upColor": "rgba(76,175,80,0.62)",
            "downColor": "rgba(242,54,69,0.71)",
            "scaleMargins": {
              "top": 0.87,
              "bottom": 0
            },
            "showDelta": true,
            "upBgColor": "rgba(178,181,190,0.33)",
            "downBgColor": "rgba(93,96,107,0.38)",
            "visible": true,
            "lastValueVisible": true,
            "color": "rgba(195,168,122,0.54)",
            "showDeltaOnly": true,
            "showBoth": true
          },
          "id": "volume",
          "createdAt": 1700269685372,
          "updatedAt": 1702530630403,
          "series": [
            "volume",
            "m1hz8eug"
          ],
          "unsavedChanges": false,
          "preview": {},
          "displayName": "Volume",
          "optionsDefinitions": {}
        },
        "obv-spots copy 1": {
          "script": "if (markers === 0) {\r\n  // first script execution (0 is default values for all persistent variables)\r\n\r\n  // create a var to store already drawn markers\r\n  markers = []\r\n\r\n  // contain the last marker that can change as the bar update\r\n  repaintableMarker = null\r\n\r\n  // if candle body has a price percent change less than bodyPercentWatch, we start a refinement\r\n  bodyPercentWatch = options.bodyPercentWatch || 0.3\r\n\r\n  // if a wick is x times greater than the other, we might use it to refine change the side\r\n  wickRatioThreshold = options.wickRatioThreshold || 1.5\r\n\r\n  // paint a marker when OBV has been refined (changed of direction)\r\n  toggleDebug = options.toggleDebug || false\r\n\r\n  // when on, we calculate the wick percent difference and keep only that volume to add to OBV \r\n  toggleVolumeWick = options.toggleVolumeWick || false\r\n\r\n  togglePrintNormalObv = options.togglePrintNormalObv || false\r\n}\r\nif (repaintableMarker && repaintableMarker.time < time) {\r\n  // bar is +1 since active marker was added, lock it in the array\r\n  markers.push(repaintableMarker)\r\n\r\n  // free up active marker\r\n  repaintableMarker = null\r\n}\r\n\r\nvar newMarker = null\r\nvar _vbuy = source(vbuy, type=spot)\r\nvar _vsell = source(vsell, type=spot)\r\nvar _open = $price.open\r\nvar _high = $price.high\r\nvar _low = $price.low\r\nvar _close = $price.close\r\n\r\nvar sign = _close > _open ? 1 : -1\r\nvar volume = _vbuy + _vsell\r\n\r\nvar bodySize = Math.abs(_close - _open);\r\nvar priceChange = (_close - _open) / _open; // Percentage change\r\n\r\nif( togglePrintNormalObv ){\r\n    plotline(cum(sign * volume), title=\"Original\", color=options.originalObvColor)\r\n}\r\n\r\nvar improved = false\r\n\r\n// Check if price change is less than 0.4%\r\nif (Math.abs(priceChange) < bodyPercentWatch/100 ) {\r\n    var upperWickSize = _high - _close;\r\n    var lowerWickSize = _close - _low;\r\n\r\n    // Calculate the thresholds\r\n    var upperWickThreshold = wickRatioThreshold * lowerWickSize;\r\n    var lowerWickThreshold = wickRatioThreshold * upperWickSize;\r\n\r\n    // Check if upper and lower wicks have similar sizes\r\n    if (upperWickSize < upperWickThreshold && lowerWickSize < lowerWickThreshold) {\r\n        // Neutral move, don't add volume\r\n        sign = 0\r\n        improved = true\r\n    }else{\r\n        // Calculate the thresholds\r\n        var upperWickThreshold = wickRatioThreshold * lowerWickSize;\r\n        var lowerWickThreshold = wickRatioThreshold * upperWickSize;\r\n\r\n        // Determine the side based on wick sizes\r\n        // upper: 500, lower 100\r\n        if (upperWickSize > upperWickThreshold) {\r\n            improved = sign !== -1\r\n            // More selling happened, add volume as negative\r\n            sign = -1\r\n            if( toggleVolumeWick ) {\r\n                improved = true\r\n                var percentageDifference = ((upperWickSize - lowerWickSize) / upperWickSize);\r\n                volume = percentageDifference * volume\r\n            }\r\n        } else if (lowerWickSize > lowerWickThreshold) {\r\n            improved = sign !== 1\r\n            // More buying happened, add volume as positive\r\n            sign = 1\r\n            if( toggleVolumeWick ) {\r\n                improved = true\r\n                var percentageDifference = ((lowerWickSize - upperWickSize) / lowerWickSize);\r\n                volume = percentageDifference * volume\r\n            }\r\n        }\r\n    }\r\n\r\n    if( improved && toggleDebug){\r\n        if (sign == -1) {\r\n            // newMarker is a temporary variable (not included in the indicator state)\r\n            // to avoid it being treated as persistent variable we wrap it inside parenthesis\r\n            (newMarker) = {\r\n                time: time,\r\n                position: 'aboveBar',\r\n                color: 'red',\r\n                shape: 'arrowDown'\r\n            }\r\n        }\r\n\r\n        if (sign == 1) {\r\n            (newMarker) = {\r\n                time: time,\r\n                position: 'belowBar',\r\n                color: 'lime',\r\n                shape: 'arrowUp'\r\n            }\r\n        } \r\n    }\r\n}\r\n\r\n\r\nif (newMarker || (repaintableMarker && !newMarker)) {\r\n  // override persistent variable repaintable marker\r\n  repaintableMarker = newMarker\r\n  \r\n  var index = togglePrintNormalObv ? 1 : 0\r\n\r\n  if (series[index].setMarkers) {\r\n    series[index].setMarkers(markers.concat(repaintableMarker))\r\n  }\r\n}\r\n\r\nvar obv = cum(sign * volume)\r\nplotline(obv, title=\"S\", color=options.refinedObvColor)",
          "id": "obv-spots copy 1",
          "name": "OBV spots",
          "options": {
            "priceScaleId": "obv-copy-1",
            "visible": false,
            "scaleMargins": {
              "top": 0.73,
              "bottom": 0.07
            },
            "lineStyle": 1,
            "color": "rgba(255,235,59,0.81)",
            "bodyPercentWatch": 0.3,
            "wickDiffPercent": 90,
            "debug": null,
            "toggleDebug": true,
            "toggleVolumeWick": false,
            "wickRatioThreshold": 1.5,
            "togglePrintNormalObv": false,
            "originalObvColor": "rgb(178,181,190)",
            "refinedObvColor": "rgb(41,98,255)"
          },
          "description": null,
          "createdAt": 1701126053261,
          "updatedAt": 1701126059594,
          "unsavedChanges": false,
          "optionsDefinitions": {},
          "series": [
            "obv-spots copy 1",
            "bqp9gmlg"
          ],
          "displayName": "OBV spots"
        },
        "obv-perps copy 1": {
          "script": "if (markers === 0) {\r\n  // first script execution (0 is default values for all persistent variables)\r\n\r\n  // create a var to store already drawn markers\r\n  markers = []\r\n\r\n  // contain the last marker that can change as the bar update\r\n  repaintableMarker = null\r\n\r\n  // if candle body has a price percent change less than bodyPercentWatch, we start a refinement\r\n  bodyPercentWatch = options.bodyPercentWatch || 0.3\r\n\r\n  // if a wick is x times greater than the other, we might use it to refine change the side\r\n  wickRatioThreshold = options.wickRatioThreshold || 1.5\r\n\r\n  // paint a marker when OBV has been refined (changed of direction)\r\n  toggleDebug = options.toggleDebug || false\r\n\r\n  // when on, we calculate the wick percent difference and keep only that volume to add to OBV \r\n  toggleVolumeWick = options.toggleVolumeWick || false\r\n\r\n  togglePrintNormalObv = options.togglePrintNormalObv || false\r\n}\r\nif (repaintableMarker && repaintableMarker.time < time) {\r\n  // bar is +1 since active marker was added, lock it in the array\r\n  markers.push(repaintableMarker)\r\n\r\n  // free up active marker\r\n  repaintableMarker = null\r\n}\r\n\r\nvar newMarker = null\r\nvar _vbuy = source(vbuy, type=perp)\r\nvar _vsell = source(vsell, type=perp)\r\nvar _open = $price.open\r\nvar _high = $price.high\r\nvar _low = $price.low\r\nvar _close = $price.close\r\n\r\nvar sign = _close > _open ? 1 : -1\r\nvar volume = _vbuy + _vsell\r\n\r\nvar bodySize = Math.abs(_close - _open);\r\nvar priceChange = (_close - _open) / _open; // Percentage change\r\n\r\nif( togglePrintNormalObv ){\r\n    plotline(cum(sign * volume), title=\"Original\", color=options.originalObvColor)\r\n}\r\n\r\nvar improved = false\r\n\r\n// Check if price change is less than 0.4%\r\nif (Math.abs(priceChange) < bodyPercentWatch/100 ) {\r\n    var upperWickSize = _high - _close;\r\n    var lowerWickSize = _close - _low;\r\n\r\n    // Calculate the thresholds\r\n    var upperWickThreshold = wickRatioThreshold * lowerWickSize;\r\n    var lowerWickThreshold = wickRatioThreshold * upperWickSize;\r\n\r\n    // Check if upper and lower wicks have similar sizes\r\n    if (upperWickSize < upperWickThreshold && lowerWickSize < lowerWickThreshold) {\r\n        // Neutral move, don't add volume\r\n        sign = 0\r\n        improved = true\r\n    }else{\r\n        // Calculate the thresholds\r\n        var upperWickThreshold = wickRatioThreshold * lowerWickSize;\r\n        var lowerWickThreshold = wickRatioThreshold * upperWickSize;\r\n\r\n        // Determine the side based on wick sizes\r\n        // upper: 500, lower 100\r\n        if (upperWickSize > upperWickThreshold) {\r\n            improved = sign !== -1\r\n            // More selling happened, add volume as negative\r\n            sign = -1\r\n            if( toggleVolumeWick ) {\r\n                improved = true\r\n                var percentageDifference = ((upperWickSize - lowerWickSize) / upperWickSize);\r\n                volume = percentageDifference * volume\r\n            }\r\n        } else if (lowerWickSize > lowerWickThreshold) {\r\n            improved = sign !== 1\r\n            // More buying happened, add volume as positive\r\n            sign = 1\r\n            if( toggleVolumeWick ) {\r\n                improved = true\r\n                var percentageDifference = ((lowerWickSize - upperWickSize) / lowerWickSize);\r\n                volume = percentageDifference * volume\r\n            }\r\n        }\r\n    }\r\n\r\n    if( improved && toggleDebug){\r\n        if (sign == -1) {\r\n            // newMarker is a temporary variable (not included in the indicator state)\r\n            // to avoid it being treated as persistent variable we wrap it inside parenthesis\r\n            (newMarker) = {\r\n                time: time,\r\n                position: 'aboveBar',\r\n                color: 'red',\r\n                shape: 'arrowDown'\r\n            }\r\n        }\r\n\r\n        if (sign == 1) {\r\n            (newMarker) = {\r\n                time: time,\r\n                position: 'belowBar',\r\n                color: 'lime',\r\n                shape: 'arrowUp'\r\n            }\r\n        } \r\n    }\r\n}\r\n\r\n\r\nif (newMarker || (repaintableMarker && !newMarker)) {\r\n  // override persistent variable repaintable marker\r\n  repaintableMarker = newMarker\r\n  \r\n  var index = togglePrintNormalObv ? 1 : 0\r\n\r\n  if (series[index].setMarkers) {\r\n    series[index].setMarkers(markers.concat(repaintableMarker))\r\n  }\r\n}\r\n\r\nvar obv = cum(sign * volume)\r\nplotline(obv, title=\"P\", color=options.refinedObvColor)",
          "id": "obv-perps copy 1",
          "name": "OBV perps",
          "options": {
            "priceScaleId": "obv",
            "visible": true,
            "scaleMargins": {
              "top": 0.73,
              "bottom": 0
            },
            "lineStyle": 0,
            "color": "rgb(41,98,255)",
            "lineWidth": 1,
            "bodyPercentWatch": 0.3,
            "wickRatioThreshold": 1.5,
            "toggleDebug": false,
            "toggleVolumeWick": true,
            "togglePrintNormalObv": false,
            "refinedObvColor": "rgb(255,235,59)",
            "originalObvColor": "rgb(255,255,255)"
          },
          "description": null,
          "createdAt": 1701126013797,
          "updatedAt": 1701126025858,
          "unsavedChanges": true,
          "optionsDefinitions": {},
          "displayName": "OBV perps",
          "series": [
            "obv-perps copy 1",
            "nrmhudfk"
          ]
        },
        "orderbook-perp": {
          "script": "if (!pendingMarkers) {\r\n    // runs only once\r\n    pendingMarkers = []\r\n    spotColor = options.spotColor.match(/\\(([\\d.]+),([\\d.]+),([\\d.]+),?([\\d.]+)?\\)$/).slice(1,5).map(a => +a)\r\n    perpColor = options.perpColor.match(/\\(([\\d.]+),([\\d.]+),([\\d.]+),?([\\d.]+)?\\)$/).slice(1,5).map(a => +a)\r\n    binanceColor = options.binanceColor.match(/\\(([\\d.]+),([\\d.]+),([\\d.]+),?([\\d.]+)?\\)$/).slice(1,5).map(a => +a)\r\n    coinbaseColor = options.coinbaseColor.match(/\\(([\\d.]+),([\\d.]+),([\\d.]+),?([\\d.]+)?\\)$/).slice(1,5).map(a => +a)\r\n    bitmexColor = options.bitmexColor.match(/\\(([\\d.]+),([\\d.]+),([\\d.]+),?([\\d.]+)?\\)$/).slice(1, 5).map(a => +a);\r\n\r\n    //allOnColor = options.allOnColor.match(/\\(([\\d.]+),([\\d.]+),([\\d.]+),?([\\d.]+)?\\)$/).slice(1,5).map(a => +a)\r\n\r\n    spotOpacity = spotColor.pop()\r\n    perpOpacity = perpColor.pop()\r\n    binanceOpacity = binanceColor.pop()\r\n    coinbaseOpacity = coinbaseColor.pop()\r\n    bitmexOpacity = bitmexColor.pop()\r\n   // allOnColorOpacity = allOnColor.pop()\r\n\r\n    startOpacity = options.startOpacity || 0.1\r\n  \r\n    spotBuyAlerts  = [40, 63, 46, 60]\r\n    spotSellAlerts = [-40, -63, -46, -60]\r\n\r\n    perpBuyAlerts  = [38, 27, 36, 35]\r\n    perpSellAlerts = [-20, -27, -36, -35]\r\n\r\n    binanceBuyAlerts  = [70, 70, 70, 70]\r\n    binanceSellAlerts = [-70, -70, -70, -70]\r\n\r\n    coinbaseBuyAlerts  = [50, 50, 50, 50]\r\n    coinbaseSellAlerts = [-50, -70, -65, -50]\r\n\r\n    bitmexBuyAlerts  = [-50, -60, -50, -50]\r\n    bitmexSellAlerts = [-50, -60, -50, -50]\r\n\r\n    alerts = {\r\n      spot: {\r\n        buy: spotBuyAlerts,\r\n        sell: spotSellAlerts\r\n      },\r\n      perp: {\r\n        buy: perpBuyAlerts,\r\n        sell: perpSellAlerts\r\n      },\r\n      binance: {\r\n        buy: binanceBuyAlerts,\r\n        sell: binanceSellAlerts\r\n      },\r\n      coinbase: {\r\n        buy: coinbaseBuyAlerts,\r\n        sell: coinbaseSellAlerts\r\n      },\r\n        bitmex: {\r\n            buy: bitmexBuyAlerts,\r\n            sell: bitmexSellAlerts\r\n        }\r\n    }\r\n\r\n    whichColors = {\r\n      spot: spotColor,\r\n      perp: perpColor,\r\n      binance: binanceColor,\r\n      coinbase: coinbaseColor,\r\n      bitmex: bitmexColor\r\n    }\r\n\r\n    allOnIndicator = options.toggleAllOnIndicator || false,\r\n\r\n    showType = {\r\n      spot: options.toggleSpot,\r\n      perp: options.togglePerp,\r\n      binance: options.toggleBinance,\r\n      coinbase: options.toggleCoinbase,\r\n      bitmex: options.toggleBitmex\r\n    }\r\n\r\n    showBand = [\r\n        options.toggleBand1 || false,\r\n        options.toggleBand2 || false,\r\n        options.toggleBand3 || false,\r\n        options.toggleBand4 || false,\r\n    ]\r\n\r\n    lowerPercent = [options.band0lowerPercent || 0.11, 1, 2.5, 5]\r\n    upperPercent = [1, 2.5, 5, 10]  \r\n\r\n  }\r\n  // </STARTUP SCRIPT> \r\n\r\n  var ratiosPerp = ORDERBOOK:AGGRPERP-BTCUSD.zratios\r\n  var ratiosSpot = ORDERBOOK:AGGRSPOT-BTCUSD.zratios \r\n  var ratiosBinance = renderer.sources['ORDERBOOK:BINANCE-BTCUSDTLEVELS'] && renderer.sources['ORDERBOOK:BINANCE-BTCUSDTLEVELS'].zratios\r\n  var ratiosCoinbase = renderer.sources['ORDERBOOK:COINBASE-BTCUSD'] && renderer.sources['ORDERBOOK:COINBASE-BTCUSD'].zratios \r\n  var ratiosBitmex = renderer.sources['ORDERBOOK:BITMEX-XBTUSDLEVELS'] && renderer.sources['ORDERBOOK:BITMEX-XBTUSDLEVELS'].zratios\r\n\r\n  var m = [\r\n      { which: 'perp', ratios: ratiosPerp || [], bands: [] },\r\n      { which: 'spot', ratios: ratiosSpot || [], bands: [] },\r\n      { which: 'binance', ratios: ratiosBinance || [], bands: [] },\r\n      { which: 'coinbase', ratios: ratiosCoinbase || [], bands: [] },\r\n      { which: 'bitmex', ratios: ratiosBitmex || [], bands: [] }\r\n  ];\r\n  \r\n  /*var ratiosPerp = ORDERBOOK:AGGRPERP-BTCUSD.zratios\r\n  var ratiosSpot = ORDERBOOK:AGGRSPOT-BTCUSD.zratios \r\n  var ratiosBinance = renderer.sources['ORDERBOOK:BINANCE-BTCUSDTLEVELS'].zratios\r\n  var ratiosCoinbase = renderer.sources['ORDERBOOK:COINBASE-BTCUSD'].zratios \r\n\r\n  var perps = []\r\n  var spots = []\r\n  var binance = []\r\n  var coinbase = []\r\n*/\r\n  //var ratio = 0\r\n\r\n  // for each ratio\r\n  for(let ratioIndex = 0; ratioIndex < 4; ratioIndex++){\r\n\r\n    // TODO must be same direction\r\n    var allOn = true;\r\n\r\n    // for each type (perp, spot, binance, ...)\r\n    for(let typeIndex = 0; typeIndex < m.length; typeIndex++){\r\n\r\n      var c = m[typeIndex]\r\n\r\n      if( showBand[ratioIndex] === false || showType[c.which]  === false ){\r\n        c.bands.push([0, 0, '']) \r\n        continue\r\n      }\r\n        \r\n      /*\r\n      var ratioPerp = ratiosPerp && ratiosPerp.length > ratioIndex && ratiosPerp[ratioIndex]\r\n      var ratioSpot =  ratiosSpot && ratiosSpot.length > ratioIndex && ratiosSpot[ratioIndex]\r\n      var ratioBinance =  ratiosBinance && ratiosBinance.length > ratioIndex && ratiosBinance[ratioIndex]\r\n      var ratioCoinbase =  ratiosCoinbase && ratiosCoinbase.length > ratioIndex && ratiosCoinbase[ratioIndex]\r\n      */\r\n      var ratio = c.ratios.length && c.ratios[ratioIndex]\r\n      var direction = Math.sign(ratio)\r\n      var buyAlert = alerts[c.which]['buy'][ratioIndex]\r\n      var sellAlert = alerts[c.which]['sell'][ratioIndex]\r\n      var threshold = direction > 0 ? buyAlert : sellAlert\r\n      var thresholdAbs = Math.abs(threshold)\r\n    \r\n      var lower = $price.close + -1 * direction * (($price.close  * lowerPercent[ratioIndex]) / 100)  \r\n      var upper = $price.close + -1 * direction * (($price.close  * upperPercent[ratioIndex]) / 100)\r\n\r\n      if( !ratio || Math.abs(ratio) < thresholdAbs ){\r\n          allOn = false\r\n          c.bands.push([0, 0, '']) \r\n      }else{\r\n\r\n          var alphaRatio = Math.abs(ratio) < thresholdAbs ? 0 : startOpacity + (1 - startOpacity) * ((Math.abs(ratio) - thresholdAbs) / (100 - thresholdAbs))\r\n          var alphaRatioRounded = Math.round(alphaRatio * 100) / 100 \r\n          var colorRatio = 'rgba(' + whichColors[c.which].join(',') + ',' + alphaRatioRounded + ')'\r\n          \r\n          c.bands.push([lower, upper, colorRatio])\r\n      }\r\n      \r\n    }// end for each type\r\n\r\n    if( allOnIndicator && allOn ){\r\n      for(let typeIndex = 0; typeIndex < 4; typeIndex++){\r\n        var c = m[typeIndex]\r\n        c.bands[ratioIndex] = [lower, upper, options.allOnColor]\r\n      }\r\n    }\r\n\r\n  } // end for each ratios\r\n\r\n\r\nvar i = 0\r\n\r\nfor(let ratioIndex = 0; ratioIndex < 4; ratioIndex++){\r\n\r\n    if( showBand[ratioIndex] === false ){\r\n      i = i + m.length\r\n      continue\r\n    }\r\n\r\n    for(let typeIndex = 0; typeIndex < m.length; typeIndex++){\r\n\r\n       var c = m[typeIndex]\r\n    \r\n       if( c.bands.length && c.bands[ratioIndex][0] !== 0 ) {\r\n         renderer.indicators[indicatorId].series[i] = {\r\n          time: time, \r\n          lowerValue: c.bands[ratioIndex][0],\r\n          higherValue: c.bands[ratioIndex][1],\r\n          color:  c.bands[ratioIndex][2]\r\n        }\r\n      }\r\n\r\n      i++\r\n    }\r\n}\r\n\r\n\r\n\r\nreturn\r\n//perp\r\nbrokenarea({\r\n        time: time, \r\n        lowerValue: 0,\r\n        higherValue: 0,\r\n        color:  options.color\r\n      })\r\nbrokenarea({\r\n        time: time, \r\n        lowerValue: 0,\r\n        higherValue: 0,\r\n        color:  options.color\r\n      })\r\nbrokenarea({\r\n        time: time, \r\n        lowerValue: 0,\r\n        higherValue: 0,\r\n        color:  options.color\r\n      })\r\nbrokenarea({\r\n        time: time, \r\n        lowerValue: 0,\r\n        higherValue: 0,\r\n        color:  options.color\r\n      })     \r\n      brokenarea({\r\n        time: time, \r\n        lowerValue: 0,\r\n        higherValue: 0,\r\n        color:  options.color\r\n      })\r\nbrokenarea({\r\n        time: time, \r\n        lowerValue: 0,\r\n        higherValue: 0,\r\n        color:  options.color\r\n      })\r\nbrokenarea({\r\n        time: time, \r\n        lowerValue: 0,\r\n        higherValue: 0,\r\n        color:  options.color\r\n      })\r\nbrokenarea({\r\n        time: time, \r\n        lowerValue: 0,\r\n        higherValue: 0,\r\n        color:  options.color\r\n      })   \r\n      brokenarea({\r\n        time: time, \r\n        lowerValue: 0,\r\n        higherValue: 0,\r\n        color:  options.color\r\n      })\r\nbrokenarea({\r\n        time: time, \r\n        lowerValue: 0,\r\n        higherValue: 0,\r\n        color:  options.color\r\n      })\r\nbrokenarea({\r\n        time: time, \r\n        lowerValue: 0,\r\n        higherValue: 0,\r\n        color:  options.color\r\n      })\r\nbrokenarea({\r\n        time: time, \r\n        lowerValue: 0,\r\n        higherValue: 0,\r\n        color:  options.color\r\n      })   \r\n      brokenarea({\r\n        time: time, \r\n        lowerValue: 0,\r\n        higherValue: 0,\r\n        color:  options.color\r\n      })\r\nbrokenarea({\r\n        time: time, \r\n        lowerValue: 0,\r\n        higherValue: 0,\r\n        color:  options.color\r\n      })\r\nbrokenarea({\r\n        time: time, \r\n        lowerValue: 0,\r\n        higherValue: 0,\r\n        color:  options.color\r\n      })\r\nbrokenarea({\r\n        time: time, \r\n        lowerValue: 0,\r\n        higherValue: 0,\r\n        color:  options.color\r\n      })\r\n            brokenarea({\r\n        time: time, \r\n        lowerValue: 0,\r\n        higherValue: 0,\r\n        color:  options.color\r\n      })\r\nbrokenarea({\r\n        time: time, \r\n        lowerValue: 0,\r\n        higherValue: 0,\r\n        color:  options.color\r\n      })\r\nbrokenarea({\r\n        time: time, \r\n        lowerValue: 0,\r\n        higherValue: 0,\r\n        color:  options.color\r\n      })\r\nbrokenarea({\r\n        time: time, \r\n        lowerValue: 0,\r\n        higherValue: 0,\r\n        color:  options.color\r\n      })",
          "id": "orderbook-perp",
          "name": "Orderbook Perp",
          "options": {
            "priceScaleId": "right",
            "startOpacity": null,
            "allOnColor": "rgb(242,54,69)",
            "binanceColor": "rgb(255,255,255)",
            "perpColor": "rgb(41,98,255)",
            "spotColor": "rgb(255,235,59)",
            "scaleMargins": {
              "top": 0.29,
              "bottom": 0.34
            },
            "coinbaseColor": "rgb(247,124,128)",
            "visible": true,
            "priceFormat": {
              "type": "price",
              "precision": 1,
              "minMove": 0.1,
              "auto": true
            },
            "toggleSpot": false,
            "togglePerp": true,
            "toggleBinance": false,
            "toggleCoinbase": false,
            "toggleAllOnIndicator": false,
            "toggleBitmex": false,
            "bitmexColor": "rgb(149,117,205)",
            "toggleBand1": true,
            "toggleBand2": true,
            "toggleBand3": true,
            "toggleBand4": true,
            "band0lowerPercent": null
          },
          "description": null,
          "unsavedChanges": true,
          "optionsDefinitions": {},
          "series": [
            "orderbook-perp",
            "phr8a8tt",
            "65by4hck",
            "w5blgh52",
            "j6szbd8u",
            "gko8jb2t",
            "a5u21z47",
            "5e8bfpha",
            "uin1qgxr",
            "b8tnmtq9",
            "ks29aixh",
            "jd2f10iz",
            "nzkg46a6",
            "pwlbhhx7",
            "rp9h6m2l",
            "zhhubmv3",
            "iy84h7d6",
            "tstwutjx",
            "ywwtwji0",
            "5yvmlnqs"
          ],
          "displayName": "Orderbook Perp"
        }
      },
      "indicatorOrder": [
        "cvd",
        "liquidations",
        "price",
        "volume",
        "obv-spots copy 1",
        "obv-perps copy 1",
        "orderbook-perp"
      ],
      "priceScales": {
        "right": {
          "scaleMargins": {
            "top": 0.29,
            "bottom": 0.34
          },
          "priceFormat": {
            "precision": 1,
            "minMove": 0.1
          },
          "indicators": [
            "Price"
          ]
        },
        "cvd": {
          "scaleMargins": {
            "top": 0.73,
            "bottom": 0.07
          },
          "indicators": [
            "CVD"
          ]
        },
        "volume_liquidations": {
          "scaleMargins": {
            "top": 0,
            "bottom": 0.96
          }
        },
        "volume": {
          "scaleMargins": {
            "top": 0.87,
            "bottom": 0
          },
          "indicators": [
            "Volume"
          ]
        },
        "obv-copy-1": {
          "scaleMargins": {
            "top": 0.73,
            "bottom": 0.07
          },
          "indicators": [
            "OBV spots"
          ]
        },
        "obv": {
          "scaleMargins": {
            "top": 0.73,
            "bottom": 0
          },
          "indicators": [
            "OBV perps"
          ]
        }
      },
      "layouting": false,
      "showIndicators": true,
      "timeframe": "900",
      "refreshRate": 10000,
      "showAlerts": true,
      "showAlertsLabel": true,
      "showLegend": false,
      "fillGapsWithEmpty": true,
      "showHorizontalGridlines": false,
      "horizontalGridlinesColor": "rgba(255,255,255,.1)",
      "showVerticalGridlines": false,
      "verticalGridlinesColor": "rgba(255,255,255,.1)",
      "showWatermark": true,
      "watermarkColor": "rgba(255,255,255,.1)",
      "showBorder": true,
      "borderColor": null,
      "showLeftScale": false,
      "showRightScale": true,
      "showTimeScale": true,
      "hiddenMarkets": {},
      "barSpacing": 5.555055144094797,
      "_id": "chart copy 3"
    },
    "chart copy 4": {
      "indicatorsErrors": {},
      "indicators": {
        "cvd": {
          "enabled": true,
          "name": "CVD",
          "description": "Cumulative Volume Delta",
          "script": "plotline(cum(vbuy - vsell), title=cvd)",
          "options": {
            "priceScaleId": "cvd",
            "priceFormat": {
              "type": "volume"
            },
            "color": "rgba(209,212,220,0.81)",
            "scaleMargins": {
              "top": 0.73,
              "bottom": 0.07
            },
            "visible": true,
            "lineWidth": 1,
            "priceLineStyle": 1,
            "lineStyle": 1
          },
          "id": "cvd",
          "createdAt": 1700269685372,
          "updatedAt": 1702412185043,
          "series": [
            "cvd"
          ],
          "unsavedChanges": true,
          "preview": {},
          "optionsDefinitions": {}
        },
        "liquidations": {
          "enabled": true,
          "name": "Liquidations",
          "description": "Liquidations by side",
          "script": "plothistogram(lbuy, color=options.upColor)\nplothistogram(-lsell, color=options.downColor)",
          "options": {
            "priceFormat": {
              "type": "volume"
            },
            "priceScaleId": "volume_liquidations",
            "upColor": "rgb(255,76,243)",
            "downColor": "rgb(255,183,77)",
            "scaleMargins": {
              "top": 0,
              "bottom": 0.96
            },
            "visible": false
          },
          "id": "liquidations",
          "createdAt": 1700269685372,
          "updatedAt": 1700815523685,
          "series": [
            "liquidations",
            "n51e34d4"
          ],
          "preview": {},
          "unsavedChanges": false,
          "optionsDefinitions": {}
        },
        "price": {
          "enabled": true,
          "name": "Price",
          "script": "src = { sources: { \"COINBASE:BTC-USD\":COINBASE:BTC-USD }, localTimestamp: time }\r\n\r\nvar ohlc = options.useHeikinAshi ? avg_heikinashi(src) : options.useGaps ? avg_ohlc_with_gaps(src) : avg_ohlc(src)\r\n\r\nplotcandlestick(ohlc, id=price)",
          "options": {
            "priceScaleId": "right",
            "priceFormat": {
              "auto": true,
              "precision": 1,
              "minMove": 0.1
            },
            "priceLineVisible": true,
            "lastValueVisible": true,
            "borderVisible": false,
            "upColor": "rgba(255,235,59,0.52)",
            "downColor": "rgba(242,54,69,0.64)",
            "borderUpColor": "rgba(255,245,157,0.66)",
            "borderDownColor": "rgba(178,40,51,0.52)",
            "wickUpColor": "rgb(223,211,144)",
            "wickDownColor": "rgba(239,67,82,0.47)",
            "useGaps": false,
            "useHeikinAshi": false,
            "scaleMargins": {
              "top": 0.3,
              "bottom": 0.32
            },
            "visible": true
          },
          "id": "price",
          "createdAt": 1700269685372,
          "updatedAt": 1702412161838,
          "series": [
            "price"
          ],
          "unsavedChanges": true,
          "preview": {},
          "optionsDefinitions": {}
        },
        "volume": {
          "enabled": true,
          "name": "Volume",
          "description": "Volume + delta",
          "script": "var _vbuy = source(vbuy, type=spot)\nvar _vsell = source(vsell, type=spot)\n\nif (upColor === 0) {\n  if (options.showDelta) {\n    upColor = options.upBgColor\n    downColor = options.downBgColor\n  } else {\n    upColor = options.upColor\n    downColor = options.downColor\n  }\n}\n\nif (options.showDelta) {\n  plothistogram({ time: time, value: Math.abs(_vbuy-_vsell), color: _vbuy - _vsell > 0 ? options.upColor : options.downColor})\n}\n\nplothistogram({ time: time, value: _vbuy + _vsell, color: _vbuy > _vsell ? upColor : downColor })",
          "options": {
            "priceScaleId": "volume",
            "priceFormat": {
              "type": "volume"
            },
            "upColor": "rgba(76,175,80,0.62)",
            "downColor": "rgba(242,54,69,0.71)",
            "scaleMargins": {
              "top": 0.87,
              "bottom": 0
            },
            "showDelta": true,
            "upBgColor": "rgba(178,181,190,0.33)",
            "downBgColor": "rgba(93,96,107,0.38)",
            "visible": true,
            "lastValueVisible": true,
            "color": "rgba(195,168,122,0.54)",
            "showDeltaOnly": true,
            "showBoth": true
          },
          "id": "volume",
          "createdAt": 1700269685372,
          "updatedAt": 1702530630403,
          "series": [
            "volume",
            "gdcnbgkq"
          ],
          "unsavedChanges": false,
          "preview": {},
          "displayName": "Volume",
          "optionsDefinitions": {}
        },
        "orderbook-overlays": {
          "script": "if (!pendingMarkers) {\r\n    // runs only once\r\n    pendingMarkers = []\r\n    spotColor = options.spotColor.match(/\\(([\\d.]+),([\\d.]+),([\\d.]+),?([\\d.]+)?\\)$/).slice(1,5).map(a => +a)\r\n    perpColor = options.perpColor.match(/\\(([\\d.]+),([\\d.]+),([\\d.]+),?([\\d.]+)?\\)$/).slice(1,5).map(a => +a)\r\n    binanceColor = options.binanceColor.match(/\\(([\\d.]+),([\\d.]+),([\\d.]+),?([\\d.]+)?\\)$/).slice(1,5).map(a => +a)\r\n    coinbaseColor = options.coinbaseColor.match(/\\(([\\d.]+),([\\d.]+),([\\d.]+),?([\\d.]+)?\\)$/).slice(1,5).map(a => +a)\r\n    //allOnColor = options.allOnColor.match(/\\(([\\d.]+),([\\d.]+),([\\d.]+),?([\\d.]+)?\\)$/).slice(1,5).map(a => +a)\r\n\r\n    spotOpacity = spotColor.pop()\r\n    perpOpacity = perpColor.pop()\r\n    binanceOpacity = binanceColor.pop()\r\n    coinbaseOpacity = coinbaseColor.pop()\r\n   // allOnColorOpacity = allOnColor.pop()\r\n\r\n    startOpacity = options.startOpacity || 0.1\r\n  \r\n    spotBuyAlerts  = [40, 63, 46, 60]\r\n    spotSellAlerts = [-40, -63, -46, -60]\r\n\r\n    perpBuyAlerts  = [38, 27, 36, 35]\r\n    perpSellAlerts = [-20, -27, -36, -35]\r\n\r\n    binanceBuyAlerts  = [70, 70, 70, 70]\r\n    binanceSellAlerts = [-70, -70, -70, -70]\r\n\r\n    coinbaseBuyAlerts  = [50, 50, 50, 50]\r\n    coinbaseSellAlerts = [-50, -50, -50, -50]\r\n\r\n    alerts = {\r\n      spot: {\r\n        buy: spotBuyAlerts,\r\n        sell: spotSellAlerts\r\n      },\r\n      perp: {\r\n        buy: perpBuyAlerts,\r\n        sell: perpSellAlerts\r\n      },\r\n      binance: {\r\n        buy: binanceBuyAlerts,\r\n        sell: binanceSellAlerts\r\n      },\r\n      coinbase: {\r\n        buy: coinbaseBuyAlerts,\r\n        sell: coinbaseSellAlerts\r\n      }\r\n    }\r\n\r\n    whichColors = {\r\n      spot: spotColor,\r\n      perp: perpColor,\r\n      binance: binanceColor,\r\n      coinbase: coinbaseColor\r\n    }\r\n\r\n    allOnIndicator = options.toggleAllOnIndicator || false,\r\n\r\n    showType = {\r\n      spot: options.toggleSpot,\r\n      perp: options.togglePerp,\r\n      binance: options.toggleBinance,\r\n      coinbase: options.toggleCoinbase,\r\n    }\r\n\r\n    lowerPercent = [0.3, 1, 2.5, 5]\r\n    upperPercent = [1, 2.5, 5, 10]  \r\n\r\n  }\r\n  // </STARTUP SCRIPT> \r\n\r\n  var ratiosPerp = ORDERBOOK:AGGRPERP-BTCUSDLEVELS.zratios\r\n  var ratiosSpot = ORDERBOOK:AGGRSPOT-BTCUSDLEVELS.zratios \r\n  var ratiosBinance = renderer.sources['ORDERBOOK:BINANCE-BTCUSDTLEVELS'] && renderer.sources['ORDERBOOK:BINANCE-BTCUSDTLEVELS'].zratios\r\n  var ratiosCoinbase = renderer.sources['ORDERBOOK:COINBASE-BTCUSDLEVELS'] && renderer.sources['ORDERBOOK:COINBASE-BTCUSDLEVELS'].zratios \r\n\r\n  var m = [\r\n    { which: 'perp', ratios: ratiosPerp || [], bands: [] },\r\n    { which: 'spot', ratios: ratiosSpot || [], bands: [] },\r\n    { which: 'binance', ratios: ratiosBinance || [], bands: [] },\r\n    { which: 'coinbase', ratios: ratiosCoinbase || [], bands: [] }\r\n  ]\r\n  \r\n  /*var ratiosPerp = ORDERBOOK:AGGRPERP-BTCUSDLEVELS.zratios\r\n  var ratiosSpot = ORDERBOOK:AGGRSPOT-BTCUSDLEVELS.zratios \r\n  var ratiosBinance = renderer.sources['ORDERBOOK:BINANCE-BTCUSDTLEVELS'].zratios\r\n  var ratiosCoinbase = renderer.sources['ORDERBOOK:COINBASE-BTCUSDLEVELS'].zratios \r\n\r\n  var perps = []\r\n  var spots = []\r\n  var binance = []\r\n  var coinbase = []\r\n*/\r\n  //var ratio = 0\r\n\r\n  // for each ratio\r\n  for(let ratioIndex = 0; ratioIndex < 4; ratioIndex++){\r\n\r\n    var allOn = true;\r\n\r\n    // for each type (perp, spot, binance, ...)\r\n    for(let typeIndex = 0; typeIndex < 4; typeIndex++){\r\n\r\n      var c = m[typeIndex]\r\n\r\n      if( showType[c.which]  === false ){\r\n        c.bands.push([0, 0, '']) \r\n        continue\r\n      }\r\n        \r\n      /*\r\n      var ratioPerp = ratiosPerp && ratiosPerp.length > ratioIndex && ratiosPerp[ratioIndex]\r\n      var ratioSpot =  ratiosSpot && ratiosSpot.length > ratioIndex && ratiosSpot[ratioIndex]\r\n      var ratioBinance =  ratiosBinance && ratiosBinance.length > ratioIndex && ratiosBinance[ratioIndex]\r\n      var ratioCoinbase =  ratiosCoinbase && ratiosCoinbase.length > ratioIndex && ratiosCoinbase[ratioIndex]\r\n      */\r\n      var ratio = c.ratios.length && c.ratios[ratioIndex]\r\n      var direction = Math.sign(ratio)\r\n      var buyAlert = alerts[c.which]['buy'][ratioIndex]\r\n      var sellAlert = alerts[c.which]['buy'][ratioIndex]\r\n      var threshold = direction > 0 ? buyAlert : sellAlert\r\n      var thresholdAbs = Math.abs(threshold)\r\n    \r\n      var lower = $price.close + -1 * direction * (($price.close  * lowerPercent[ratioIndex]) / 100)  \r\n      var upper = $price.close + -1 * direction * (($price.close  * upperPercent[ratioIndex]) / 100)\r\n\r\n      if( !ratio || Math.abs(ratio) < thresholdAbs ){\r\n          allOn = false\r\n          c.bands.push([0, 0, '']) \r\n      }else{\r\n\r\n          var alphaRatio = Math.abs(ratio) < thresholdAbs ? 0 : startOpacity + (1 - startOpacity) * ((Math.abs(ratio) - thresholdAbs) / (100 - thresholdAbs))\r\n          var alphaRatioRounded = Math.round(alphaRatio * 100) / 100 \r\n          var colorRatio = 'rgba(' + whichColors[c.which].join(',') + ',' + alphaRatioRounded + ')'\r\n          \r\n          c.bands.push([lower, upper, colorRatio])\r\n      }\r\n      \r\n    }// end for each type\r\n\r\n    if( allOnIndicator && allOn ){\r\n      for(let typeIndex = 0; typeIndex < 4; typeIndex++){\r\n        var c = m[typeIndex]\r\n        c.bands[ratioIndex] = [lower, upper, options.allOnColor]\r\n      }\r\n    }\r\n\r\n  } // end for each ratios\r\n\r\n\r\nvar i = 0\r\n\r\nfor(let ratioIndex = 0; ratioIndex < 4; ratioIndex++){\r\n\r\n    for(let typeIndex = 0; typeIndex < 4; typeIndex++){\r\n\r\n       var c = m[typeIndex]\r\n    \r\n       if( c.bands.length && c.bands[ratioIndex][0] !== 0 ) {\r\n         renderer.indicators[indicatorId].series[i] = {\r\n          time: time, \r\n          lowerValue: c.bands[ratioIndex][0],\r\n          higherValue: c.bands[ratioIndex][1],\r\n          color:  c.bands[ratioIndex][2]\r\n        }\r\n      }\r\n      i++\r\n    }\r\n}\r\n\r\n\r\n\r\nreturn\r\n//perp\r\nbrokenarea({\r\n        time: time, \r\n        lowerValue: 0,\r\n        higherValue: 0,\r\n        color:  options.color\r\n      })\r\nbrokenarea({\r\n        time: time, \r\n        lowerValue: 0,\r\n        higherValue: 0,\r\n        color:  options.color\r\n      })\r\nbrokenarea({\r\n        time: time, \r\n        lowerValue: 0,\r\n        higherValue: 0,\r\n        color:  options.color\r\n      })\r\nbrokenarea({\r\n        time: time, \r\n        lowerValue: 0,\r\n        higherValue: 0,\r\n        color:  options.color\r\n      })     \r\n      brokenarea({\r\n        time: time, \r\n        lowerValue: 0,\r\n        higherValue: 0,\r\n        color:  options.color\r\n      })\r\nbrokenarea({\r\n        time: time, \r\n        lowerValue: 0,\r\n        higherValue: 0,\r\n        color:  options.color\r\n      })\r\nbrokenarea({\r\n        time: time, \r\n        lowerValue: 0,\r\n        higherValue: 0,\r\n        color:  options.color\r\n      })\r\nbrokenarea({\r\n        time: time, \r\n        lowerValue: 0,\r\n        higherValue: 0,\r\n        color:  options.color\r\n      })   \r\n      brokenarea({\r\n        time: time, \r\n        lowerValue: 0,\r\n        higherValue: 0,\r\n        color:  options.color\r\n      })\r\nbrokenarea({\r\n        time: time, \r\n        lowerValue: 0,\r\n        higherValue: 0,\r\n        color:  options.color\r\n      })\r\nbrokenarea({\r\n        time: time, \r\n        lowerValue: 0,\r\n        higherValue: 0,\r\n        color:  options.color\r\n      })\r\nbrokenarea({\r\n        time: time, \r\n        lowerValue: 0,\r\n        higherValue: 0,\r\n        color:  options.color\r\n      })   \r\n      brokenarea({\r\n        time: time, \r\n        lowerValue: 0,\r\n        higherValue: 0,\r\n        color:  options.color\r\n      })\r\nbrokenarea({\r\n        time: time, \r\n        lowerValue: 0,\r\n        higherValue: 0,\r\n        color:  options.color\r\n      })\r\nbrokenarea({\r\n        time: time, \r\n        lowerValue: 0,\r\n        higherValue: 0,\r\n        color:  options.color\r\n      })\r\nbrokenarea({\r\n        time: time, \r\n        lowerValue: 0,\r\n        higherValue: 0,\r\n        color:  options.color\r\n      })",
          "id": "orderbook-overlays",
          "name": "Orderbook Overlays",
          "options": {
            "priceScaleId": "right",
            "startOpacity": null,
            "allOnColor": "rgb(242,54,69)",
            "binanceColor": "rgb(255,255,255)",
            "perpColor": "rgb(41,98,255)",
            "spotColor": "rgb(255,235,59)",
            "scaleMargins": {
              "top": 0.3,
              "bottom": 0.32
            },
            "coinbaseColor": "rgb(247,124,128)",
            "visible": false,
            "priceFormat": {
              "type": "price",
              "precision": 1,
              "minMove": 0.1,
              "auto": true
            },
            "toggleSpot": false,
            "togglePerp": false,
            "toggleBinance": true,
            "toggleCoinbase": false,
            "toggleAllOnIndicator": null
          },
          "description": null,
          "createdAt": 1703135778962,
          "updatedAt": 1703135778962,
          "unsavedChanges": true,
          "optionsDefinitions": {},
          "series": [
            "orderbook-overlays copy 1",
            "uhd1zpf9",
            "domyzio3",
            "x1wkji4k",
            "8hhza57r",
            "hvi8cb2d",
            "quvewkyv",
            "1y8jte9b",
            "15a2vh8z",
            "0g85t1xt",
            "4pxlzxj2",
            "k86pqxux",
            "dhe836fl",
            "wbtlgc0w",
            "dmkdwcuy",
            "mb41abtr"
          ],
          "displayName": "Orderbook Overlays"
        },
        "orderbook-overlays-copy-2": {
          "script": "if (!pendingMarkers) {\r\n    // runs only once\r\n    pendingMarkers = []\r\n    spotColor = options.spotColor.match(/\\(([\\d.]+),([\\d.]+),([\\d.]+),?([\\d.]+)?\\)$/).slice(1,5).map(a => +a)\r\n    perpColor = options.perpColor.match(/\\(([\\d.]+),([\\d.]+),([\\d.]+),?([\\d.]+)?\\)$/).slice(1,5).map(a => +a)\r\n    binanceColor = options.binanceColor.match(/\\(([\\d.]+),([\\d.]+),([\\d.]+),?([\\d.]+)?\\)$/).slice(1,5).map(a => +a)\r\n    coinbaseColor = options.coinbaseColor.match(/\\(([\\d.]+),([\\d.]+),([\\d.]+),?([\\d.]+)?\\)$/).slice(1,5).map(a => +a)\r\n    bitmexColor = options.bitmexColor.match(/\\(([\\d.]+),([\\d.]+),([\\d.]+),?([\\d.]+)?\\)$/).slice(1, 5).map(a => +a);\r\n\r\n    //allOnColor = options.allOnColor.match(/\\(([\\d.]+),([\\d.]+),([\\d.]+),?([\\d.]+)?\\)$/).slice(1,5).map(a => +a)\r\n\r\n    spotOpacity = spotColor.pop()\r\n    perpOpacity = perpColor.pop()\r\n    binanceOpacity = binanceColor.pop()\r\n    coinbaseOpacity = coinbaseColor.pop()\r\n    bitmexOpacity = bitmexColor.pop()\r\n   // allOnColorOpacity = allOnColor.pop()\r\n\r\n    startOpacity = options.startOpacity || 0.1\r\n  \r\n    spotBuyAlerts  = [40, 63, 46, 60]\r\n    spotSellAlerts = [-40, -63, -46, -60]\r\n\r\n    perpBuyAlerts  = [38, 27, 36, 35]\r\n    perpSellAlerts = [-20, -27, -36, -35]\r\n\r\n    binanceBuyAlerts  = [70, 70, 70, 70]\r\n    binanceSellAlerts = [-70, -70, -70, -70]\r\n\r\n    coinbaseBuyAlerts  = [50, 50, 50, 50]\r\n    coinbaseSellAlerts = [-50, -70, -65, -50]\r\n\r\n    bitmexBuyAlerts  = [-50, -60, -50, -50]\r\n    bitmexSellAlerts = [-50, -60, -50, -50]\r\n\r\n    alerts = {\r\n      spot: {\r\n        buy: spotBuyAlerts,\r\n        sell: spotSellAlerts\r\n      },\r\n      perp: {\r\n        buy: perpBuyAlerts,\r\n        sell: perpSellAlerts\r\n      },\r\n      binance: {\r\n        buy: binanceBuyAlerts,\r\n        sell: binanceSellAlerts\r\n      },\r\n      coinbase: {\r\n        buy: coinbaseBuyAlerts,\r\n        sell: coinbaseSellAlerts\r\n      },\r\n        bitmex: {\r\n            buy: bitmexBuyAlerts,\r\n            sell: bitmexSellAlerts\r\n        }\r\n    }\r\n\r\n    whichColors = {\r\n      spot: spotColor,\r\n      perp: perpColor,\r\n      binance: binanceColor,\r\n      coinbase: coinbaseColor,\r\n      bitmex: bitmexColor\r\n    }\r\n\r\n    allOnIndicator = options.toggleAllOnIndicator || false,\r\n\r\n    showType = {\r\n      spot: options.toggleSpot,\r\n      perp: options.togglePerp,\r\n      binance: options.toggleBinance,\r\n      coinbase: options.toggleCoinbase,\r\n      bitmex: options.toggleBitmex\r\n    }\r\n\r\n    showBand = [\r\n        options.toggleBand1 || false,\r\n        options.toggleBand2 || false,\r\n        options.toggleBand3 || false,\r\n        options.toggleBand4 || false,\r\n    ]\r\n\r\n    lowerPercent = [options.band0lowerPercent || 0.11, 1, 2.5, 5]\r\n    upperPercent = [1, 2.5, 5, 10]  \r\n\r\n  }\r\n  // </STARTUP SCRIPT> \r\n\r\n  var ratiosPerp = ORDERBOOK:AGGRPERP-BTCUSD.zratios\r\n  var ratiosSpot = ORDERBOOK:AGGRSPOT-BTCUSD.zratios \r\n  var ratiosBinance = renderer.sources['ORDERBOOK:BINANCE-BTCUSDT'] && renderer.sources['ORDERBOOK:BINANCE-BTCUSDT'].zratios\r\n  var ratiosCoinbase = renderer.sources['ORDERBOOK:COINBASE-BTCUSD'] && renderer.sources['ORDERBOOK:COINBASE-BTCUSD'].zratios \r\n  var ratiosBitmex = renderer.sources['ORDERBOOK:BITMEX-XBTUSD'] && renderer.sources['ORDERBOOK:BITMEX-XBTUSD'].zratios\r\n\r\n  var m = [\r\n      { which: 'perp', ratios: ratiosPerp || [], bands: [] },\r\n      { which: 'spot', ratios: ratiosSpot || [], bands: [] },\r\n      { which: 'binance', ratios: ratiosBinance || [], bands: [] },\r\n      { which: 'coinbase', ratios: ratiosCoinbase || [], bands: [] },\r\n      { which: 'bitmex', ratios: ratiosBitmex || [], bands: [] }\r\n  ];\r\n\r\n  // for each ratio\r\n  for(let ratioIndex = 0; ratioIndex < 4; ratioIndex++){\r\n\r\n    // TODO must be same direction\r\n    var allOn = true;\r\n\r\n    // for each type (perp, spot, binance, ...)\r\n    for(let typeIndex = 0; typeIndex < m.length; typeIndex++){\r\n\r\n      var c = m[typeIndex]\r\n\r\n      if( showBand[ratioIndex] === false || showType[c.which]  === false ){\r\n        c.bands.push([0, 0, '']) \r\n        continue\r\n      }\r\n        \r\n      var ratio = c.ratios.length && c.ratios[ratioIndex]\r\n      var direction = Math.sign(ratio)\r\n      var buyAlert = alerts[c.which]['buy'][ratioIndex]\r\n      var sellAlert = alerts[c.which]['sell'][ratioIndex]\r\n      var threshold = direction > 0 ? buyAlert : sellAlert\r\n      var thresholdAbs = Math.abs(threshold)\r\n    \r\n      var lower = $price.close + -1 * direction * (($price.close  * lowerPercent[ratioIndex]) / 100)  \r\n      var upper = $price.close + -1 * direction * (($price.close  * upperPercent[ratioIndex]) / 100)\r\n\r\n      if( !ratio || Math.abs(ratio) < thresholdAbs ){\r\n          allOn = false\r\n          c.bands.push([0, 0, '']) \r\n      }else{\r\n\r\n          var alphaRatio = Math.abs(ratio) < thresholdAbs ? 0 : startOpacity + (1 - startOpacity) * ((Math.abs(ratio) - thresholdAbs) / (100 - thresholdAbs))\r\n          var alphaRatioRounded = Math.round(alphaRatio * 100) / 100 \r\n          var colorRatio = 'rgba(' + whichColors[c.which].join(',') + ',' + alphaRatioRounded + ')'\r\n          \r\n          c.bands.push([lower, upper, colorRatio])\r\n      }\r\n      \r\n    }// end for each type\r\n\r\n    if( allOnIndicator && allOn ){\r\n      for(let typeIndex = 0; typeIndex < 4; typeIndex++){\r\n        var c = m[typeIndex]\r\n        c.bands[ratioIndex] = [lower, upper, options.allOnColor]\r\n      }\r\n    }\r\n\r\n  } // end for each ratios\r\n\r\n\r\nvar i = 0\r\n\r\nfor(let ratioIndex = 0; ratioIndex < 4; ratioIndex++){\r\n\r\n    if( showBand[ratioIndex] === false ){\r\n      i = i + m.length\r\n      continue\r\n    }\r\n\r\n    for(let typeIndex = 0; typeIndex < m.length; typeIndex++){\r\n\r\n       var c = m[typeIndex]\r\n    \r\n       if( c.bands.length && c.bands[ratioIndex][0] !== 0 ) {\r\n         renderer.indicators[indicatorId].series[i] = {\r\n          time: time, \r\n          lowerValue: c.bands[ratioIndex][0],\r\n          higherValue: c.bands[ratioIndex][1],\r\n          color:  c.bands[ratioIndex][2]\r\n        }\r\n      }\r\n\r\n      i++\r\n    }\r\n}\r\n\r\n\r\n\r\nreturn\r\n//perp\r\nbrokenarea({\r\n        time: time, \r\n        lowerValue: 0,\r\n        higherValue: 0,\r\n        color:  options.color\r\n      })\r\nbrokenarea({\r\n        time: time, \r\n        lowerValue: 0,\r\n        higherValue: 0,\r\n        color:  options.color\r\n      })\r\nbrokenarea({\r\n        time: time, \r\n        lowerValue: 0,\r\n        higherValue: 0,\r\n        color:  options.color\r\n      })\r\nbrokenarea({\r\n        time: time, \r\n        lowerValue: 0,\r\n        higherValue: 0,\r\n        color:  options.color\r\n      })     \r\n      brokenarea({\r\n        time: time, \r\n        lowerValue: 0,\r\n        higherValue: 0,\r\n        color:  options.color\r\n      })\r\nbrokenarea({\r\n        time: time, \r\n        lowerValue: 0,\r\n        higherValue: 0,\r\n        color:  options.color\r\n      })\r\nbrokenarea({\r\n        time: time, \r\n        lowerValue: 0,\r\n        higherValue: 0,\r\n        color:  options.color\r\n      })\r\nbrokenarea({\r\n        time: time, \r\n        lowerValue: 0,\r\n        higherValue: 0,\r\n        color:  options.color\r\n      })   \r\n      brokenarea({\r\n        time: time, \r\n        lowerValue: 0,\r\n        higherValue: 0,\r\n        color:  options.color\r\n      })\r\nbrokenarea({\r\n        time: time, \r\n        lowerValue: 0,\r\n        higherValue: 0,\r\n        color:  options.color\r\n      })\r\nbrokenarea({\r\n        time: time, \r\n        lowerValue: 0,\r\n        higherValue: 0,\r\n        color:  options.color\r\n      })\r\nbrokenarea({\r\n        time: time, \r\n        lowerValue: 0,\r\n        higherValue: 0,\r\n        color:  options.color\r\n      })   \r\n      brokenarea({\r\n        time: time, \r\n        lowerValue: 0,\r\n        higherValue: 0,\r\n        color:  options.color\r\n      })\r\nbrokenarea({\r\n        time: time, \r\n        lowerValue: 0,\r\n        higherValue: 0,\r\n        color:  options.color\r\n      })\r\nbrokenarea({\r\n        time: time, \r\n        lowerValue: 0,\r\n        higherValue: 0,\r\n        color:  options.color\r\n      })\r\nbrokenarea({\r\n        time: time, \r\n        lowerValue: 0,\r\n        higherValue: 0,\r\n        color:  options.color\r\n      })\r\n            brokenarea({\r\n        time: time, \r\n        lowerValue: 0,\r\n        higherValue: 0,\r\n        color:  options.color\r\n      })\r\nbrokenarea({\r\n        time: time, \r\n        lowerValue: 0,\r\n        higherValue: 0,\r\n        color:  options.color\r\n      })\r\nbrokenarea({\r\n        time: time, \r\n        lowerValue: 0,\r\n        higherValue: 0,\r\n        color:  options.color\r\n      })\r\nbrokenarea({\r\n        time: time, \r\n        lowerValue: 0,\r\n        higherValue: 0,\r\n        color:  options.color\r\n      })",
          "id": "orderbook-overlays-copy-2",
          "name": "Orderbook Overlays copy 2",
          "options": {
            "priceScaleId": "right",
            "startOpacity": null,
            "allOnColor": "rgb(242,54,69)",
            "binanceColor": "rgb(255,255,255)",
            "perpColor": "rgb(41,98,255)",
            "spotColor": "rgb(255,235,59)",
            "scaleMargins": {
              "top": 0.3,
              "bottom": 0.32
            },
            "coinbaseColor": "rgb(247,124,128)",
            "visible": true,
            "priceFormat": {
              "type": "price",
              "precision": 1,
              "minMove": 0.1,
              "auto": true
            },
            "toggleSpot": false,
            "togglePerp": false,
            "toggleBinance": false,
            "toggleCoinbase": false,
            "toggleAllOnIndicator": false,
            "toggleBitmex": true,
            "bitmexColor": "rgb(149,117,205)",
            "toggleBand1": true,
            "toggleBand2": true,
            "toggleBand3": true,
            "toggleBand4": true,
            "band0lowerPercent": null
          },
          "description": null,
          "unsavedChanges": true,
          "optionsDefinitions": {},
          "series": [
            "orderbook-overlays-copy-2",
            "5u44bigl",
            "kgo4lk7v",
            "puvulo2t",
            "ire6hbcq",
            "diihqoqp",
            "3q9dfwqo",
            "9thrdqnw",
            "jl0tnkkp",
            "b46gna2x",
            "0l3cnmt5",
            "rqluaqvf",
            "qk1hsgk4",
            "kvr7tqkj",
            "18quvybr",
            "o3fx7y9r",
            "k342chda",
            "swf136se",
            "dyx1w69m",
            "i0u5soqq"
          ],
          "displayName": "Orderbook Overlays copy 2"
        },
        "obv-perps copy 1": {
          "script": "if (markers === 0) {\r\n  // first script execution (0 is default values for all persistent variables)\r\n\r\n  // create a var to store already drawn markers\r\n  markers = []\r\n\r\n  // contain the last marker that can change as the bar update\r\n  repaintableMarker = null\r\n\r\n  // if candle body has a price percent change less than bodyPercentWatch, we start a refinement\r\n  bodyPercentWatch = options.bodyPercentWatch || 0.3\r\n\r\n  // if a wick is x times greater than the other, we might use it to refine change the side\r\n  wickRatioThreshold = options.wickRatioThreshold || 1.5\r\n\r\n  // paint a marker when OBV has been refined (changed of direction)\r\n  toggleDebug = options.toggleDebug || false\r\n\r\n  // when on, we calculate the wick percent difference and keep only that volume to add to OBV \r\n  toggleVolumeWick = options.toggleVolumeWick || false\r\n\r\n  togglePrintNormalObv = options.togglePrintNormalObv || false\r\n}\r\nif (repaintableMarker && repaintableMarker.time < time) {\r\n  // bar is +1 since active marker was added, lock it in the array\r\n  markers.push(repaintableMarker)\r\n\r\n  // free up active marker\r\n  repaintableMarker = null\r\n}\r\n\r\nvar newMarker = null\r\nvar _vbuy = source(vbuy, type=perp)\r\nvar _vsell = source(vsell, type=perp)\r\nvar _open = $price.open\r\nvar _high = $price.high\r\nvar _low = $price.low\r\nvar _close = $price.close\r\n\r\nvar sign = _close > _open ? 1 : -1\r\nvar volume = _vbuy + _vsell\r\n\r\nvar bodySize = Math.abs(_close - _open);\r\nvar priceChange = (_close - _open) / _open; // Percentage change\r\n\r\nif( togglePrintNormalObv ){\r\n    plotline(cum(sign * volume), title=\"Original\", color=options.originalObvColor)\r\n}\r\n\r\nvar improved = false\r\n\r\n// Check if price change is less than 0.4%\r\nif (Math.abs(priceChange) < bodyPercentWatch/100 ) {\r\n    var upperWickSize = _high - _close;\r\n    var lowerWickSize = _close - _low;\r\n\r\n    // Calculate the thresholds\r\n    var upperWickThreshold = wickRatioThreshold * lowerWickSize;\r\n    var lowerWickThreshold = wickRatioThreshold * upperWickSize;\r\n\r\n    // Check if upper and lower wicks have similar sizes\r\n    if (upperWickSize < upperWickThreshold && lowerWickSize < lowerWickThreshold) {\r\n        // Neutral move, don't add volume\r\n        sign = 0\r\n        improved = true\r\n    }else{\r\n        // Calculate the thresholds\r\n        var upperWickThreshold = wickRatioThreshold * lowerWickSize;\r\n        var lowerWickThreshold = wickRatioThreshold * upperWickSize;\r\n\r\n        // Determine the side based on wick sizes\r\n        // upper: 500, lower 100\r\n        if (upperWickSize > upperWickThreshold) {\r\n            improved = sign !== -1\r\n            // More selling happened, add volume as negative\r\n            sign = -1\r\n            if( toggleVolumeWick ) {\r\n                improved = true\r\n                var percentageDifference = ((upperWickSize - lowerWickSize) / upperWickSize);\r\n                volume = percentageDifference * volume\r\n            }\r\n        } else if (lowerWickSize > lowerWickThreshold) {\r\n            improved = sign !== 1\r\n            // More buying happened, add volume as positive\r\n            sign = 1\r\n            if( toggleVolumeWick ) {\r\n                improved = true\r\n                var percentageDifference = ((lowerWickSize - upperWickSize) / lowerWickSize);\r\n                volume = percentageDifference * volume\r\n            }\r\n        }\r\n    }\r\n\r\n    if( improved && toggleDebug){\r\n        if (sign == -1) {\r\n            // newMarker is a temporary variable (not included in the indicator state)\r\n            // to avoid it being treated as persistent variable we wrap it inside parenthesis\r\n            (newMarker) = {\r\n                time: time,\r\n                position: 'aboveBar',\r\n                color: 'red',\r\n                shape: 'arrowDown'\r\n            }\r\n        }\r\n\r\n        if (sign == 1) {\r\n            (newMarker) = {\r\n                time: time,\r\n                position: 'belowBar',\r\n                color: 'lime',\r\n                shape: 'arrowUp'\r\n            }\r\n        } \r\n    }\r\n}\r\n\r\n\r\nif (newMarker || (repaintableMarker && !newMarker)) {\r\n  // override persistent variable repaintable marker\r\n  repaintableMarker = newMarker\r\n  \r\n  var index = togglePrintNormalObv ? 1 : 0\r\n\r\n  if (series[index].setMarkers) {\r\n    series[index].setMarkers(markers.concat(repaintableMarker))\r\n  }\r\n}\r\n\r\nvar obv = cum(sign * volume)\r\nplotline(obv, title=\"P\", color=options.refinedObvColor)",
          "id": "obv-perps copy 1",
          "name": "OBV perps",
          "options": {
            "priceScaleId": "obv",
            "visible": false,
            "scaleMargins": {
              "top": 0.64,
              "bottom": 0
            },
            "lineStyle": 0,
            "color": "rgb(41,98,255)",
            "lineWidth": 1,
            "bodyPercentWatch": 0.3,
            "wickRatioThreshold": 1.5,
            "toggleDebug": false,
            "toggleVolumeWick": false,
            "togglePrintNormalObv": false,
            "refinedObvColor": "rgb(255,235,59)",
            "originalObvColor": "rgb(255,255,255)"
          },
          "description": null,
          "createdAt": 1701126013797,
          "updatedAt": 1703139757977,
          "unsavedChanges": false,
          "optionsDefinitions": {},
          "displayName": "OBV perps",
          "series": [
            "obv-perps copy 1",
            "0nvkx857"
          ]
        }
      },
      "indicatorOrder": [
        "cvd",
        "liquidations",
        "price",
        "volume",
        "orderbook-overlays",
        "orderbook-overlays-copy-2",
        "obv-perps copy 1"
      ],
      "priceScales": {
        "right": {
          "scaleMargins": {
            "top": 0.3,
            "bottom": 0.32
          },
          "priceFormat": {
            "precision": 1,
            "minMove": 0.1
          },
          "indicators": [
            "Price"
          ]
        },
        "cvd": {
          "scaleMargins": {
            "top": 0.73,
            "bottom": 0.07
          },
          "indicators": [
            "CVD"
          ]
        },
        "volume_liquidations": {
          "scaleMargins": {
            "top": 0,
            "bottom": 0.96
          }
        },
        "volume": {
          "scaleMargins": {
            "top": 0.87,
            "bottom": 0
          },
          "indicators": [
            "Volume"
          ]
        },
        "obv-copy-1": {
          "scaleMargins": {
            "top": 0.73,
            "bottom": 0.07
          },
          "indicators": [
            "OBV spots"
          ]
        },
        "obv": {
          "scaleMargins": {
            "top": 0.64,
            "bottom": 0
          }
        }
      },
      "layouting": false,
      "showIndicators": true,
      "timeframe": "900",
      "refreshRate": 10000,
      "showAlerts": true,
      "showAlertsLabel": true,
      "showLegend": false,
      "fillGapsWithEmpty": true,
      "showHorizontalGridlines": false,
      "horizontalGridlinesColor": "rgba(255,255,255,.1)",
      "showVerticalGridlines": false,
      "verticalGridlinesColor": "rgba(255,255,255,.1)",
      "showWatermark": true,
      "watermarkColor": "rgba(255,255,255,.1)",
      "showBorder": true,
      "borderColor": null,
      "showLeftScale": false,
      "showRightScale": true,
      "showTimeScale": true,
      "hiddenMarkets": {},
      "barSpacing": 3.004553520265834,
      "_id": "chart copy 4"
    }
  }
}