{
  "version": 7,
  "createdAt": 1738713999903,
  "updatedAt": 1747090975717,
  "name": "aggr-view",
  "id": "aggr-view",
  "states": {
    "panes": {
      "_id": "panes",
      "locked": false,
      "layout": [
        {
          "i": "chart",
          "type": "chart",
          "y": 1,
          "x": 0,
          "w": 13,
          "h": 23,
          "moved": false
        },
        {
          "i": "chart copy 1",
          "type": "chart",
          "y": 0,
          "x": 13,
          "w": 11,
          "h": 14,
          "moved": false
        },
        {
          "i": "website",
          "type": "website",
          "y": 18,
          "x": 18,
          "w": 4,
          "h": 6,
          "moved": false
        },
        {
          "i": "chart copy 4",
          "type": "chart",
          "y": 14,
          "x": 13,
          "w": 5,
          "h": 10,
          "moved": false
        },
        {
          "i": "chart copy 3",
          "type": "chart",
          "y": 14,
          "x": 18,
          "w": 4,
          "h": 4,
          "moved": false
        },
        {
          "i": "trades",
          "type": "trades",
          "x": 22,
          "y": 16,
          "w": 2,
          "h": 7,
          "moved": false
        },
        {
          "i": "website copy 1",
          "type": "website",
          "x": 0,
          "y": 0,
          "w": 13,
          "h": 1,
          "moved": false
        },
        {
          "i": "prices",
          "type": "prices",
          "x": 22,
          "y": 23,
          "w": 2,
          "h": 1,
          "moved": false
        },
        {
          "i": "website copy 2",
          "type": "website",
          "x": 0,
          "y": 24,
          "w": 13,
          "h": 22,
          "moved": false
        },
        {
          "i": "counters",
          "type": "counters",
          "x": 22,
          "y": 14,
          "w": 2,
          "h": 1,
          "moved": false
        },
        {
          "i": "counters copy 1",
          "type": "counters",
          "x": 22,
          "y": 15,
          "w": 2,
          "h": 1,
          "moved": false
        }
      ],
      "panes": {
        "chart": {
          "id": "chart",
          "name": "",
          "type": "chart",
          "markets": [
            "BINANCE_FUTURES:btcusd_perp",
            "BINANCE_FUTURES:btcusdt",
            "BINANCE:btcfdusd",
            "BINANCE:btcusdt",
            "BITFINEX:BTCUSD",
            "BYBIT:BTCUSDT",
            "BYBIT:BTCUSDT-SPOT",
            "COINBASE:BTC-USD",
            "COINBASE:BTC-USDT",
            "OKEX:BTC-USD-SWAP",
            "ORDERBOOK:AGGROI-BTCUSD",
            "ORDERBOOK:AGGRPERP-BTCUSD",
            "ORDERBOOK:AGGRSPOT-BTCUSD",
            "ORDERBOOK:AGGRSPOT-BTCUSDALERTS",
            "ORDERBOOK:BINANCE-BTCUSDT",
            "ORDERBOOK:BITMEX-XBTUSD",
            "ORDERBOOK:COINBASE-BTCUSD"
          ],
          "zoom": 0.9383764266967773
        },
        "chart copy 1": {
          "id": "chart copy 1",
          "name": "",
          "type": "chart",
          "markets": [
            "BINANCE_FUTURES:btcusdt",
            "BINANCE:btctusd",
            "BINANCE:btcusdt",
            "BITFINEX:BTCUSD",
            "BYBIT:BTCUSDT",
            "COINBASE:BTC-USD",
            "COINBASE:BTC-USDC",
            "COINBASE:BTC-USDT",
            "OKEX:BTC-USD-SWAP",
            "ORDERBOOK:AGGRLS-BTCUSD",
            "ORDERBOOK:AGGROI-BTCUSD",
            "ORDERBOOK:AGGRPERP-BTCUSD",
            "ORDERBOOK:AGGRSPOT-BTCUSD"
          ],
          "zoom": 0.69140625
        },
        "website": {
          "id": "website",
          "name": "s.tradingview.com",
          "type": "website",
          "zoom": 0.875,
          "markets": []
        },
        "chart copy 4": {
          "id": "chart copy 4",
          "name": "",
          "type": "chart",
          "markets": [
            "BINANCE_FUTURES:btcusd_perp",
            "BINANCE_FUTURES:btcusdt",
            "BINANCE_FUTURES:ethusd_perp",
            "BINANCE_FUTURES:ethusdt",
            "BINANCE:btcfdusd",
            "BINANCE:btctusd",
            "BINANCE:btcusdc",
            "BINANCE:btcusdt",
            "BINANCE:ethfdusd",
            "BINANCE:ethtusd",
            "BINANCE:ethusdt",
            "BITFINEX:BTCF0:USTF0",
            "BITFINEX:BTCUST",
            "BITGET:BTCPERP_CMCBL",
            "BITGET:BTCUSD_DMCBL",
            "BITGET:BTCUSDC",
            "BITGET:BTCUSDT",
            "BITGET:BTCUSDT_UMCBL",
            "BITGET:ETHPERP_CMCBL",
            "BITGET:ETHUSD_DMCBL",
            "BITGET:ETHUSDT",
            "BITGET:ETHUSDT_UMCBL",
            "BYBIT:BTCUSD",
            "BYBIT:BTCUSDC-SPOT",
            "BYBIT:BTCUSDT",
            "BYBIT:BTCUSDT-SPOT",
            "BYBIT:ETHUSDT",
            "BYBIT:ETHUSDT-SPOT",
            "COINBASE:BTC-USD",
            "COINBASE:BTC-USDC",
            "COINBASE:BTC-USDT",
            "COINBASE:ETH-USD",
            "COINBASE:ETH-USDT",
            "OKEX:BTC-USD-SWAP",
            "OKEX:BTC-USDC",
            "OKEX:BTC-USDC-SWAP",
            "OKEX:BTC-USDT",
            "OKEX:BTC-USDT-SWAP",
            "OKEX:ETH-USD-SWAP",
            "OKEX:ETH-USDT",
            "OKEX:ETH-USDT-SWAP",
            "ORDERBOOK:AGGRPERP-BTCUSD",
            "ORDERBOOK:AGGRSPOT-BTCUSD"
          ],
          "zoom": 0.828125
        },
        "chart copy 3": {
          "id": "chart copy 3",
          "name": "",
          "type": "chart",
          "markets": [
            "BINANCE_FUTURES:btcusdt",
            "BINANCE:btcfdusd",
            "BINANCE:btcusdt",
            "BITFINEX:BTCUSD",
            "COINBASE:BTC-USD",
            "COINBASE:BTC-USDT",
            "ORDERBOOK:BINANCE-BTCUSDT",
            "ORDERBOOK:COINBASE-BTCUSD"
          ],
          "zoom": 0.625
        },
        "trades": {
          "id": "trades",
          "name": "",
          "type": "trades",
          "markets": [
            "BINANCE_FUTURES:btcusd_perp",
            "BINANCE_FUTURES:btcusdt",
            "BINANCE:btcfdusd",
            "BINANCE:btcusdt",
            "BYBIT:BTCUSDT",
            "BYBIT:BTCUSDT-SPOT",
            "COINBASE:BTC-USD"
          ],
          "zoom": 0.75
        },
        "website copy 1": {
          "id": "website copy 1",
          "name": "localhost",
          "type": "website",
          "markets": [],
          "zoom": 0.75
        },
        "prices": {
          "id": "prices",
          "name": "",
          "type": "prices",
          "markets": [
            "BINANCE_FUTURES:ethusdt"
          ]
        },
        "website copy 2": {
          "id": "website copy 2",
          "name": "http://localhost:3000/api/orderbook/ratios/table/BTC",
          "type": "website",
          "markets": []
        },
        "counters": {
          "id": "counters",
          "name": "",
          "type": "counters",
          "zoom": 0.75,
          "settings": {
            "granularity": 5000,
            "liquidationsOnly": false,
            "steps": [
              60000,
              300000,
              1800000
            ],
            "count": false
          },
          "markets": [
            "BINANCE_FUTURES:btcusdt",
            "BINANCE:btcusdt",
            "BYBIT:BTCUSDT",
            "COINBASE:BTC-USD",
            "COINBASE:BTC-USDT"
          ]
        },
        "counters copy 1": {
          "id": "counters copy 1",
          "name": "",
          "type": "counters",
          "zoom": 0.75,
          "settings": {
            "granularity": 5000,
            "liquidationsOnly": false,
            "steps": [
              60000,
              300000,
              1800000
            ],
            "count": false
          },
          "markets": [
            "BINANCE_FUTURES:btcusdt",
            "BYBIT:BTCUSDT"
          ]
        }
      },
      "syncedWithParentFrame": []
    },
    "settings": {
      "_id": "settings",
      "preferQuoteCurrencySize": true,
      "aggregationLength": 1000,
      "calculateSlippage": false,
      "wsProxyUrl": null,
      "disableAnimations": true,
      "autoHideHeaders": true,
      "autoHideNames": true,
      "theme": "dark",
      "backgroundColor": "rgb(23,27,41)",
      "textColor": "",
      "buyColor": "rgb(100, 157, 102)",
      "sellColor": "rgb(239, 67, 82)",
      "timezoneOffset": 46800000,
      "useAudio": false,
      "audioVolume": 0.35,
      "audioFilters": {
        "PingPongDelay": true,
        "Compressor": false,
        "Delay": false,
        "HighPassFilter": true,
        "LowPassFilter": false
      },
      "sections": [
        "settings-workspaces",
        "settings-trades",
        "timeframe-minutes",
        "settings-exchanges",
        "search-exchanges",
        "timeframe-seconds",
        "indicator-right-colors",
        "search-quotes",
        "indicator-left-other",
        "settings-other",
        "timeframe-hours",
        "trades-display",
        "trades-thresholds",
        "search-extras",
        "indicator-right-format",
        "trades-liquidations",
        "indicator-right-scale",
        "watchlist-settings-columns",
        "watchlist-settings-extra",
        "watchlist-settings-period",
        "trades-preferences",
        "trades-columns",
        "indicator-left-colors",
        "indicator-right-default",
        "indicator-right-script",
        "indicator-left-script"
      ],
      "searchTypes": {
        "recentSearches": true,
        "historical": false,
        "spots": true,
        "perpetuals": false,
        "futures": false,
        "normalize": false,
        "mergeUsdt": false,
        "recent": false
      },
      "searchQuotes": {
        "OTHERS": false,
        "USD": false,
        "USDT": false,
        "FDUSD": false
      },
      "previousSearchSelections": [
        {
          "label": "BTCUSD+AGGROIBTCUSD+AGGRPERPB...",
          "markets": [
            "BINANCE_FUTURES:btcusd_perp",
            "BINANCE_FUTURES:btcusdt",
            "BINANCE:btcfdusd",
            "BINANCE:btcusdt",
            "BITFINEX:BTCUSD",
            "BYBIT:BTCUSDT",
            "BYBIT:BTCUSDT-SPOT",
            "COINBASE:BTC-USD",
            "COINBASE:BTC-USDT",
            "OKEX:BTC-USD-SWAP",
            "ORDERBOOK:AGGROI-BTCUSD",
            "ORDERBOOK:AGGRPERP-BTCUSD",
            "ORDERBOOK:AGGRSPOT-BTCUSD",
            "ORDERBOOK:AGGRSPOT-BTCUSDALERTS",
            "ORDERBOOK:BINANCE-BTCUSDT",
            "ORDERBOOK:BITMEX-XBTUSD",
            "ORDERBOOK:COINBASE-BTCUSD"
          ],
          "count": 17
        },
        {
          "label": "BTCUSD+AGGROIBTCUSD+AGGRPERPB...",
          "markets": [
            "BINANCE_FUTURES:btcusd_perp",
            "BINANCE_FUTURES:btcusdt",
            "BINANCE:btcfdusd",
            "BINANCE:btcusdt",
            "BITFINEX:BTCUSD",
            "BYBIT:BTCUSDT",
            "BYBIT:BTCUSDT-SPOT",
            "COINBASE:BTC-USD",
            "COINBASE:BTC-USDT",
            "OKEX:BTC-USD-SWAP",
            "ORDERBOOK:AGGROI-BTCUSD",
            "ORDERBOOK:AGGRPERP-BTCUSD",
            "ORDERBOOK:AGGRSPOT-BTCUSD",
            "ORDERBOOK:BINANCE-BTCUSDT",
            "ORDERBOOK:BITMEX-XBTUSD",
            "ORDERBOOK:COINBASE-BTCUSD"
          ],
          "count": 16
        },
        {
          "label": "BTCUSD+AGGRPERPBTCUSD+AGGRSPO...",
          "markets": [
            "BINANCE_FUTURES:btcusd_perp",
            "BINANCE_FUTURES:btcusdt",
            "BINANCE:btcfdusd",
            "BINANCE:btcusdt",
            "BITFINEX:BTCUSD",
            "BYBIT:BTCUSDT",
            "BYBIT:BTCUSDT-SPOT",
            "COINBASE:BTC-USD",
            "COINBASE:BTC-USDT",
            "OKEX:BTC-USD-SWAP",
            "ORDERBOOK:AGGRPERP-BTCUSD",
            "ORDERBOOK:AGGRSPOT-BTCUSD",
            "ORDERBOOK:BINANCE-BTCUSDT",
            "ORDERBOOK:BITMEX-XBTUSD",
            "ORDERBOOK:COINBASE-BTCUSD"
          ],
          "count": 15
        },
        {
          "label": "BTCUSD+AGGRLSBTCUSD+AGGROIBTC...",
          "markets": [
            "BINANCE_FUTURES:btcusdt",
            "BINANCE:btctusd",
            "BINANCE:btcusdt",
            "BITFINEX:BTCUSD",
            "BYBIT:BTCUSDT",
            "COINBASE:BTC-USD",
            "COINBASE:BTC-USDC",
            "COINBASE:BTC-USDT",
            "OKEX:BTC-USD-SWAP",
            "ORDERBOOK:AGGRLS-BTCUSD",
            "ORDERBOOK:AGGROI-BTCUSD",
            "ORDERBOOK:AGGRPERP-BTCUSD",
            "ORDERBOOK:AGGRSPOT-BTCUSD"
          ],
          "count": 13
        },
        {
          "label": "BTCUSD+AGGROIBTCUSD+AGGRPERPB...",
          "markets": [
            "BINANCE_FUTURES:btcusdt",
            "BINANCE:btctusd",
            "BINANCE:btcusdt",
            "BITFINEX:BTCUSD",
            "BYBIT:BTCUSDT",
            "COINBASE:BTC-USD",
            "COINBASE:BTC-USDC",
            "COINBASE:BTC-USDT",
            "OKEX:BTC-USD-SWAP",
            "ORDERBOOK:AGGROI-BTCUSD",
            "ORDERBOOK:AGGRPERP-BTCUSD",
            "ORDERBOOK:AGGRSPOT-BTCUSD"
          ],
          "count": 12
        },
        {
          "label": "BTCUSD+AGGRLSBTCUSD+AGGROIBTC...",
          "markets": [
            "BINANCE_FUTURES:btcusd_perp",
            "BINANCE_FUTURES:btcusdt",
            "BINANCE:btcfdusd",
            "BINANCE:btcusdt",
            "BITFINEX:BTCUSD",
            "BYBIT:BTCUSDT",
            "BYBIT:BTCUSDT-SPOT",
            "COINBASE:BTC-USD",
            "COINBASE:BTC-USDT",
            "OKEX:BTC-USD-SWAP",
            "ORDERBOOK:AGGRLS-BTCUSD",
            "ORDERBOOK:AGGROI-BTCUSD",
            "ORDERBOOK:AGGRPERP-BTCUSD",
            "ORDERBOOK:AGGRSPOT-BTCUSD",
            "ORDERBOOK:AGGRSPOT-BTCUSDALERTS",
            "ORDERBOOK:BINANCE-BTCUSDT",
            "ORDERBOOK:BITMEX-XBTUSD",
            "ORDERBOOK:COINBASE-BTCUSD"
          ],
          "count": 18
        },
        {
          "label": "BTCUSD+ETHUSD+AGGRPERPBTCUSD+...",
          "markets": [
            "BINANCE_FUTURES:btcusd_perp",
            "BINANCE_FUTURES:btcusdt",
            "BINANCE_FUTURES:ethusd_perp",
            "BINANCE_FUTURES:ethusdt",
            "BINANCE:btcfdusd",
            "BINANCE:btctusd",
            "BINANCE:btcusdc",
            "BINANCE:btcusdt",
            "BINANCE:ethfdusd",
            "BINANCE:ethtusd",
            "BINANCE:ethusdt",
            "BITFINEX:BTCF0:USTF0",
            "BITFINEX:BTCUST",
            "BITGET:BTCPERP_CMCBL",
            "BITGET:BTCUSD_DMCBL",
            "BITGET:BTCUSDC",
            "BITGET:BTCUSDT",
            "BITGET:BTCUSDT_UMCBL",
            "BITGET:ETHPERP_CMCBL",
            "BITGET:ETHUSD_DMCBL",
            "BITGET:ETHUSDT",
            "BITGET:ETHUSDT_UMCBL",
            "BYBIT:BTCUSD",
            "BYBIT:BTCUSDC-SPOT",
            "BYBIT:BTCUSDT",
            "BYBIT:BTCUSDT-SPOT",
            "BYBIT:ETHUSDT",
            "BYBIT:ETHUSDT-SPOT",
            "COINBASE:BTC-USD",
            "COINBASE:BTC-USDC",
            "COINBASE:BTC-USDT",
            "COINBASE:ETH-USD",
            "COINBASE:ETH-USDT",
            "OKEX:BTC-USD-SWAP",
            "OKEX:BTC-USDC",
            "OKEX:BTC-USDC-SWAP",
            "OKEX:BTC-USDT",
            "OKEX:BTC-USDT-SWAP",
            "OKEX:ETH-USD-SWAP",
            "OKEX:ETH-USDT",
            "OKEX:ETH-USDT-SWAP",
            "ORDERBOOK:AGGRPERP-BTCUSD",
            "ORDERBOOK:AGGRSPOT-BTCUSD"
          ],
          "count": 43
        },
        {
          "label": "BTCUSD+AGGROIBTCUSD+AGGRPERPB...",
          "markets": [
            "BINANCE_FUTURES:btcusd_perp",
            "BINANCE_FUTURES:btcusdt",
            "BINANCE:btcfdusd",
            "BINANCE:btcusdt",
            "BITFINEX:BTCUSD",
            "BYBIT:BTCUSDT",
            "BYBIT:BTCUSDT-SPOT",
            "COINBASE:BTC-PERP-INTX",
            "COINBASE:BTC-USD",
            "COINBASE:BTC-USDT",
            "OKEX:BTC-USD-SWAP",
            "ORDERBOOK:AGGROI-BTCUSD",
            "ORDERBOOK:AGGRPERP-BTCUSD",
            "ORDERBOOK:AGGRSPOT-BTCUSD",
            "ORDERBOOK:AGGRSPOT-BTCUSDALERTS",
            "ORDERBOOK:BINANCE-BTCUSDT",
            "ORDERBOOK:BITMEX-XBTUSD",
            "ORDERBOOK:COINBASE-BTCUSD"
          ],
          "count": 18
        },
        {
          "label": "BTCUSD+ETHUSD+AGGRSPOTBTCUSD",
          "markets": [
            "BINANCE_FUTURES:btcusd_perp",
            "BINANCE_FUTURES:btcusdt",
            "BINANCE_FUTURES:ethusd_perp",
            "BINANCE_FUTURES:ethusdt",
            "BINANCE:btcfdusd",
            "BINANCE:btctusd",
            "BINANCE:btcusdc",
            "BINANCE:btcusdt",
            "BINANCE:ethfdusd",
            "BINANCE:ethtusd",
            "BINANCE:ethusdt",
            "BITFINEX:BTCF0:USTF0",
            "BITFINEX:BTCUST",
            "BITGET:BTCPERP_CMCBL",
            "BITGET:BTCUSD_DMCBL",
            "BITGET:BTCUSDC",
            "BITGET:BTCUSDT",
            "BITGET:BTCUSDT_UMCBL",
            "BITGET:ETHPERP_CMCBL",
            "BITGET:ETHUSD_DMCBL",
            "BITGET:ETHUSDT",
            "BITGET:ETHUSDT_UMCBL",
            "BYBIT:BTCUSD",
            "BYBIT:BTCUSDC-SPOT",
            "BYBIT:BTCUSDT",
            "BYBIT:BTCUSDT-SPOT",
            "BYBIT:ETHUSDT",
            "BYBIT:ETHUSDT-SPOT",
            "COINBASE:BTC-USD",
            "COINBASE:BTC-USDC",
            "COINBASE:BTC-USDT",
            "COINBASE:ETH-USD",
            "COINBASE:ETH-USDT",
            "OKEX:BTC-USD-SWAP",
            "OKEX:BTC-USDC",
            "OKEX:BTC-USDC-SWAP",
            "OKEX:BTC-USDT",
            "OKEX:BTC-USDT-SWAP",
            "OKEX:ETH-USD-SWAP",
            "OKEX:ETH-USDT",
            "OKEX:ETH-USDT-SWAP",
            "ORDERBOOK:AGGRSPOT-BTCUSD"
          ],
          "count": 42
        },
        {
          "label": "BTCUSD+ETHUSD",
          "markets": [
            "BINANCE_FUTURES:btcusd_perp",
            "BINANCE_FUTURES:btcusdt",
            "BINANCE_FUTURES:ethusd_perp",
            "BINANCE_FUTURES:ethusdt",
            "BINANCE:btcfdusd",
            "BINANCE:btctusd",
            "BINANCE:btcusdc",
            "BINANCE:btcusdt",
            "BINANCE:ethfdusd",
            "BINANCE:ethtusd",
            "BINANCE:ethusdt",
            "BITFINEX:BTCF0:USTF0",
            "BITFINEX:BTCUST",
            "BITGET:BTCPERP_CMCBL",
            "BITGET:BTCUSD_DMCBL",
            "BITGET:BTCUSDC",
            "BITGET:BTCUSDT",
            "BITGET:BTCUSDT_UMCBL",
            "BITGET:ETHPERP_CMCBL",
            "BITGET:ETHUSD_DMCBL",
            "BITGET:ETHUSDT",
            "BITGET:ETHUSDT_UMCBL",
            "BYBIT:BTCUSD",
            "BYBIT:BTCUSDC-SPOT",
            "BYBIT:BTCUSDT",
            "BYBIT:BTCUSDT-SPOT",
            "BYBIT:ETHUSDT",
            "BYBIT:ETHUSDT-SPOT",
            "COINBASE:BTC-USD",
            "COINBASE:BTC-USDC",
            "COINBASE:BTC-USDT",
            "COINBASE:ETH-USD",
            "COINBASE:ETH-USDT",
            "OKEX:BTC-USD-SWAP",
            "OKEX:BTC-USDC",
            "OKEX:BTC-USDC-SWAP",
            "OKEX:BTC-USDT",
            "OKEX:BTC-USDT-SWAP",
            "OKEX:ETH-USD-SWAP",
            "OKEX:ETH-USDT",
            "OKEX:ETH-USDT-SWAP"
          ],
          "count": 41
        },
        {
          "label": "BTCUSD+ETHUSD",
          "markets": [
            "BINANCE_FUTURES:btcusd_perp",
            "BINANCE_FUTURES:btcusdt",
            "BINANCE_FUTURES:ethusd_perp",
            "BINANCE_FUTURES:ethusdt",
            "BINANCE:btcfdusd",
            "BINANCE:btctusd",
            "BINANCE:btcusdc",
            "BINANCE:btcusdt",
            "BINANCE:ethtusd",
            "BINANCE:ethusdt",
            "BITFINEX:BTCF0:USTF0",
            "BITFINEX:BTCUST",
            "BITGET:BTCPERP_CMCBL",
            "BITGET:BTCUSD_DMCBL",
            "BITGET:BTCUSDC",
            "BITGET:BTCUSDT",
            "BITGET:BTCUSDT_UMCBL",
            "BYBIT:BTCUSD",
            "BYBIT:BTCUSDC-SPOT",
            "BYBIT:BTCUSDT",
            "BYBIT:BTCUSDT-SPOT",
            "COINBASE:BTC-USD",
            "COINBASE:BTC-USDC",
            "COINBASE:BTC-USDT",
            "COINBASE:ETH-USD",
            "COINBASE:ETH-USDT",
            "OKEX:BTC-USD-SWAP",
            "OKEX:BTC-USDC",
            "OKEX:BTC-USDC-SWAP",
            "OKEX:BTC-USDT",
            "OKEX:BTC-USDT-SWAP"
          ],
          "count": 31
        },
        {
          "label": "BTCUSD+AGGROIBTCUSD+AGGRSPOTB...",
          "markets": [
            "BINANCE_FUTURES:btcusd_perp",
            "BINANCE_FUTURES:btcusdt",
            "BINANCE:btcfdusd",
            "BINANCE:btcusdt",
            "BITFINEX:BTCUSD",
            "BYBIT:BTCUSDT",
            "BYBIT:BTCUSDT-SPOT",
            "COINBASE:BTC-USD",
            "OKEX:BTC-USD-SWAP",
            "ORDERBOOK:AGGROI-BTCUSD",
            "ORDERBOOK:AGGRSPOT-BTCUSD",
            "ORDERBOOK:AGGRSPOT-BTCUSDALERTS",
            "ORDERBOOK:BINANCE-BTCUSDT",
            "ORDERBOOK:BITMEX-XBTUSD",
            "ORDERBOOK:COINBASE-BTCUSD"
          ],
          "count": 15
        },
        {
          "label": "BTCUSD+AGGRSPOTBTCUSD+AGGRSPO...",
          "markets": [
            "BINANCE_FUTURES:btcusd_perp",
            "BINANCE_FUTURES:btcusdt",
            "BINANCE:btcfdusd",
            "BINANCE:btcusdt",
            "BITFINEX:BTCUSD",
            "BYBIT:BTCUSDT",
            "BYBIT:BTCUSDT-SPOT",
            "COINBASE:BTC-USD",
            "OKEX:BTC-USD-SWAP",
            "ORDERBOOK:AGGRSPOT-BTCUSD",
            "ORDERBOOK:AGGRSPOT-BTCUSDALERTS",
            "ORDERBOOK:BINANCE-BTCUSDT",
            "ORDERBOOK:BITMEX-XBTUSD",
            "ORDERBOOK:COINBASE-BTCUSD"
          ],
          "count": 14
        },
        {
          "label": "BTCUSD+AGGRSPOTBTCUSDALERTS+B...",
          "markets": [
            "BINANCE_FUTURES:btcusd_perp",
            "BINANCE_FUTURES:btcusdt",
            "BINANCE:btcfdusd",
            "BINANCE:btcusdt",
            "BITFINEX:BTCUSD",
            "BYBIT:BTCUSDT",
            "BYBIT:BTCUSDT-SPOT",
            "COINBASE:BTC-USD",
            "OKEX:BTC-USD-SWAP",
            "ORDERBOOK:AGGRSPOT-BTCUSDALERTS",
            "ORDERBOOK:BINANCE-BTCUSDT",
            "ORDERBOOK:BITMEX-XBTUSD",
            "ORDERBOOK:COINBASE-BTCUSD"
          ],
          "count": 13
        },
        {
          "label": "BTCUSD+AGGROIBTCUSD+AGGRPERPB...",
          "markets": [
            "BINANCE_FUTURES:btcusd_perp",
            "BINANCE_FUTURES:btcusdt",
            "BINANCE:btcfdusd",
            "BINANCE:btcusdt",
            "BITFINEX:BTCUSD",
            "BYBIT:BTCUSDT",
            "BYBIT:BTCUSDT-SPOT",
            "COINBASE:BTC-USD",
            "OKEX:BTC-USD-SWAP",
            "ORDERBOOK:AGGROI-BTCUSD",
            "ORDERBOOK:AGGRPERP-BTCUSD",
            "ORDERBOOK:AGGRSPOT-BTCUSDALERTS",
            "ORDERBOOK:BINANCE-BTCUSDT",
            "ORDERBOOK:BITMEX-XBTUSD",
            "ORDERBOOK:COINBASE-BTCUSD"
          ],
          "count": 15
        },
        {
          "label": "BTCUSD+BINANCEBTCUSD+COINBASE...",
          "markets": [
            "BINANCE_FUTURES:btcusdt",
            "BINANCE:btcfdusd",
            "BINANCE:btcusdt",
            "BITFINEX:BTCUSD",
            "COINBASE:BTC-USD",
            "COINBASE:BTC-USDT",
            "ORDERBOOK:BINANCE-BTCUSDT",
            "ORDERBOOK:COINBASE-BTCUSD"
          ],
          "count": 8
        },
        {
          "label": "BTCUSD+AGGRPERPBTCUSD+BINANCE...",
          "markets": [
            "BINANCE_FUTURES:btcusdt",
            "BINANCE:btcfdusd",
            "BINANCE:btcusdt",
            "BITFINEX:BTCUSD",
            "COINBASE:BTC-USD",
            "COINBASE:BTC-USDT",
            "ORDERBOOK:AGGRPERP-BTCUSD",
            "ORDERBOOK:BINANCE-BTCUSDT",
            "ORDERBOOK:COINBASE-BTCUSD"
          ],
          "count": 9
        },
        {
          "label": "BTCUSD+AGGRLSBTCUSD+AGGROIBTC...",
          "markets": [
            "BINANCE_FUTURES:btcusd_perp",
            "BINANCE_FUTURES:btcusdt",
            "BINANCE:btcfdusd",
            "BINANCE:btcusdt",
            "BITFINEX:BTCUSD",
            "BYBIT:BTCUSDT",
            "BYBIT:BTCUSDT-SPOT",
            "COINBASE:BTC-USD",
            "OKEX:BTC-USD-SWAP",
            "ORDERBOOK:AGGRLS-BTCUSD",
            "ORDERBOOK:AGGROI-BTCUSD",
            "ORDERBOOK:AGGRPERP-BTCUSD",
            "ORDERBOOK:AGGRSPOT-BTCUSD",
            "ORDERBOOK:AGGRSPOT-BTCUSDALERTS",
            "ORDERBOOK:BINANCE-BTCUSDT",
            "ORDERBOOK:BITMEX-XBTUSD",
            "ORDERBOOK:COINBASE-BTCUSD"
          ],
          "count": 17
        },
        {
          "label": "BINANCE_FUTURES:ethusdt",
          "markets": [
            "BINANCE_FUTURES:ethusdt"
          ],
          "count": 0
        },
        {
          "label": "COINBASE:BTCUSD",
          "markets": [
            "COINBASE:BTC-USD",
            "COINBASE:BTC-USDC",
            "COINBASE:BTC-USDT"
          ],
          "count": 3
        },
        {
          "label": "BTCUSD",
          "markets": [
            "BINANCE_FUTURES:btcusd_perp",
            "BINANCE_FUTURES:btcusdt",
            "BINANCE:btcfdusd",
            "BINANCE:btcusdt",
            "BYBIT:BTCUSDT",
            "BYBIT:BTCUSDT-SPOT",
            "COINBASE:BTC-USD"
          ],
          "count": 7
        },
        {
          "label": "BTCUSD+AGGRLSBTCUSD+AGGROIBTC...",
          "markets": [
            "BINANCE_FUTURES:btcusdt",
            "BINANCE:btcfdusd",
            "BINANCE:btcusdt",
            "BITFINEX:BTCUSD",
            "COINBASE:BTC-USD",
            "COINBASE:BTC-USDT",
            "ORDERBOOK:AGGRLS-BTCUSD",
            "ORDERBOOK:AGGROI-BTCUSD",
            "ORDERBOOK:AGGRPERP-BTCUSD",
            "ORDERBOOK:BINANCE-BTCUSDT",
            "ORDERBOOK:COINBASE-BTCUSD"
          ],
          "count": 11
        },
        {
          "label": "BTCUSD+AGGRPERPBTCUSD+AGGRSPO...",
          "markets": [
            "BINANCE_FUTURES:btcusdt",
            "BINANCE:btctusd",
            "BINANCE:btcusdt",
            "BITFINEX:BTCUSD",
            "BYBIT:BTCUSDT",
            "COINBASE:BTC-USD",
            "COINBASE:BTC-USDC",
            "COINBASE:BTC-USDT",
            "OKEX:BTC-USD-SWAP",
            "ORDERBOOK:AGGRPERP-BTCUSD",
            "ORDERBOOK:AGGRSPOT-BTCUSD"
          ],
          "count": 11
        },
        {
          "label": "BTCUSD+AGGRLSBTCUSD+AGGROIBTC...",
          "markets": [
            "BINANCE_FUTURES:btcusdt",
            "BINANCE:btcfdusd",
            "BINANCE:btcusdt",
            "BITFINEX:BTCUSD",
            "COINBASE:BTC-USD",
            "COINBASE:BTC-USDT",
            "ORDERBOOK:AGGRLS-BTCUSD",
            "ORDERBOOK:AGGROI-BTCUSD",
            "ORDERBOOK:BINANCEFUTURES-BTCUSDT"
          ],
          "count": 9
        },
        {
          "label": "BTCUSD+AGGROIBTCUSD+BINANCEFU...",
          "markets": [
            "BINANCE_FUTURES:btcusdt",
            "BINANCE:btcfdusd",
            "BINANCE:btcusdt",
            "BITFINEX:BTCUSD",
            "COINBASE:BTC-USD",
            "COINBASE:BTC-USDT",
            "ORDERBOOK:AGGROI-BTCUSD",
            "ORDERBOOK:BINANCEFUTURES-BTCUSDT"
          ],
          "count": 8
        },
        {
          "label": "BTCUSD",
          "markets": [
            "BINANCE:btcfdusd",
            "BINANCE:btctusd",
            "BINANCE:btcusdt",
            "BITFINEX:BTCUSD",
            "BITFINEX:BTCUST",
            "COINBASE:BTC-USD",
            "COINBASE:BTC-USDC",
            "COINBASE:BTC-USDT",
            "OKEX:BTC-USDT"
          ],
          "count": 9
        },
        {
          "label": "BTCUSD",
          "markets": [
            "BINANCE_FUTURES:btcusd_perp",
            "BINANCE_FUTURES:btcusdt",
            "BINANCE:btcfdusd",
            "BINANCE:btctusd",
            "BINANCE:btcusdt",
            "BITFINEX:BTCF0:USTF0",
            "BITFINEX:BTCUSD",
            "BITFINEX:BTCUST",
            "BITGET:BTCPERP_CMCBL",
            "BITGET:BTCUSD_DMCBL",
            "BITGET:BTCUSDT_UMCBL",
            "BYBIT:BTCUSD",
            "BYBIT:BTCUSDC-SPOT",
            "BYBIT:BTCUSDT",
            "BYBIT:BTCUSDT-SPOT",
            "COINBASE:BTC-USD",
            "COINBASE:BTC-USDC",
            "COINBASE:BTC-USDT",
            "OKEX:BTC-USD-SWAP",
            "OKEX:BTC-USDC-SWAP",
            "OKEX:BTC-USDT",
            "OKEX:BTC-USDT-SWAP"
          ],
          "count": 22
        },
        {
          "label": "BTCUSD+AGGRPERPBTCUSD",
          "markets": [
            "BINANCE_FUTURES:btcusd_perp",
            "BINANCE_FUTURES:btcusdc",
            "BINANCE_FUTURES:btcusdt",
            "BINANCE:btcfdusd",
            "BINANCE:btctusd",
            "BINANCE:btcusdc",
            "BINANCE:btcusdt",
            "BITFINEX:BTCF0:USTF0",
            "BITFINEX:BTCUSD",
            "BITFINEX:BTCUST",
            "BITGET:BTCPERP_CMCBL",
            "BITGET:BTCUSD_DMCBL",
            "BITGET:BTCUSDT_UMCBL",
            "BYBIT:BTCUSD",
            "BYBIT:BTCUSDC-SPOT",
            "BYBIT:BTCUSDT",
            "BYBIT:BTCUSDT-SPOT",
            "COINBASE:BTC-USD",
            "COINBASE:BTC-USDC",
            "COINBASE:BTC-USDT",
            "OKEX:BTC-USD-SWAP",
            "OKEX:BTC-USDC",
            "OKEX:BTC-USDC-SWAP",
            "OKEX:BTC-USDT",
            "OKEX:BTC-USDT-SWAP",
            "ORDERBOOK:AGGRPERP-BTCUSD"
          ],
          "count": 26
        },
        {
          "label": "BTCUSD+AGGRPERPBTCUSD",
          "markets": [
            "BINANCE_FUTURES:btcusd_perp",
            "BINANCE_FUTURES:btcusdc",
            "BINANCE_FUTURES:btcusdt",
            "BITFINEX:BTCF0:USTF0",
            "BITGET:BTCPERP_CMCBL",
            "BITGET:BTCUSD_DMCBL",
            "BITGET:BTCUSDT_UMCBL",
            "BYBIT:BTCUSD",
            "BYBIT:BTCUSDT",
            "OKEX:BTC-USD-SWAP",
            "OKEX:BTC-USDC-SWAP",
            "OKEX:BTC-USDT-SWAP",
            "ORDERBOOK:AGGRPERP-BTCUSD"
          ],
          "count": 13
        },
        {
          "label": "BTCUSD",
          "markets": [
            "BINANCE_FUTURES:btcusd_perp",
            "BINANCE_FUTURES:btcusdc",
            "BINANCE_FUTURES:btcusdt",
            "BITFINEX:BTCF0:USTF0",
            "BITGET:BTCPERP_CMCBL",
            "BITGET:BTCUSD_DMCBL",
            "BITGET:BTCUSDT_UMCBL",
            "BYBIT:BTCUSD",
            "BYBIT:BTCUSDT",
            "OKEX:BTC-USD-SWAP",
            "OKEX:BTC-USDC-SWAP",
            "OKEX:BTC-USDT-SWAP"
          ],
          "count": 12
        },
        {
          "label": "BTCUSD+AGGROIBTCUSD",
          "markets": [
            "BINANCE_FUTURES:btcusd_perp",
            "BINANCE_FUTURES:btcusdc",
            "BINANCE_FUTURES:btcusdt",
            "BITFINEX:BTCF0:USTF0",
            "BITGET:BTCPERP_CMCBL",
            "BITGET:BTCUSD_DMCBL",
            "BITGET:BTCUSDT_UMCBL",
            "BYBIT:BTCUSD",
            "BYBIT:BTCUSDT",
            "OKEX:BTC-USD-SWAP",
            "OKEX:BTC-USDC-SWAP",
            "OKEX:BTC-USDT-SWAP",
            "ORDERBOOK:AGGROI-BTCUSD"
          ],
          "count": 13
        },
        {
          "label": "BTCUSD+AGGROIBTCUSD+BINANCEFU...",
          "markets": [
            "BINANCE_FUTURES:btcusdt",
            "ORDERBOOK:AGGROI-BTCUSD",
            "ORDERBOOK:BINANCEFUTURES-BTCUSDT"
          ],
          "count": 3
        }
      ],
      "searchExchanges": {
        "AGGR": false,
        "BINANCE": false,
        "BINANCE_FUTURES": false,
        "BINANCE_US": false,
        "BITFINEX": false,
        "BITGET": false,
        "BITMART": false,
        "BITMEX": false,
        "BITSTAMP": false,
        "BYBIT": false,
        "COINBASE": false,
        "CRYPTOCOM": false,
        "DERIBIT": false,
        "DYDX": false,
        "GATEIO": false,
        "HITBTC": false,
        "HUOBI": false,
        "KRAKEN": false,
        "KUCOIN": false,
        "MEXC": false,
        "OKEX": false,
        "ORDERBOOK": true,
        "PHEMEX": false,
        "POLONIEX": false,
        "UNISWAP": false
      },
      "timeframes": [
        {
          "label": "1s",
          "value": "1"
        },
        {
          "label": "3s",
          "value": "3"
        },
        {
          "label": "5s",
          "value": "5"
        },
        {
          "label": "10s",
          "value": "10"
        },
        {
          "label": "15s",
          "value": "15"
        },
        {
          "label": "30s",
          "value": "30"
        },
        {
          "label": "1m",
          "value": "60"
        },
        {
          "label": "3m",
          "value": "180"
        },
        {
          "label": "5m",
          "value": "300"
        },
        {
          "label": "15m",
          "value": "900"
        },
        {
          "label": "21m",
          "value": "1260"
        },
        {
          "label": "30m",
          "value": "1800"
        },
        {
          "label": "1h",
          "value": "3600"
        },
        {
          "label": "2h",
          "value": "7200"
        },
        {
          "label": "4h",
          "value": "14400"
        },
        {
          "label": "6h",
          "value": "21600"
        },
        {
          "label": "8h",
          "value": "28800"
        },
        {
          "label": "12h",
          "value": "43200"
        },
        {
          "label": "1d",
          "value": "86400"
        },
        {
          "label": "21 ticks",
          "value": "21t"
        },
        {
          "label": "50 ticks",
          "value": "50t"
        },
        {
          "label": "89 ticks",
          "value": "89t"
        },
        {
          "label": "100 ticks",
          "value": "100t"
        },
        {
          "label": "200 ticks",
          "value": "200t"
        },
        {
          "label": "610 ticks",
          "value": "610t"
        },
        {
          "label": "1000 ticks",
          "value": "1000t"
        },
        {
          "label": "1597 ticks",
          "value": "1597t"
        }
      ],
      "favoriteTimeframes": {
        "60": "1m",
        "900": "15m",
        "3600": "1h",
        "14400": "4h"
      },
      "normalizeWatermarks": false,
      "alerts": true,
      "alertsColor": "rgb(255,0,0)",
      "alertsLineStyle": 2,
      "alertsLineWidth": 2,
      "alertsClick": false,
      "alertSound": null,
      "showThresholdsAsTable": true,
      "indicatorDialogNavigation": "{\"optionsQuery\":\"\",\"editorOptions\":{},\"columnWidth\":240,\"tab\":\"script\"}"
    },
    "exchanges": {
      "AGGR": {
        "disabled": true
      },
      "BINANCE": {
        "disabled": false
      },
      "BINANCE_FUTURES": {
        "disabled": false
      },
      "BINANCE_US": {
        "disabled": true
      },
      "BITFINEX": {
        "disabled": false
      },
      "BITGET": {
        "disabled": false
      },
      "BITMART": {
        "disabled": true
      },
      "BITMEX": {
        "disabled": true
      },
      "BITSTAMP": {
        "disabled": true
      },
      "BYBIT": {
        "disabled": false
      },
      "COINBASE": {
        "disabled": false
      },
      "CRYPTOCOM": {
        "disabled": true
      },
      "DERIBIT": {
        "disabled": true
      },
      "DYDX": {
        "disabled": true
      },
      "GATEIO": {
        "disabled": true
      },
      "HITBTC": {
        "disabled": true
      },
      "HUOBI": {
        "disabled": false
      },
      "KRAKEN": {
        "disabled": true
      },
      "KUCOIN": {
        "disabled": false
      },
      "MEXC": {
        "disabled": false
      },
      "OKEX": {
        "disabled": false
      },
      "ORDERBOOK": {
        "disabled": false
      },
      "PHEMEX": {
        "disabled": true
      },
      "POLONIEX": {
        "disabled": true
      },
      "UNISWAP": {
        "disabled": true
      },
      "_id": "exchanges"
    },
    "chart": {
      "indicatorsErrors": {},
      "indicators": {
        "liquidations": {
          "enabled": true,
          "name": "Liquidations",
          "description": "Liquidations by side",
          "script": "plothistogram(lbuy, color=options.upColor)\nplothistogram(-lsell, color=options.downColor)",
          "options": {
            "priceFormat": {
              "type": "volume"
            },
            "priceScaleId": "volume_liquidations",
            "upColor": "rgb(255,76,243)",
            "downColor": "rgb(255,183,77)",
            "scaleMargins": {
              "top": 0,
              "bottom": 0.96
            },
            "visible": true,
            "lastValueVisible": false,
            "priceLineVisible": false,
            "baseLineVisible": false
          },
          "id": "liquidations",
          "createdAt": 1700269685372,
          "updatedAt": 1738721466525,
          "series": [
            "liquidations",
            "ptsgr2s7"
          ],
          "unsavedChanges": false,
          "optionsDefinitions": {},
          "libraryId": "liquidations"
        },
        "price": {
          "enabled": true,
          "name": "Price",
          "script": "src = { sources: { \"BINANCE_FUTURES:btcusdt\":BINANCE_FUTURES:btcusdt }, localTimestamp: time }\r\n\r\nohlc = options.useHeikinAshi ? avg_heikinashi(src) : options.useGaps ? avg_ohlc_with_gaps(src) : avg_ohlc(src)\r\n\r\nplotcandlestick(ohlc, id=price) \r\n\r\n/*var ohlc = options.useHeikinAshi ? \r\n    avg_heikinashi(bar) : \r\n    options.useGaps ? \r\n    avg_ohlc_with_gaps(bar) : \r\n    avg_ohlc(bar)\r\n\r\nplotcandlestick(ohlc, id=price)*/",
          "options": {
            "priceScaleId": "right",
            "priceFormat": {
              "auto": true,
              "precision": 1,
              "minMove": 0.1
            },
            "priceLineVisible": true,
            "lastValueVisible": true,
            "borderVisible": true,
            "upColor": "rgb(59,202,109)",
            "downColor": "rgb(214,40,40)",
            "borderUpColor": "rgb(59,202,109)",
            "borderDownColor": "rgb(239,67,82)",
            "wickUpColor": "rgb(209,212,220)",
            "wickDownColor": "rgb(239,67,82)",
            "useGaps": false,
            "useHeikinAshi": false,
            "scaleMargins": {
              "top": 0.33,
              "bottom": 0.44
            },
            "visible": true
          },
          "id": "price",
          "createdAt": 1700269685372,
          "updatedAt": 1727911320883,
          "series": [
            "price",
            "price2"
          ],
          "unsavedChanges": true,
          "preview": {},
          "optionsDefinitions": {},
          "libraryId": "price"
        },
        "orderbook-0-1-spot": {
          "script": "if(!upper){\r\n  upper = options.upper || 39\r\n  lower = options.lower || -39\r\n  options.toggleShowLegend\r\n}\r\nvar levels = ORDERBOOK:AGGRSPOT-BTCUSD.zratios \r\nvar ratioValue = levels[0] === 0 ? 0.01 : levels[0]\r\n\r\nplothistogram({\r\n    time: time,\r\n    value: ratioValue,\r\n    color: ratioValue < lower ? options.warnColor : ratioValue > upper ? options.warnColor : options.ratioColor\r\n}, title=\"spot\")\r\n\r\n\r\nif( upperLine === 0 ){  \r\n   upperLine = series[0].createPriceLine({ \r\n      price: upper, \r\n      index: bar.length,\r\n      color: options.upperColor,\r\n        axisLabelVisible: false\r\n    })\r\n  }\r\n\r\n  if( lowerLine === 0 ){  \r\n   lowerLine = series[0].createPriceLine({ \r\n      price: lower, \r\n      index: bar.length,\r\n      color: options.lowerColor,\r\n        axisLabelVisible: false\r\n    })\r\n  }",
          "name": "Orderbook 0-1% spot",
          "priceScaleId": "orderbook-0-1",
          "id": "orderbook-0-1-spot",
          "options": {
            "priceScaleId": "orderbook-0-1-spot",
            "scaleMargins": {
              "top": 0.73,
              "bottom": 0.23
            },
            "useGaps": true,
            "useHeikinAshi": null,
            "priceFormat": {
              "type": "percent",
              "precision": 1,
              "minMove": 0.1,
              "auto": true
            },
            "visible": true,
            "lastValueVisible": true,
            "baseLineVisible": true,
            "pivotLength": 14,
            "upper": null,
            "lowerColor": "rgb(120,123,134)",
            "upperColor": "rgb(120,123,134)",
            "lower": null,
            "ratioColor": "rgb(149,152,161)",
            "warnColor": "rgb(255,235,59)",
            "toggleShowLegend": true
          },
          "series": [
            "orderbook-0-1-spot"
          ],
          "displayName": "Orderbook 0-1% spot",
          "unsavedChanges": true,
          "preview": {},
          "createdAt": 1700590114591,
          "updatedAt": 1738719790750,
          "optionsDefinitions": {},
          "libraryId": "orderbook-0-1-spot"
        },
        "orderbook-0-1-perp": {
          "script": "if(!upper){\r\n  upper = options.upper || 37\r\n  lower = options.lower || -19\r\n  options.toggleShowLegend\r\n}\r\n\r\nvar levels = ORDERBOOK:AGGRPERP-BTCUSD.zratios \r\nvar ratioValue = levels[0] === 0 ? 0.01 : levels[0]\r\n\r\nplothistogram({\r\n    time: time,\r\n    value: ratioValue,\r\n    color: ratioValue <= lower ? options.warnColor : ratioValue >= upper ? options.warnColor : options.ratioColor\r\n}, title=\"perp\")\r\n\r\nif( upperLine === 0 ){  \r\n   upperLine = series[0].createPriceLine({ \r\n      price: upper, \r\n      index: bar.length,\r\n      color: options.upperColor,\r\n        axisLabelVisible: false\r\n    })\r\n  }\r\n\r\n  if( lowerLine === 0 ){  \r\n   lowerLine = series[0].createPriceLine({ \r\n      price: lower, \r\n      index: bar.length,\r\n      color: options.lowerColor,\r\n        axisLabelVisible: false\r\n    })\r\n  }",
          "name": "Orderbook 0-1% perp",
          "priceScaleId": "orderbook-0-1",
          "id": "orderbook-0-1-perp",
          "options": {
            "priceScaleId": "orderbook-0-1-perp",
            "scaleMargins": {
              "top": 0.86,
              "bottom": 0.1
            },
            "useGaps": true,
            "useHeikinAshi": null,
            "priceFormat": {
              "type": "percent",
              "precision": 1,
              "minMove": 0.1,
              "auto": true
            },
            "visible": true,
            "lastValueVisible": true,
            "baseLineVisible": true,
            "upper": null,
            "lower": null,
            "warnColor": "rgb(38,198,218)",
            "upperColor": "rgb(12,50,153)",
            "lowerColor": "rgb(12,50,153)",
            "ratioColor": "rgb(178,181,190)",
            "toggleShowLegend": true
          },
          "series": [
            "orderbook-0-1-perp"
          ],
          "displayName": "Orderbook 0-1% perp",
          "unsavedChanges": true,
          "preview": {},
          "createdAt": 1700598885689,
          "updatedAt": 1738719828540,
          "optionsDefinitions": {},
          "libraryId": "orderbook-0-1-perp"
        },
        "orderbook-spot": {
          "script": "var levels = ORDERBOOK:AGGRSPOT-BTCUSD.zratios \r\nvar ratio1 = levels && levels[1]\r\nvar ratio2 = levels && levels[2]\r\nvar ratio3 = levels && levels[3]\r\n\r\nif( ratio1Upper === 0 ){\r\n    ratio1Upper = options.upper || 62\r\n    ratio1Lower = options.lower || -62\r\n\r\n    ratio2Upper = options.upper2 || 45\r\n    ratio2Lower = options.lower2 || -45\r\n\r\n    ratio3Upper = options.upper3 || 39\r\n    ratio3Lower = options.lower3 || -39\r\n\r\n    options.toggleShowLegend\r\n}\r\n\r\nplotline({\r\n    time: time,\r\n    value: ratio3, \r\n    color: ratio3 < ratio3Lower ? options.warnColor : (ratio3 > ratio3Upper ? options.warnColor : options.ratio3Color)\r\n}, title=S3)\r\n\r\nplotline({\r\n    time: time,\r\n    value: ratio1, \r\n    color: ratio1 < ratio1Lower ? options.warnColor : (ratio1 > ratio1Upper ? options.warnColor : options.ratio1Color)\r\n}, title=S1)\r\n\r\nplotline({\r\n    time: time,\r\n    value: ratio2, \r\n    color: ratio2 < ratio2Lower ? options.warnColor : (ratio2 > ratio2Upper ? options.warnColor: options.ratio2Color)\r\n}, title=S2)\r\n\r\n/*\r\nline(ratio1Upper, color=options.upperColor)\r\nline(ratio1Lower,color=options.lowerColor)\r\n\r\nline(ratio2Upper, color=options.upper2Color)\r\nline(ratio2Lower,color=options.lower2Color)\r\n*/\r\n\r\nif( upperLine === 0 ){  \r\n    upperLine = series[0].createPriceLine({ \r\n        price: ratio1Upper, \r\n        index: bar.length,\r\n        color: options.upperColor,\r\n        axisLabelVisible: false\r\n    })\r\n}\r\n\r\nif( lowerLine === 0 ){  \r\n    lowerLine = series[0].createPriceLine({ \r\n        price: ratio1Lower, \r\n        index: bar.length,\r\n        color: options.lowerColor,\r\n        axisLabelVisible: false\r\n    })\r\n}\r\n\r\nif( upperLine2 === 0 ){  \r\n    upperLine2 = series[0].createPriceLine({ \r\n        price: ratio2Upper, \r\n        index: bar.length,\r\n        color: options.upper2Color,\r\n        axisLabelVisible: false\r\n    })\r\n}\r\n\r\nif( lowerLine2 === 0 ){  \r\n    lowerLine2 = series[0].createPriceLine({ \r\n        price: ratio2Lower, \r\n        index: bar.length,\r\n        color: options.lower2Color,\r\n        axisLabelVisible: false\r\n    })\r\n}\r\n\r\nline(0)",
          "name": "Orderbook spot",
          "priceScaleId": "orderbook-spot",
          "id": "orderbook-spot",
          "options": {
            "priceScaleId": "orderbook-spot",
            "scaleMargins": {
              "top": 0.77,
              "bottom": 0.15
            },
            "lastValueVisible": true,
            "priceFormat": {
              "type": "percent",
              "precision": 1,
              "minMove": 0.1,
              "auto": true
            },
            "leverages": null,
            "ratio1": null,
            "ratio2": null,
            "ratio2Color": "rgb(66,189,168)",
            "ratio1Color": "rgb(186,104,200)",
            "visible": true,
            "upper": null,
            "upper2": null,
            "lowerColor": "rgba(74,20,140,0.62)",
            "upperColor": "rgba(171,71,188,0.59)",
            "lower2Color": "rgba(66,189,168,0.63)",
            "upper2Color": "rgba(34,171,148,0.62)",
            "lower": null,
            "lower2": null,
            "warnColor": "rgb(245,124,0)",
            "priceLineVisible": false,
            "baseLineVisible": true,
            "ratio3Color": "rgba(255,255,255,0.69)",
            "upper3": null,
            "lower3": null,
            "lineStyle": 0,
            "toggleShowLegend": true
          },
          "series": [
            "orderbook-spot",
            "kz0jygul",
            "9kfe6igt",
            "0kyy3c3v",
            "uw8217vf",
            "jemo1yqd",
            "1kzgi4cv",
            "ont209n3"
          ],
          "displayName": "Orderbook spot",
          "unsavedChanges": true,
          "preview": {},
          "createdAt": 1700599138239,
          "updatedAt": 1738719840291,
          "optionsDefinitions": {},
          "libraryId": "orderbook-spot"
        },
        "orderbook-perp": {
          "script": "var levels = ORDERBOOK:AGGRPERP-BTCUSD.zratios \r\nvar ratio1 = levels && levels[1]\r\nvar ratio2 = levels && levels[2]\r\nvar ratio3 = levels && levels[3]\r\n\r\nif( ratio1Upper === 0 ){\r\n    ratio1Upper = options.upper || 26\r\n    ratio1Lower = options.lower || -26\r\n\r\n    ratio2Upper = options.upper2 || 35\r\n    ratio2Lower = options.lower2 || -35\r\n\r\n    ratio3Upper = options.upper3 || 39\r\n    ratio3Lower = options.lower3 || -39\r\n\r\n    options.toggleShowLegend\r\n}\r\n\r\nplotline({\r\n    time: time,\r\n    value: ratio3, \r\n    color: ratio3 < ratio3Lower ? options.warnColor : (ratio3 > ratio3Upper ? options.warnColor : options.ratio3Color)\r\n}, title=P3)\r\n\r\nplotline({\r\n    time: time,\r\n    value: ratio1, \r\n    color: ratio1 < ratio1Lower ? options.warnColor : (ratio1 > ratio1Upper ? options.warnColor : options.ratio1Color)\r\n}, title=P1)\r\n\r\nplotline({\r\n    time: time,\r\n    value: ratio2, \r\n    color: ratio2 < ratio2Lower ? options.warnColor : (ratio2 > ratio2Upper ? options.warnColor: options.ratio2Color)\r\n}, title=P2)\r\n\r\n/*\r\nline(ratio1Upper, color=options.upperColor)\r\nline(ratio1Lower,color=options.lowerColor)\r\n\r\nline(ratio2Upper, color=options.upper2Color)\r\nline(ratio2Lower,color=options.lower2Color)\r\n*/\r\n\r\nif( upperLine === 0 ){  \r\n    upperLine = series[0].createPriceLine({ \r\n        price: ratio1Upper, \r\n        index: bar.length,\r\n        color: options.upperColor,\r\n        axisLabelVisible: false\r\n    })\r\n}\r\n\r\nif( lowerLine === 0 ){  \r\n    lowerLine = series[0].createPriceLine({ \r\n        price: ratio1Lower, \r\n        index: bar.length,\r\n        color: options.lowerColor,\r\n        axisLabelVisible: false\r\n    })\r\n}\r\n\r\nif( upperLine2 === 0 ){  \r\n    upperLine2 = series[0].createPriceLine({ \r\n        price: ratio2Upper, \r\n        index: bar.length,\r\n        color: options.upper2Color,\r\n        axisLabelVisible: false\r\n    })\r\n}\r\n\r\nif( lowerLine2 === 0 ){  \r\n    lowerLine2 = series[0].createPriceLine({ \r\n        price: ratio2Lower, \r\n        index: bar.length,\r\n        color: options.lower2Color,\r\n        axisLabelVisible: false\r\n    })\r\n}\r\nline(0)",
          "name": "Orderbook Perp",
          "priceScaleId": "orderbook-perp",
          "id": "orderbook-perp",
          "options": {
            "priceScaleId": "orderbook-perp",
            "lower": null,
            "lower2": -32,
            "upper": null,
            "upper2": 32,
            "ratio1Color": "rgb(171,71,188)",
            "lowerColor": "rgba(186,104,200,0.6)",
            "warnColor": "rgb(255,152,0)",
            "upperColor": "rgba(186,104,200,0.62)",
            "ratio2Color": "rgb(76,175,80)",
            "upper2Color": "rgba(76,175,80,0.67)",
            "lower2Color": "rgba(76,175,80,0.66)",
            "visible": true,
            "lastValueVisible": true,
            "scaleMargins": {
              "top": 0.91,
              "bottom": 0
            },
            "ratio3Color": "rgba(255,255,255,0.38)",
            "upper3": null,
            "lower3": null,
            "toggleShowLegend": true
          },
          "series": [
            "orderbook-perp",
            "tnropmol",
            "ky2xy763",
            "5ysmy3s2",
            "blvh5jrq",
            "ctn81bcb",
            "5h54p6er",
            "i29r8y3x"
          ],
          "displayName": "Orderbook Perp",
          "unsavedChanges": false,
          "optionsDefinitions": {},
          "libraryId": "orderbook-perp",
          "createdAt": 1700696855798,
          "updatedAt": 1738719859366
        },
        "perpvscoinbase": {
          "script": "binance = (BINANCE_FUTURES:btcusdt.high+BINANCE_FUTURES:btcusdt.low+BINANCE_FUTURES:btcusdt.close)/3 \nbybit = (BYBIT:BTCUSDT.high+BYBIT:BTCUSDT.low+BYBIT:BTCUSDT.close)/3 \nokx = (OKEX:BTC-USD-SWAP.high+OKEX:BTC-USD-SWAP.low+OKEX:BTC-USD-SWAP.close)/3 \ncoinbaseSpot = (COINBASE:BTC-USD.high+COINBASE:BTC-USD.low+ COINBASE:BTC-USD.close)/3\n\noptions.toggleShowLegend\npremium = coinbaseSpot - (binance+bybit+okx)/3\nbaseline = 0\n\n\nplotcloudarea(premium, baseline, title=\"CvP\")\n//line(\n//  ema(premium, 10)\n//)",
          "id": "perpvscoinbase",
          "name": "Coinbase prem.",
          "options": {
            "priceScaleId": "perpvscoinbase",
            "visible": true,
            "priceLineVisible": false,
            "lastValueVisible": true,
            "lowerLineColor": "rgba(119,255,0,0)",
            "positiveColor": "rgb(242,54,69)",
            "negativeColor": "rgba(49,121,245,0.53)",
            "higherLineColor": "rgba(255,255,255,0)",
            "priceFormat": {
              "type": "price",
              "minMove": "0.01",
              "precision": 1
            },
            "lineStyle": 1,
            "color": "rgb(209,212,220)",
            "scaleMargins": {
              "top": 0.23,
              "bottom": 0.74
            },
            "baseLineVisible": false,
            "positiveLineColor": "rgba(76,175,80,0.51)",
            "toggleShowLegend": true
          },
          "description": null,
          "createdAt": 1681264031489,
          "updatedAt": 1738719900230,
          "unsavedChanges": false,
          "series": [
            "perpvscoinbase"
          ],
          "displayName": "Coinbase prem.",
          "preview": {},
          "optionsDefinitions": {},
          "libraryId": "perpvscoinbase"
        },
        "large-liquidations": {
          "script": "// markers needs a serie to get attached to\r\nline($price.close, color=transparent)\r\n\r\n\r\nif (markers === 0) {\r\n  // first script execution (0 is default values for all persistent variables)\r\n\r\n  // Source\r\n  quote = option(default=null,type=list,options=[null, \"USD\", \"USDT\", \"TUSD\", \"USDC\"],rebuild=true)\r\n  exchange = option(default=null,type=exchange,rebuild=true)\r\n  type = option(default=perp,type=list,options=[null, \"spot\", \"perp\"],rebuild=true)\r\n  \r\n  // create a var to store already drawn markers\r\n  markers = []\r\n\r\n  // contain the last marker that can change as the bar update\r\n  repaintableMarker = null\r\n\r\n  largeLiquidation = options.largeLiquidation || 3000000\r\n}\r\n\r\nif (repaintableMarker && repaintableMarker.time < time) {\r\n  // bar is +1 since active marker was added, lock it in the array\r\n  markers.push(repaintableMarker)\r\n\r\n  // free up active marker\r\n  repaintableMarker = null\r\n}\r\n\r\nvar newMarker = null\r\n\r\n// BINANCE_FUTURES:btcusdt.lbuy \r\n// BINANCE_FUTURES:btcusdt.lsell \r\nlbuyVolume(6) = source(lbuy, quote=quote,type=type,exchange=exchange)\r\nlsellVolume(6) = source(lsell, quote=quote,type=type,exchange=exchange)\r\n\r\n// big money strategy\r\n// TODO if it has already been on once, don't show\r\nvar signal = sum(lbuyVolume,5) + sum(lsellVolume,5) > largeLiquidation \r\n\r\nif (signal && !iAmOn) {\r\n  \r\n  // newMarker is a temporary variable (not included in the indicator state)\r\n  // to avoid it being treated as persistent variable we wrap it inside parenthesis\r\n  (newMarker) = {\r\n    time: time,\r\n    position: 'inBar',\r\n    color: (options.markerColor || 'blue'),\r\n    shape: 'square'\r\n  }\r\n\r\n    iAmOn = true\r\n}else if (!signal){\r\n  iAmOn = false\r\n} \r\n\r\nif (newMarker || (repaintableMarker && !newMarker)) {\r\n  // override persistent variable repaintable marker\r\n  repaintableMarker = newMarker\r\n  \r\n  if (series[0].setMarkers) {\r\n    series[0].setMarkers(markers.concat(repaintableMarker))\r\n  }\r\n}",
          "name": "Large Liquidations",
          "priceScaleId": "right",
          "id": "large-liquidations",
          "options": {
            "priceScaleId": "right",
            "largeLiquidation": 5500000,
            "visible": true,
            "scaleMargins": {
              "top": 0.33,
              "bottom": 0.44
            },
            "markerColor": "rgb(77,208,225)",
            "lastValueVisible": false,
            "priceLineVisible": false,
            "baseLineVisible": false,
            "quote": 0,
            "exchange": null,
            "type": "perp"
          },
          "series": [
            "large-liquidations"
          ],
          "displayName": "Large Liquidations",
          "unsavedChanges": false,
          "optionsDefinitions": {
            "quote": {
              "default": 0,
              "type": "list",
              "options": [
                null,
                "USD",
                "USDT",
                "TUSD",
                "USDC"
              ],
              "rebuild": true
            },
            "exchange": {
              "default": 0,
              "type": "exchange",
              "rebuild": true
            },
            "type": {
              "default": "perp",
              "type": "list",
              "options": [
                null,
                "spot",
                "perp"
              ],
              "rebuild": true
            }
          },
          "libraryId": "large-liquidations",
          "createdAt": 1700796224070,
          "updatedAt": 1741552186037
        },
        "spotvsperp": {
          "script": "binanceOnly = options.toggleBinanceOnly || false\r\noptions.toggleShowLegend\r\nvar binance = (BINANCE:btcusdt.high+BINANCE:btcusdt.low)/2\r\nvar bitfinex = (BITFINEX:BTCUSD.high+BITFINEX:BTCUSD.low)/2\r\n\r\nvar binancePerp = (BINANCE_FUTURES:btcusdt.high+BINANCE_FUTURES:btcusdt.low)/2\r\nvar bybit = (BYBIT:BTCUSDT.high+BYBIT:BTCUSDT.low)/2\r\n\r\nif(binanceOnly){\r\n  premium =  (binancePerp) - (binance) \r\n}else{\r\n  premium =  (binancePerp + bybit) / 2 - (binance+bitfinex) / 2\r\n}\r\n\r\n\r\nbaseline = 0\r\n\r\nplotcloudarea(\r\n  premium,\r\n  baseline, \r\n  positiveColor=options.topLineColor,\r\n  negativeColor=options.bottomLineColor,\r\n  title = 'PvS'\r\n)\r\n\r\n//line(bitfinex)",
          "name": "SpotVSPerp",
          "priceScaleId": "right",
          "id": "spotvsperp",
          "options": {
            "priceScaleId": "spotvsperp",
            "visible": true,
            "scaleMargins": {
              "top": 0.92,
              "bottom": 0
            },
            "negativeLineColor": "rgba(255,235,59,0)",
            "negativeColor": "rgba(255,241,118,0.86)",
            "positiveLineColor": "rgba(255,255,255,0.53)",
            "baseLineVisible": false,
            "positiveColor": "rgba(255,255,255,0.48)",
            "lastValueVisible": true,
            "priceLineVisible": false,
            "topLineColor": "rgba(149,152,161,0.31)",
            "bottomLineColor": "rgb(255,238,88)",
            "toggleBinanceOnly": false,
            "toggleShowLegend": true
          },
          "series": [
            "spotvsperp"
          ],
          "displayName": "SpotVSPerp",
          "unsavedChanges": false,
          "optionsDefinitions": {},
          "libraryId": "spotvsperp",
          "createdAt": 1700847615822,
          "updatedAt": 1738720024869
        },
        "trades": {
          "script": "histogram(cbuy+csell)",
          "id": "trades",
          "name": "trades",
          "options": {
            "priceScaleId": "trades",
            "scaleMargins": {
              "top": 0.57,
              "bottom": 0.39
            },
            "color": "rgba(255,255,255,0.43)",
            "visible": false,
            "lineType": 1
          },
          "description": null,
          "createdAt": 1700861665246,
          "updatedAt": 1716705779731,
          "unsavedChanges": false,
          "series": [
            "trades"
          ],
          "displayName": "trades",
          "optionsDefinitions": {},
          "libraryId": "trades"
        },
        "ob-speed": {
          "script": "obUpdates = ORDERBOOK:AGGRSPOT-BTCUSD.zupdates + ORDERBOOK:AGGRPERP-BTCUSD.zupdates\r\n\r\nplothistogram(obUpdates)\r\nline(ema(obUpdates, 21))",
          "name": "OB speed",
          "priceScaleId": "ob-speed",
          "id": "ob-speed",
          "options": {
            "priceScaleId": "ob-speed",
            "scaleMargins": {
              "top": 0.62,
              "bottom": 0.33
            },
            "visible": false,
            "togglePerp": true,
            "toggleSpot": true,
            "priceFormat": {
              "type": "volume",
              "precision": 2,
              "minMove": 0.01,
              "auto": true
            }
          },
          "series": [
            "ob-speed",
            "6v510oej"
          ],
          "displayName": "OB speed",
          "unsavedChanges": false,
          "preview": {},
          "createdAt": 1701126916031,
          "updatedAt": 1701165614665,
          "optionsDefinitions": {}
        },
        "alerts": {
          "script": "// markers needs a serie to get attached to\r\ncandlestick($price, color=transparent)\r\n\r\nif (markers === 0) {\r\n  // first script execution (0 is default values for all persistent variables)\r\n\r\n  // create a var to store already drawn markers\r\n  markers = []\r\n\r\n  // contain the last marker that can change as the bar update\r\n  repaintableMarker = null\r\n\r\n  audioContext = new (window.AudioContext || window.webkitAudioContext)();\r\n\r\n}\r\n\r\nfunction playTone(frequency = 440, duration = 0.5) {\r\n  if (bar.length < lastIndex) {\r\n    return\r\n  }\r\n  const oscillator = audioContext.createOscillator();\r\n  oscillator.frequency.setValueAtTime(frequency, audioContext.currentTime);\r\n  oscillator.connect(audioContext.destination);\r\n  oscillator.start();\r\n  oscillator.stop(audioContext.currentTime + duration);\r\n}\r\n  \r\nif (repaintableMarker && repaintableMarker.time < time) {\r\n  // bar is +1 since active marker was added, lock it in the array\r\n  markers.push(repaintableMarker)\r\n\r\n  // free up active marker\r\n  repaintableMarker = null\r\n}\r\n\r\nvar newMarker = null\r\nvar myalert = ORDERBOOK:AGGRSPOT-BTCUSDALERTS.zalert\r\n\r\nlastIndex = bar.length\r\n\r\n/*\r\nexport const signalStrengthMap: SignalStrength = {\r\n    [Signal.no]: 0,\r\n    [Signal.weak]: 1,\r\n    [Signal.strong]: 2,\r\n    [Signal.vstrong]: 3,\r\n    [Signal.ultimate]: 4,\r\n};\r\n*/\r\nif( myalert && myalert.length ) {\r\n  var bearSignal = myalert[2] == 'sell'\r\n  var bullSignal = myalert[2] == 'buy'\r\n\r\n  if (bearSignal) {\r\n    \r\n    var myColor5 = 'grey'\r\n    if( myalert[3] === 'strong' ){\r\n      playTone(400)\r\n      myColor5 = 'yellow'\r\n    } else if (myalert[3] === 'vstrong' ){\r\n      myColor5 = 'red'\r\n      playTone(600)\r\n    } else if (myalert[3] === 'ultimate' ){\r\n      myColor5 = 'purple'\r\n      playTone(1000)\r\n    }else{\r\n      playTone(200)\r\n    }\r\n\r\n    // newMarker is a temporary variable (not included in the indicator state)\r\n    // to avoid it being treated as persistent variable we wrap it inside parenthesis\r\n    (newMarker) = {\r\n      time: time,\r\n      position: 'aboveBar',\r\n      color: myColor5,\r\n      shape: 'arrowDown',\r\n    }\r\n  }\r\n  \r\n\r\n  if (bullSignal) {\r\n    \r\n    var myColor2 = 'grey'\r\n    if( myalert[3] === 'strong' ){\r\n      playTone(400)\r\n      myColor2 = 'yellow'\r\n    } else if (myalert[3] === 'vstrong' ){\r\n      myColor2 = 'green'\r\n      playTone(600)\r\n    } else if (myalert[3] === 'ultimate' ){\r\n      myColor2 = 'purple'\r\n      playTone(1000)\r\n    }else{\r\n      playTone(200)\r\n    }\r\n\r\n    (newMarker) = {\r\n      time: time,\r\n      position: 'belowBar',\r\n      color:  myColor2,\r\n      shape: 'arrowUp',\r\n    }\r\n  }\r\n}\r\n\r\nif (newMarker || (repaintableMarker && !newMarker)) {\r\n  // override persistent variable repaintable marker\r\n  repaintableMarker = newMarker\r\n  \r\n  if (series[0].setMarkers) {\r\n    series[0].setMarkers(markers.concat(repaintableMarker))\r\n  }\r\n}",
          "name": "Alerts",
          "priceScaleId": "right",
          "id": "alerts",
          "options": {
            "priceScaleId": "right",
            "scaleMargins": {
              "top": 0.33,
              "bottom": 0.44
            },
            "visible": true
          },
          "series": [
            "alerts"
          ],
          "displayName": "Alerts",
          "unsavedChanges": false,
          "optionsDefinitions": {},
          "libraryId": "alerts",
          "createdAt": 1701316392533,
          "updatedAt": 1744511084987
        },
        "volume": {
          "script": "if (upColor === 0) {\r\n  if (options.showDelta) {\r\n    upColor = options.upBgColor\r\n    downColor = options.downBgColor\r\n  } else {\r\n    upColor = options.upColor\r\n    downColor = options.downColor\r\n  }\r\n}\r\n\r\nvar _vbuy = source(vbuy, type=perp)\r\nvar _vsell = source(vsell, type=perp)\r\n\r\nif (options.showDelta) {\r\n  plothistogram({ time: time, value: Math.abs(_vbuy-_vsell), color: _vbuy - _vsell > 0 ? options.upColor : options.downColor})\r\n}\r\n\r\nif (options.showVolume) {\r\n  plothistogram({ time: time, value: _vbuy + _vsell, color: _vbuy > _vsell ? upColor : downColor })\r\n}\r\n\r\nif (options.showSum) {\r\n  plotline(sum(_vbuy-_vsell, options.sumPeriods || 10))\r\n}\r\n\r\nif (options.showAvg) {\r\n  var sumCvd = sum(_vbuy-_vsell, options.sumPeriods || 10)\r\n  plotline(sma(sumCvd, options.avgPeriods || 24))\r\n}",
          "enabled": true,
          "name": "Volume",
          "description": "Volume + delta",
          "options": {
            "priceScaleId": "volume",
            "priceFormat": {
              "type": "volume"
            },
            "upColor": "rgb(76,175,80)",
            "downColor": "rgb(242,54,69)",
            "scaleMargins": {
              "top": 0.89,
              "bottom": 0
            },
            "showDelta": false,
            "upBgColor": "rgba(178,181,190,0.33)",
            "downBgColor": "rgba(93,96,107,0.38)",
            "visible": false,
            "lastValueVisible": true,
            "color": "rgba(195,168,122,0.54)",
            "showDeltaOnly": true,
            "showBoth": true,
            "showVolume": true,
            "showAvg": true,
            "showSum": true,
            "sumPeriods": 60,
            "avgPeriods": null
          },
          "id": "volume",
          "createdAt": 1700269685372,
          "updatedAt": 1724105834294,
          "series": [
            "volume",
            "ama6yk6v",
            "hne7bj24",
            "nxc9umtx"
          ],
          "unsavedChanges": false,
          "preview": {},
          "displayName": "Volume",
          "optionsDefinitions": {},
          "libraryId": "volume"
        },
        "top-bands-perps": {
          "script": "if (!pendingMarkers) {\r\n    // runs only once\r\n    pendingMarkers = [] \r\n\r\n    togglePerp = options.togglePerp || false\r\n    \r\n    moveTo = options.togglePerp ? 10 : -10\r\n    bandSize = options.bandSize || 15\r\n\r\n    maxVolume = options.maxVolume || (togglePerp ? 4000 : 1500)\r\n    minVolume = options.minVolume || (togglePerp ? 500 : 200)\r\n\r\n    level0 = options.level0 || (togglePerp ? 2000 : 800)\r\n    level1 = options.level1 || (togglePerp ? 1000 : 400)\r\n\r\n    startOpacity = options.startOpacity || 0.1\r\n\r\n    colorLevel0 = options.colorLevel0.match(/\\(([\\d.]+),([\\d.]+),([\\d.]+),?([\\d.]+)?\\)$/).slice(1,5).map(a => +a)\r\n    colorLevel1 = options.colorLevel1.match(/\\(([\\d.]+),([\\d.]+),([\\d.]+),?([\\d.]+)?\\)$/).slice(1,5).map(a => +a)\r\n    colorLevel = options.colorLevel.match(/\\(([\\d.]+),([\\d.]+),([\\d.]+),?([\\d.]+)?\\)$/).slice(1,5).map(a => +a)\r\n\r\n    colorOpacity0 = colorLevel0.pop()\r\n    colorOpacity1 = colorLevel1.pop()\r\n    colorOpacity2 = colorLevel.pop()\r\n\r\n    limitPercent = (options.limitPercent || 100) / 100\r\n\r\n    levelsToShow = options.levelsToShow || 5\r\n\r\n    printMaxBars = options.printMaxBars || 200\r\n    currentDate = new Date().getTime() / 1000 - 1000 * bar.timeframe \r\n    // store serie of price level\r\n}\r\nvar topLimit = $price.close + $price.close * limitPercent\r\nvar bottomLimit = $price.close - $price.close * limitPercent\r\n\r\nvar levels = togglePerp ? ORDERBOOK:AGGRPERP-BTCUSD.zlevels  : ORDERBOOK:AGGRSPOT-BTCUSD.zlevels\r\n\r\nif( bar.timestamp < currentDate ){\r\n  return\r\n}\r\nif( !levels ){\r\n  return\r\n}\r\n// avoid too many changes by sorting by price. not volume\r\nlevels.bids.sort( (a, b) => a[0] - b[0] ) \r\nlevels.asks.sort( (a, b) => a[0] - b[0] )\r\n\r\nvar previousPriceMap = priceMap[1]\r\npriceMap(1) = []\r\n//priceMapSerie(1) = {}\r\n\r\nfor( let i = 0; i < Math.min(levelsToShow, levels.bids.length) ; i++ ){\r\n  if( levels.bids[i][1] > minVolume && (levels.bids[i][0] >= bottomLimit && levels.bids[i][0] <= topLimit) ){\r\n\r\n    var alpha = startOpacity + (1 - startOpacity) * ((levels.bids[i][1] - minVolume) / (maxVolume - minVolume))\r\n    var alphaRounded = Math.round(alpha * 100) / 100 \r\n    var colorbase = levels.bids[i][1] > level0 ? colorLevel0 : levels.bids[i][1] > level1 ? colorLevel1 : colorLevel\r\n    var color = 'rgba(' + colorbase.join(',') + ',' + alphaRounded + ')'\r\n    priceMap.push(levels.bids[i][0])\r\n\r\n    if( previousPriceMap  && !(previousPriceMap.includes(levels.bids[i][0])) ){\r\n     // console.log('not exist', priceMap[1])\r\n      continue;\r\n    }\r\n    //priceMapSerie[levels.bids[i][0]] = i\r\n\r\n   renderer.indicators[indicatorId].series[i] = {\r\n      time: time ,\r\n      lowerValue: levels.bids[i][0],\r\n      higherValue: levels.bids[i][0] + bandSize,\r\n      color: color\r\n    }\r\n  }\r\n}\r\n\r\nfor( let i = 0; i < Math.min(levelsToShow, levels.asks.length) ; i++ ){\r\n  if( levels.asks[i][1] > minVolume && (levels.asks[i][0] >= bottomLimit && levels.asks[i][0] <= topLimit) ){\r\n    var alpha = startOpacity + (1 - startOpacity) * ((levels.asks[i][1] - minVolume) / (maxVolume - minVolume))\r\n    var alphaRounded = Math.round(alpha * 100) / 100 \r\n    var colorbase = levels.asks[i][1] > level0 ? colorLevel0 : levels.asks[i][1] > level1 ? colorLevel1 : colorLevel\r\n    var color = 'rgba(' + colorbase.join(',') + ',' + alphaRounded + ')'\r\n    priceMap[levels.asks[i][0]] = 10 + i\r\n\r\n    if( previousPriceMap  && !(previousPriceMap.includes(levels.asks[i][0])) ){\r\n     // console.log('not exist', priceMap[1])\r\n      continue;\r\n    }\r\n   // priceMapSerie[levels.bids[i][0]] = i\r\n\r\n   renderer.indicators[indicatorId].series[10 + i] = {\r\n      time: time ,\r\n      lowerValue: levels.asks[i][0],\r\n      higherValue: levels.asks[i][0] + bandSize,\r\n      color: color\r\n    }\r\n  }\r\n}\r\n\r\n\r\nreturn\r\n\r\nplotbrokenarea({ time: time, lowerValue: levels.bids[0][0] + moveTo, higherValue: levels.bids[0][0] + bandSize + moveTo } )\r\nplotbrokenarea({ time: time, lowerValue: levels.bids[1][0] + moveTo, higherValue: levels.bids[1][0] + bandSize + moveTo } )\r\nplotbrokenarea({ time: time, lowerValue: levels.bids[2][0] + moveTo, higherValue: levels.bids[2][0] + bandSize + moveTo } )\r\nplotbrokenarea({ time: time, lowerValue: levels.bids[3][0] + moveTo, higherValue: levels.bids[3][0] + bandSize + moveTo } )\r\nplotbrokenarea({ time: time, lowerValue: levels.bids[4][0] + moveTo, higherValue: levels.bids[4][0] + bandSize + moveTo } )\r\nplotbrokenarea({ time: time, lowerValue: levels.bids[5][0] + moveTo, higherValue: levels.bids[5][0] + bandSize + moveTo } )\r\nplotbrokenarea({ time: time, lowerValue: levels.bids[6][0] + moveTo, higherValue: levels.bids[6][0] + bandSize + moveTo } )\r\nplotbrokenarea({ time: time, lowerValue: levels.bids[7][0] + moveTo, higherValue: levels.bids[7][0] + bandSize + moveTo } )\r\nplotbrokenarea({ time: time, lowerValue: levels.bids[8][0] + moveTo, higherValue: levels.bids[8][0] + bandSize + moveTo } )\r\nplotbrokenarea({ time: time, lowerValue: levels.bids[9][0] + moveTo, higherValue: levels.bids[9][0] + bandSize + moveTo } )\r\n\r\nplotbrokenarea({ time: time, lowerValue: levels.asks[0][0] + moveTo, higherValue: levels.asks[0][0] + bandSize + moveTo } )\r\nplotbrokenarea({ time: time, lowerValue: levels.asks[1][0] + moveTo, higherValue: levels.asks[1][0] + bandSize + moveTo } )\r\nplotbrokenarea({ time: time, lowerValue: levels.asks[2][0] + moveTo, higherValue: levels.asks[2][0] + bandSize + moveTo } )\r\nplotbrokenarea({ time: time, lowerValue: levels.asks[3][0] + moveTo, higherValue: levels.asks[3][0] + bandSize + moveTo } )\r\nplotbrokenarea({ time: time, lowerValue: levels.asks[4][0] + moveTo, higherValue: levels.asks[4][0] + bandSize + moveTo } )\r\nplotbrokenarea({ time: time, lowerValue: levels.asks[5][0] + moveTo, higherValue: levels.asks[5][0] + bandSize + moveTo } )\r\nplotbrokenarea({ time: time, lowerValue: levels.asks[6][0] + moveTo, higherValue: levels.asks[6][0] + bandSize + moveTo } )\r\nplotbrokenarea({ time: time, lowerValue: levels.asks[7][0] + moveTo, higherValue: levels.asks[7][0] + bandSize + moveTo } )\r\nplotbrokenarea({ time: time, lowerValue: levels.asks[8][0] + moveTo, higherValue: levels.asks[8][0] + bandSize + moveTo } )\r\nplotbrokenarea({ time: time, lowerValue: levels.asks[9][0] + moveTo, higherValue: levels.asks[9][0] + bandSize + moveTo } )",
          "name": "Top Bands Perps",
          "priceScaleId": "right",
          "id": "top-bands-perps",
          "options": {
            "priceScaleId": "right",
            "scaleMargins": {
              "top": 0.33,
              "bottom": 0.44
            },
            "visible": false,
            "colorLevels": "rgb(255,255,255)",
            "colorLevel1": "rgba(41,98,255,0.91)",
            "colorLevel0": "rgb(242,54,69)",
            "colorLevel": "rgba(91,156,246,0.79)",
            "level0": 1900,
            "level1": 1600,
            "maxVolume": 3500,
            "minVolume": 300,
            "startOpacity": 0.1,
            "togglePerp": true,
            "bandSize": 25,
            "limitPercent": 10,
            "priceLineVisible": false,
            "baseLineVisible": false,
            "levelsToShow": 5,
            "printMaxBars": null
          },
          "series": [
            "top-bands-perps",
            "v4t7o8rj",
            "o4mi0s4b",
            "jwdo8hub",
            "v65sg0j2",
            "okiiihaa",
            "i3qop5df",
            "202vcymg",
            "5imz0h5b",
            "rnyz8dw6",
            "381zbpwj",
            "snkht9uk",
            "o1ej5ro8",
            "21tk7qns",
            "ajkr0esl",
            "vwqa5tfa",
            "pxrda67r",
            "clf1yo5n",
            "sbuz18aq",
            "cmr1pcb2"
          ],
          "displayName": "Top Bands Perps",
          "unsavedChanges": false,
          "optionsDefinitions": {},
          "libraryId": "top-bands-perps",
          "createdAt": 1702374821392,
          "updatedAt": 1719255705231
        },
        "overlays-all": {
          "script": "if (!pendingMarkers) {\r\n    // runs only once\r\n    lastIndex = null\r\n    pendingMarkers = []\r\n    spotColor = options.spotColor.match(/\\(([\\d.]+),([\\d.]+),([\\d.]+),?([\\d.]+)?\\)$/).slice(1,5).map(a => +a)\r\n    perpColor = options.perpColor.match(/\\(([\\d.]+),([\\d.]+),([\\d.]+),?([\\d.]+)?\\)$/).slice(1,5).map(a => +a)\r\n    binanceColor = options.binanceColor.match(/\\(([\\d.]+),([\\d.]+),([\\d.]+),?([\\d.]+)?\\)$/).slice(1,5).map(a => +a)\r\n    coinbaseColor = options.coinbaseColor.match(/\\(([\\d.]+),([\\d.]+),([\\d.]+),?([\\d.]+)?\\)$/).slice(1,5).map(a => +a)\r\n    bitmexColor = options.bitmexColor.match(/\\(([\\d.]+),([\\d.]+),([\\d.]+),?([\\d.]+)?\\)$/).slice(1, 5).map(a => +a);\r\n\r\n    //allOnColor = options.allOnColor.match(/\\(([\\d.]+),([\\d.]+),([\\d.]+),?([\\d.]+)?\\)$/).slice(1,5).map(a => +a)\r\n\r\n    spotOpacity = spotColor.pop()\r\n    perpOpacity = perpColor.pop()\r\n    binanceOpacity = binanceColor.pop()\r\n    coinbaseOpacity = coinbaseColor.pop()\r\n    bitmexOpacity = bitmexColor.pop()\r\n   // allOnColorOpacity = allOnColor.pop()\r\n\r\n    startOpacity = options.startOpacity || 0.1\r\n  \r\n    spotBuyAlerts  = [40, 63, 46, 60]\r\n    spotSellAlerts = [-40, -63, -46, -60]\r\n\r\n    perpBuyAlerts  = [37, 27, 36, 35]\r\n    perpSellAlerts = [-20, -27, -36, -35]\r\n\r\n    binanceBuyAlerts  = [70, 70, 70, 70]\r\n    binanceSellAlerts = [-70, -70, -70, -70]\r\n\r\n    coinbaseBuyAlerts  = [50, 50, 50, 50]\r\n    coinbaseSellAlerts = [-50, -70, -65, -50]\r\n\r\n    bitmexBuyAlerts  = [-50, -60, -50, -50]\r\n    bitmexSellAlerts = [-50, -60, -50, -50]\r\n\r\n    alerts = {\r\n      spot: {\r\n        buy: spotBuyAlerts,\r\n        sell: spotSellAlerts\r\n      },\r\n      perp: {\r\n        buy: perpBuyAlerts,\r\n        sell: perpSellAlerts\r\n      },\r\n      binance: {\r\n        buy: binanceBuyAlerts,\r\n        sell: binanceSellAlerts\r\n      },\r\n      coinbase: {\r\n        buy: coinbaseBuyAlerts,\r\n        sell: coinbaseSellAlerts\r\n      },\r\n        bitmex: {\r\n            buy: bitmexBuyAlerts,\r\n            sell: bitmexSellAlerts\r\n        }\r\n    }\r\n\r\n    whichColors = {\r\n      spot: spotColor,\r\n      perp: perpColor,\r\n      binance: binanceColor,\r\n      coinbase: coinbaseColor,\r\n      bitmex: bitmexColor\r\n    }\r\n\r\n    allOnIndicator = options.toggleAllOnIndicator || false,\r\n    allOnMinusOne = options.toggleAllOnMinusOne || false,\r\n\r\n    showType = {\r\n      spot: options.toggleSpot,\r\n      perp: options.togglePerp,\r\n      binance: options.toggleBinance,\r\n      coinbase: options.toggleCoinbase,\r\n      bitmex: options.toggleBitmex\r\n    }\r\n\r\n    showBand = [\r\n        options.toggleBand1 || false,\r\n        options.toggleBand2 || false,\r\n        options.toggleBand3 || false,\r\n        options.toggleBand4 || false,\r\n    ]\r\n\r\n    bitmexSmallerBand = options.toggleBitmexSmallerBand || false\r\n\r\n    lowerPercent = [options.band0lowerPercent || 0.11, 1, 2.5, 5]\r\n    upperPercent = [1, 2.5, 5, 10]  \r\n\r\n  }\r\n  // </STARTUP SCRIPT> \r\n\r\n// process only on new candle\r\nif (bar.length === lastIndex) {\r\n  return\r\n}\r\n\r\n  var ratiosPerp = ORDERBOOK:AGGRPERP-BTCUSD.zratios\r\n  var ratiosSpot = ORDERBOOK:AGGRSPOT-BTCUSD.zratios \r\n  var ratiosBinance = renderer.sources['ORDERBOOK:BINANCE-BTCUSDT'] && renderer.sources['ORDERBOOK:BINANCE-BTCUSDT'].zratios\r\n  var ratiosCoinbase = renderer.sources['ORDERBOOK:COINBASE-BTCUSD'] && renderer.sources['ORDERBOOK:COINBASE-BTCUSD'].zratios \r\n  var ratiosBitmex = renderer.sources['ORDERBOOK:BITMEX-XBTUSD'] && renderer.sources['ORDERBOOK:BITMEX-XBTUSD'].zratios\r\n\r\n  var m = [\r\n      { which: 'perp', ratios: ratiosPerp || [], bands: [] },\r\n      { which: 'spot', ratios: ratiosSpot || [], bands: [] },\r\n      { which: 'binance', ratios: ratiosBinance || [], bands: [] },\r\n      { which: 'coinbase', ratios: ratiosCoinbase || [], bands: [] },\r\n      { which: 'bitmex', ratios: ratiosBitmex || [], bands: [] }\r\n  ];\r\n\r\n  // for each ratio\r\n  for(let ratioIndex = 0; ratioIndex < 4; ratioIndex++){\r\n\r\n    // TODO must be same direction\r\n    var allOn = true;\r\n    var allowMinusOne = allOnMinusOne;\r\n\r\n    // for each type (perp, spot, binance, ...)\r\n    for(let typeIndex = 0; typeIndex < m.length; typeIndex++){\r\n\r\n      var c = m[typeIndex]\r\n\r\n      if( showBand[ratioIndex] === false || showType[c.which]  === false ){\r\n        c.bands.push([0, 0, '', '']) \r\n        continue\r\n      }\r\n        \r\n      var ratio = c.ratios.length && c.ratios[ratioIndex]\r\n      var direction = Math.sign(ratio)\r\n      var buyAlert = alerts[c.which]['buy'][ratioIndex]\r\n      var sellAlert = alerts[c.which]['sell'][ratioIndex]\r\n      var threshold = direction > 0 ? buyAlert : sellAlert\r\n      var thresholdAbs = Math.abs(threshold)\r\n    \r\n      var smaller = bitmexSmallerBand && c.which === 'bitmex' ? 2000 : 0;\r\n      var lower = $price.close + -1 * direction * (($price.close  * lowerPercent[ratioIndex]) / 100) + direction * smaller \r\n      var upper = $price.close + -1 * direction * (($price.close  * upperPercent[ratioIndex]) / 100) + direction * smaller \r\n\r\n      if( !ratio || Math.abs(ratio) < thresholdAbs ){\r\n          allOn = allowMinusOne ? true : false\r\n          allowMinusOne = false\r\n          c.bands.push([0, 0, '', '']) \r\n      }else{\r\n\r\n          var alphaRatio = Math.abs(ratio) < thresholdAbs ? 0 : startOpacity + (1 - startOpacity) * ((Math.abs(ratio) - thresholdAbs) / (100 - thresholdAbs))\r\n          var alphaRatioRounded = Math.round(alphaRatio * 100) / 100 \r\n          var colorRatio = 'rgba(' + whichColors[c.which].join(',') + ',' + alphaRatioRounded + ')'\r\n          \r\n          c.bands.push([lower, upper, colorRatio, ratio])\r\n      }\r\n      \r\n    }// end for each type\r\n\r\n    if( allOnIndicator && allOn ){\r\n      for(let typeIndex = 0; typeIndex < 4; typeIndex++){\r\n        var c = m[typeIndex]\r\n        c.bands[ratioIndex] = [lower, upper, options.allOnColor, 'all']\r\n      }\r\n    }\r\n\r\n  } // end for each ratios\r\n\r\n\r\nvar i = 0\r\n\r\nfor(let ratioIndex = 0; ratioIndex < 4; ratioIndex++){\r\n\r\n    if( showBand[ratioIndex] === false ){\r\n      i = i + m.length\r\n      continue\r\n    }\r\n\r\n    for(let typeIndex = 0; typeIndex < m.length; typeIndex++){\r\n\r\n       var c = m[typeIndex]\r\n       \r\n       if( c.bands.length && c.bands[ratioIndex][0] !== 0 ) {\r\n         renderer.indicators[indicatorId].series[i] = {\r\n          time: time, \r\n          lowerValue: c.bands[ratioIndex][0],\r\n          higherValue: c.bands[ratioIndex][1],\r\n          color:  c.bands[ratioIndex][2],\r\n          label: c.bands[ratioIndex][3]\r\n        }\r\n      }\r\n\r\n      i++\r\n    }\r\n}\r\n\r\n// set reference to bar index : avoid process next tick\r\nlastIndex = bar.length\r\n\r\nreturn\r\n//perp\r\nbrokenarea({\r\n        time: time, \r\n        lowerValue: 0,\r\n        higherValue: 0,\r\n        color:  options.color\r\n      })\r\nbrokenarea({\r\n        time: time, \r\n        lowerValue: 0,\r\n        higherValue: 0,\r\n        color:  options.color\r\n      })\r\nbrokenarea({\r\n        time: time, \r\n        lowerValue: 0,\r\n        higherValue: 0,\r\n        color:  options.color\r\n      })\r\nbrokenarea({\r\n        time: time, \r\n        lowerValue: 0,\r\n        higherValue: 0,\r\n        color:  options.color\r\n      })     \r\n      brokenarea({\r\n        time: time, \r\n        lowerValue: 0,\r\n        higherValue: 0,\r\n        color:  options.color\r\n      })\r\nbrokenarea({\r\n        time: time, \r\n        lowerValue: 0,\r\n        higherValue: 0,\r\n        color:  options.color\r\n      })\r\nbrokenarea({\r\n        time: time, \r\n        lowerValue: 0,\r\n        higherValue: 0,\r\n        color:  options.color\r\n      })\r\nbrokenarea({\r\n        time: time, \r\n        lowerValue: 0,\r\n        higherValue: 0,\r\n        color:  options.color\r\n      })   \r\n      brokenarea({\r\n        time: time, \r\n        lowerValue: 0,\r\n        higherValue: 0,\r\n        color:  options.color\r\n      })\r\nbrokenarea({\r\n        time: time, \r\n        lowerValue: 0,\r\n        higherValue: 0,\r\n        color:  options.color\r\n      })\r\nbrokenarea({\r\n        time: time, \r\n        lowerValue: 0,\r\n        higherValue: 0,\r\n        color:  options.color\r\n      })\r\nbrokenarea({\r\n        time: time, \r\n        lowerValue: 0,\r\n        higherValue: 0,\r\n        color:  options.color\r\n      })   \r\n      brokenarea({\r\n        time: time, \r\n        lowerValue: 0,\r\n        higherValue: 0,\r\n        color:  options.color\r\n      })\r\nbrokenarea({\r\n        time: time, \r\n        lowerValue: 0,\r\n        higherValue: 0,\r\n        color:  options.color\r\n      })\r\nbrokenarea({\r\n        time: time, \r\n        lowerValue: 0,\r\n        higherValue: 0,\r\n        color:  options.color\r\n      })\r\nbrokenarea({\r\n        time: time, \r\n        lowerValue: 0,\r\n        higherValue: 0,\r\n        color:  options.color\r\n      })\r\n            brokenarea({\r\n        time: time, \r\n        lowerValue: 0,\r\n        higherValue: 0,\r\n        color:  options.color\r\n      })\r\nbrokenarea({\r\n        time: time, \r\n        lowerValue: 0,\r\n        higherValue: 0,\r\n        color:  options.color\r\n      })\r\nbrokenarea({\r\n        time: time, \r\n        lowerValue: 0,\r\n        higherValue: 0,\r\n        color:  options.color\r\n      })\r\nbrokenarea({\r\n        time: time, \r\n        lowerValue: 0,\r\n        higherValue: 0,\r\n        color:  options.color\r\n      })",
          "name": "Overlays All",
          "priceScaleId": "right",
          "id": "overlays-all",
          "options": {
            "priceScaleId": "right",
            "startOpacity": "",
            "toggleAllOnIndicator": true,
            "toggleSpot": true,
            "togglePerp": true,
            "toggleBinance": true,
            "toggleCoinbase": true,
            "toggleBitmex": true,
            "toggleBand1": true,
            "toggleBand2": true,
            "toggleBand3": true,
            "toggleBand4": true,
            "spotColor": "rgb(255,235,59)",
            "perpColor": "rgb(41,98,255)",
            "binanceColor": "rgb(255,255,255)",
            "coinbaseColor": "rgb(250,161,164)",
            "bitmexColor": "rgb(171,71,188)",
            "allOnColor": "rgb(242,54,69)",
            "scaleMargins": {
              "top": 0.33,
              "bottom": 0.44
            },
            "band0lowerPercent": null,
            "visible": true,
            "toggleBitmexSmallerBand": false,
            "allOnMinusOne": null,
            "toggleAllOnMinusOne": false
          },
          "optionsDefinitions": {},
          "series": [
            "overlays-all",
            "vljwmqti",
            "cvj7v0ek",
            "iiv3r0jn",
            "pi5c0xq5",
            "cnxz8clk",
            "ivkqrwma",
            "3famby2e",
            "crobdmg2",
            "5hmxg422",
            "36klsnm2",
            "gsowqhd5",
            "twmlh3k2",
            "oj8drsau",
            "q3gqwewm",
            "3r52eoes",
            "pobgwezx",
            "edf7i1km",
            "l5ge6wuv",
            "y3sox0yq"
          ],
          "displayName": "Overlays All",
          "unsavedChanges": false,
          "libraryId": "overlays-all",
          "createdAt": 1703209928644,
          "updatedAt": 1747090249075
        },
        "averages": {
          "script": "var price = (BINANCE_FUTURES:btcusdt.high + BINANCE_FUTURES:btcusdt.low + BINANCE_FUTURES:btcusdt.close) / 3\r\nvar sumPV = sum((BINANCE_FUTURES:btcusdt.vsell + BINANCE_FUTURES:btcusdt.vbuy) * (BINANCE_FUTURES:btcusdt.high + BINANCE_FUTURES:btcusdt.low + BINANCE_FUTURES:btcusdt.close) / 3 , options.vwmaLength)\r\nvar sumV = sum((BINANCE_FUTURES:btcusdt.vsell + BINANCE_FUTURES:btcusdt.vbuy), options.vwmaLength)\r\n\r\nline(ema(price, options.emaLength))\r\n\r\nline(sumPV / sumV, color = options.vwmaColor)",
          "name": "Averages",
          "priceScaleId": "right",
          "id": "averages",
          "options": {
            "priceScaleId": "right",
            "color": "rgba(178,40,51,0.5)",
            "vwma": null,
            "vwmaColor": "rgba(251,192,45,0.75)",
            "visible": true,
            "scaleMargins": {
              "top": 0.33,
              "bottom": 0.44
            },
            "vwmaLength": 30,
            "emaLength": 121
          },
          "optionsDefinitions": {},
          "series": [
            "averages",
            "bl4jm035"
          ],
          "displayName": "Averages",
          "unsavedChanges": false,
          "libraryId": "averages",
          "createdAt": 1720157472690,
          "updatedAt": 1720157472690
        },
        "bollinger-bands": {
          "script": "var a = sma(Math.pow($price.close,2),options.length)\nvar b = Math.pow(sum($price.close,options.length),2)/Math.pow(options.length,2)\nvar stdev = Math.sqrt(a - b)\nvar src = $price.close\n\nvar basis = sma($price.close, options.length)\nvar dev = options.mult * stdev\nupper = basis + dev\nlower = basis - dev\n\nplotline(basis, color=options.basisColor)\nplotcloudarea(lower, upper)",
          "id": "bollinger-bands",
          "name": "Bollinger Bands",
          "options": {
            "priceScaleId": "right",
            "mult": 3,
            "length": 120,
            "lineStyle": 2,
            "basisColor": "rgba(129,199,132,0.5)",
            "positiveColor": "rgba(0,0,0,0.1)",
            "negativeColor": "rgba(0,0,0,0.1)",
            "lowerLineColor": "rgb(129,199,132)",
            "higherLineColor": "rgb(129,199,132)",
            "priceLineVisible": false,
            "lastValueVisible": true,
            "scaleMargins": {
              "top": 0.33,
              "bottom": 0.44
            },
            "visible": false
          },
          "description": null,
          "createdAt": 1683892675452,
          "updatedAt": 1705183212240,
          "unsavedChanges": false,
          "optionsDefinitions": {},
          "series": [
            "bollinger-bands",
            "kikctn4l"
          ],
          "displayName": "Bollinger Bands",
          "libraryId": "bollinger-bands"
        },
        "_f8i6stuml3q7zwkc": {
          "id": "_f8i6stuml3q7zwkc",
          "libraryId": "cvd-binance",
          "name": "CVD Binance",
          "script": "if (pivotsMax === 0) {\r\n  // Source\r\n  quote = option(default=null,type=list,options=[null, \"USD\", \"USDT\", \"TUSD\", \"USDC\"],rebuild=true)\r\n  exchange = option(default=null,type=exchange,rebuild=true)\r\n  type = option(default=perp,type=list,options=[null, \"spot\", \"perp\"],rebuild=true)\r\n  \r\n  maxBars = options.maxbars || 500\r\n\r\n  // Pivots\r\n  pivotsMax = options.ppCheck || 5\r\n  phPositions = []\r\n  plPositions = []\r\n  phVals = []\r\n  plVals = []\r\n  phCvds = []\r\n  plCvds = []\r\n}\r\n\r\nbuyVolume = source(vbuy, quote=quote,type=type,exchange=exchange)\r\nsellVolume = source(vsell, quote=quote,type=type,exchange=exchange)\r\n\r\ncvd(500) = cum(buyVolume - sellVolume)\r\n\r\nplotline(cvd, title=options.title || \"CVD\", color=options.cvdColor)\r\n\r\nif( options.toggleShowPricePivot ){\r\n  plotline(cvd, color=transparent)\r\n}\r\n\r\nif (options.showDivs) {\r\n  \r\n  // <markers utils>\r\n  if (markersDiv === 0) {\r\n    markersDiv = []\r\n  }\r\n  if (markersPivot === 0) {\r\n    markersPivot = []\r\n  }\r\n  \r\n  if (pendingMarkerDiv && pendingMarkerDiv.time < time) {\r\n    markersDiv.push(pendingMarkerDiv)\r\n    pendingMarkerDiv = null\r\n  }\r\n\r\n  if (pendingMarkerPivot && pendingMarkerPivot.time < time) {\r\n    markersPivot.push(pendingMarkerPivot)\r\n    pendingMarkerPivot = null\r\n  }\r\n  \r\n  var newMarkerDiv = null\r\n  var newMarkerPivot = null\r\n  // </markers utils>\r\n  \r\n  // Check if we get new Pivot High Or Pivot Low\r\n\r\n  // find pivots low (cvd and price)\r\n  //plCvd(10) = cvd //pivot_low(cvd, options.pivotLeftLength, options.pivotRightLength)\r\n  var plPrice = pivot_low($price.low, options.pivotLeftLength, options.pivotRightLength)\r\n\r\n  // find pivots high (cvd and price)\r\n  //phCvd(10) = cvd // pivot_high(cvd, options.pivotLeftLength, options.pivotRightLength)\r\n  var phPrice = pivot_high($price.high, options.pivotLeftLength, options.pivotRightLength)\r\n  \r\n  // if we have a new pivot point\r\n  if( plPrice ){\r\n    // get its CVD\r\n    var plCvd = cvd[options.pivotRightLength-1]\r\n    // add new pivot at beginning of array\r\n    plPositions.unshift(bar.length)\r\n    // add price pivot at beginning of array\r\n    plVals.unshift(plPrice)\r\n    plCvds.unshift(plCvd)\r\n  \r\n    // max pivots in memory. remove last \r\n    if( plPositions.length > pivotsMax ){\r\n      plPositions.pop();\r\n      plVals.pop()\r\n      plCvds.pop()\r\n    }\r\n\r\n    var foundDiv = false\r\n    var startPoint = 0\r\n   // cvd[100] // looks like required to load \r\n    // Go through each previous pivot\r\n    for( var i = 0; i < (options.ppCheck || 10); i++ ){ \r\n      if( i > plPositions.length || previousBarLength == 0){\r\n        break\r\n      }\r\n      var previousPrice = plVals[i]\r\n      var previousBarLength = plPositions[i]\r\n      var previousCvd = plCvds[i]\r\n\r\n      // Find distance to the previous pivot. where pivot is (bar - pivot) \r\n      var len = bar.length - options.pivotRightLength - 1 - previousBarLength\r\n      if( len > maxBars){\r\n        break\r\n      }\r\n      \r\n      var hiddenDiv = plPrice > previousPrice && phCvd < previousCvd\r\n      var regularDiv = plPrice < (previousPrice || 0) && plCvd > previousCvd\r\n\r\n      // Price lower than previous pivot but CVD is higher\r\n      if( /*len > 5 &&*/ hiddenDiv || hiddenDiv ){\r\n         foundDiv = true\r\n\r\n         newMarkerDiv = { \r\n          time: time - (options.pivotRightLength-1) * bar.timeframe,\r\n          color: options.DivcolorUp,\r\n          position: 'belowBar',\r\n          //shape: 'arrowDown',\r\n          text: '▲' + (options.togglePivotAgo ? i + 1 : '') + (hiddenDiv ? '.' : '')\r\n        }\r\n        break\r\n      }\r\n    }\r\n\r\n    if( !foundDiv && options.toggleShowPricePivot){\r\n      newMarkerPivot = {\r\n          time: time - (options.pivotRightLength-1) * bar.timeframe,\r\n          color: options.DivcolorUp,\r\n          position: 'belowBar',\r\n          //shape: 'arrowUp',\r\n          text:  'L'\r\n        }\r\n    }\r\n  }\r\n\r\n  if( phPrice ){\r\n    var phCvd = cvd[options.pivotRightLength-1]\r\n    phPositions.unshift(bar.length)\r\n    phVals.unshift(phPrice)\r\n    phCvds.unshift(phCvd)\r\n    if( phPositions.length > pivotsMax ){\r\n      phPositions.pop();\r\n      phVals.pop()\r\n      phCvds.pop()\r\n    }\r\n\r\n    var foundDiv = false\r\n    var startPoint = 0\r\n   // cvd[100] // looks like required to load \r\n    for( var i = 0; i < (options.ppCheck || 10); i++ ){ \r\n      if( i > phPositions.length || phPositions[i] == 0){\r\n        break\r\n      }\r\n      var previousPrice = phVals[i]\r\n      var previousBarLength = phPositions[i]\r\n      var previousCvd = phCvds[i]\r\n\r\n      // previousPivotDistance\r\n      var len = bar.length - options.pivotRightLength - 1 - previousBarLength\r\n\r\n      /*if( len > (options.maxbars || 100)){\r\n        break\r\n      }*/\r\n      var hiddenDiv = phPrice < previousPrice && phCvd > previousCvd\r\n      var regularDiv = phPrice > (previousPrice || Infinity) && phCvd < previousCvd\r\n\r\n      // Price greater than previous pivot but CVD lower\r\n      if( /*len > 5 &&*/ regularDiv || hiddenDiv ){\r\n        foundDiv = true\r\n         newMarkerDiv = { \r\n          time: time - (options.pivotRightLength-1) * bar.timeframe,\r\n          color: options.DivcolorDn,\r\n          position: 'aboveBar',\r\n          //shape: 'arrowDown',\r\n          text: '▼' + (options.togglePivotAgo ? i + 1 : '') + (hiddenDiv ? '.' : '')\r\n        }\r\n        break\r\n      }\r\n    }\r\n\r\n    if( !foundDiv  && options.toggleShowPricePivot ){\r\n        newMarkerPivot = { \r\n            time: time - (options.pivotRightLength-1) * bar.timeframe,\r\n            color: options.DivcolorDn,\r\n            position: 'aboveBar',\r\n            //shape: 'arrowDown',\r\n            text: 'H'\r\n          }\r\n    }\r\n  }\r\n  \r\n  // <markers utils>\r\n  if (newMarkerDiv || (pendingMarkerDiv && !newMarkerDiv)) {\r\n      pendingMarkerDiv = newMarkerDiv\r\n    \r\n    if (markersDiv.length > 100) {\r\n        markersDiv.splice(0, 1)\r\n    }\r\n      \r\n    if (series[0].setMarkers) {\r\n      series[0].setMarkers(markersDiv.concat(pendingMarkerDiv))\r\n    }\r\n  }\r\n\r\n  if (newMarkerPivot || (pendingMarkerPivot && !newMarkerPivot)) {\r\n      pendingMarkerPivot = newMarkerPivot\r\n    \r\n    if (markersPivot.length > 100) {\r\n        markersPivot.splice(0, 1)\r\n    }\r\n      \r\n    if (series[1].setMarkers) {\r\n      series[1].setMarkers(markersPivot.concat(pendingMarkerPivot))\r\n    }\r\n  }\r\n\r\n  // </markers utils>\r\n}",
          "createdAt": 1705025291244,
          "updatedAt": 1723678819248,
          "options": {
            "priceScaleId": "cvd-binance-spot",
            "scaleMargins": {
              "top": 0.04,
              "bottom": 0.8
            },
            "bodyPercentWatch": null,
            "wickRatioThreshold": null,
            "toggleDebug": null,
            "toggleVolumeWick": null,
            "togglePrintNormalObv": null,
            "toggleRefine": null,
            "showDivs": false,
            "pivotLeftLength": 25,
            "pivotRightLength": 25,
            "ppCheck": 5,
            "maxbars": null,
            "togglePivotAgo": false,
            "toggleShowPricePivot": false,
            "DivcolorUp": "rgba(255,238,88,0.51)",
            "DivcolorDn": "rgba(255,238,88,0.45)",
            "cvdColor": "rgb(255,235,59)",
            "quote": 0,
            "exchange": "BINANCE",
            "type": "spot",
            "title": "S",
            "visible": true
          },
          "optionsDefinitions": {
            "quote": {
              "default": 0,
              "type": "list",
              "options": [
                null,
                "USD",
                "USDT",
                "TUSD",
                "USDC"
              ],
              "rebuild": true
            },
            "exchange": {
              "default": 0,
              "type": "exchange",
              "rebuild": true
            },
            "type": {
              "default": "perp",
              "type": "list",
              "options": [
                null,
                "spot",
                "perp"
              ],
              "rebuild": true
            }
          },
          "series": [
            "cvd-binance",
            "uicjijty"
          ],
          "displayName": "CVD Binance",
          "unsavedChanges": false
        },
        "_pngsl31b0gpvtuas": {
          "id": "_pngsl31b0gpvtuas",
          "libraryId": "cvd-coinbase copy 1",
          "name": "CVD Coinbase",
          "script": "if (pivotsMax === 0) {\r\n  // Source\r\n  quote = option(default=null,type=list,options=[null, \"USD\", \"USDT\", \"TUSD\", \"USDC\"],rebuild=true)\r\n  exchange = option(default=null,type=exchange,rebuild=true)\r\n  type = option(default=perp,type=list,options=[null, \"spot\", \"perp\"],rebuild=true)\r\n  \r\n  maxBars = options.maxbars || 500\r\n\r\n  // Pivots\r\n  pivotsMax = options.ppCheck || 5\r\n  phPositions = []\r\n  plPositions = []\r\n  phVals = []\r\n  plVals = []\r\n  phCvds = []\r\n  plCvds = []\r\n}\r\n\r\nbuyVolume = source(vbuy, quote=quote,type=type,exchange=exchange)\r\nsellVolume = source(vsell, quote=quote,type=type,exchange=exchange)\r\n\r\ncvd(500) = cum(buyVolume - sellVolume)\r\n\r\nplotline(cvd, title=options.title || \"CVD\", color=options.cvdColor)\r\n\r\nif( options.toggleShowPricePivot ){\r\n  plotline(cvd, color=transparent)\r\n}\r\n\r\nif (options.showDivs) {\r\n  \r\n  // <markers utils>\r\n  if (markersDiv === 0) {\r\n    markersDiv = []\r\n  }\r\n  if (markersPivot === 0) {\r\n    markersPivot = []\r\n  }\r\n  \r\n  if (pendingMarkerDiv && pendingMarkerDiv.time < time) {\r\n    markersDiv.push(pendingMarkerDiv)\r\n    pendingMarkerDiv = null\r\n  }\r\n\r\n  if (pendingMarkerPivot && pendingMarkerPivot.time < time) {\r\n    markersPivot.push(pendingMarkerPivot)\r\n    pendingMarkerPivot = null\r\n  }\r\n  \r\n  var newMarkerDiv = null\r\n  var newMarkerPivot = null\r\n  // </markers utils>\r\n  \r\n  // Check if we get new Pivot High Or Pivot Low\r\n\r\n  // find pivots low (cvd and price)\r\n  //plCvd(10) = cvd //pivot_low(cvd, options.pivotLeftLength, options.pivotRightLength)\r\n  var plPrice = pivot_low($price.low, options.pivotLeftLength, options.pivotRightLength)\r\n\r\n  // find pivots high (cvd and price)\r\n  //phCvd(10) = cvd // pivot_high(cvd, options.pivotLeftLength, options.pivotRightLength)\r\n  var phPrice = pivot_high($price.high, options.pivotLeftLength, options.pivotRightLength)\r\n  \r\n  // if we have a new pivot point\r\n  if( plPrice ){\r\n    // get its CVD\r\n    var plCvd = cvd[options.pivotRightLength-1]\r\n    // add new pivot at beginning of array\r\n    plPositions.unshift(bar.length)\r\n    // add price pivot at beginning of array\r\n    plVals.unshift(plPrice)\r\n    plCvds.unshift(plCvd)\r\n  \r\n    // max pivots in memory. remove last \r\n    if( plPositions.length > pivotsMax ){\r\n      plPositions.pop();\r\n      plVals.pop()\r\n      plCvds.pop()\r\n    }\r\n\r\n    var foundDiv = false\r\n    var startPoint = 0\r\n   // cvd[100] // looks like required to load \r\n    // Go through each previous pivot\r\n    for( var i = 0; i < (options.ppCheck || 10); i++ ){ \r\n      if( i > plPositions.length || previousBarLength == 0){\r\n        break\r\n      }\r\n      var previousPrice = plVals[i]\r\n      var previousBarLength = plPositions[i]\r\n      var previousCvd = plCvds[i]\r\n\r\n      // Find distance to the previous pivot. where pivot is (bar - pivot) \r\n      var len = bar.length - options.pivotRightLength - 1 - previousBarLength\r\n      if( len > maxBars){\r\n        break\r\n      }\r\n      \r\n      var hiddenDiv = plPrice > previousPrice && phCvd < previousCvd\r\n      var regularDiv = plPrice < (previousPrice || 0) && plCvd > previousCvd\r\n\r\n      // Price lower than previous pivot but CVD is higher\r\n      if( /*len > 5 &&*/ hiddenDiv || hiddenDiv ){\r\n         foundDiv = true\r\n\r\n         newMarkerDiv = { \r\n          time: time - (options.pivotRightLength-1) * bar.timeframe,\r\n          color: options.DivcolorUp,\r\n          position: 'belowBar',\r\n          //shape: 'arrowDown',\r\n          text: '▲' + (options.togglePivotAgo ? i + 1 : '') + (hiddenDiv ? '.' : '')\r\n        }\r\n        break\r\n      }\r\n    }\r\n\r\n    if( !foundDiv && options.toggleShowPricePivot){\r\n      newMarkerPivot = {\r\n          time: time - (options.pivotRightLength-1) * bar.timeframe,\r\n          color: options.DivcolorUp,\r\n          position: 'belowBar',\r\n          //shape: 'arrowUp',\r\n          text:  'L'\r\n        }\r\n    }\r\n  }\r\n\r\n  if( phPrice ){\r\n    var phCvd = cvd[options.pivotRightLength-1]\r\n    phPositions.unshift(bar.length)\r\n    phVals.unshift(phPrice)\r\n    phCvds.unshift(phCvd)\r\n    if( phPositions.length > pivotsMax ){\r\n      phPositions.pop();\r\n      phVals.pop()\r\n      phCvds.pop()\r\n    }\r\n\r\n    var foundDiv = false\r\n    var startPoint = 0\r\n   // cvd[100] // looks like required to load \r\n    for( var i = 0; i < (options.ppCheck || 10); i++ ){ \r\n      if( i > phPositions.length || phPositions[i] == 0){\r\n        break\r\n      }\r\n      var previousPrice = phVals[i]\r\n      var previousBarLength = phPositions[i]\r\n      var previousCvd = phCvds[i]\r\n\r\n      // previousPivotDistance\r\n      var len = bar.length - options.pivotRightLength - 1 - previousBarLength\r\n\r\n      /*if( len > (options.maxbars || 100)){\r\n        break\r\n      }*/\r\n      var hiddenDiv = phPrice < previousPrice && phCvd > previousCvd\r\n      var regularDiv = phPrice > (previousPrice || Infinity) && phCvd < previousCvd\r\n\r\n      // Price greater than previous pivot but CVD lower\r\n      if( /*len > 5 &&*/ regularDiv || hiddenDiv ){\r\n\r\n        foundDiv = true\r\n         newMarkerDiv = { \r\n          time: time - (options.pivotRightLength-1) * bar.timeframe,\r\n          color: options.DivcolorDn,\r\n          position: 'aboveBar',\r\n          //shape: 'arrowDown',\r\n          text: '▼' + (options.togglePivotAgo ? i + 1 : '') + (hiddenDiv ? '.' : '')\r\n        }\r\n        break\r\n      }\r\n    }\r\n\r\n    if( !foundDiv  && options.toggleShowPricePivot ){\r\n        newMarkerPivot = { \r\n            time: time - (options.pivotRightLength-1) * bar.timeframe,\r\n            color: options.DivcolorDn,\r\n            position: 'aboveBar',\r\n            //shape: 'arrowDown',\r\n            text: 'H'\r\n          }\r\n    }\r\n  }\r\n  \r\n  // <markers utils>\r\n  if (newMarkerDiv || (pendingMarkerDiv && !newMarkerDiv)) {\r\n      pendingMarkerDiv = newMarkerDiv\r\n    \r\n    if (markersDiv.length > 10) {\r\n        markersDiv.splice(0, 1)\r\n    }\r\n      \r\n    if (series[0].setMarkers) {\r\n      series[0].setMarkers(markersDiv.concat(pendingMarkerDiv))\r\n    }\r\n  }\r\n\r\n  if (newMarkerPivot || (pendingMarkerPivot && !newMarkerPivot)) {\r\n      pendingMarkerPivot = newMarkerPivot\r\n    \r\n    if (markersPivot.length > 10) {\r\n        markersPivot.splice(0, 1)\r\n    }\r\n      \r\n    if (series[1].setMarkers) {\r\n      series[1].setMarkers(markersPivot.concat(pendingMarkerPivot))\r\n    }\r\n  }\r\n\r\n  // </markers utils>\r\n}",
          "createdAt": 1705025338594,
          "updatedAt": 1746591433528,
          "options": {
            "priceScaleId": "_pngsl31b0gpvtuas",
            "scaleMargins": {
              "top": 0.04,
              "bottom": 0.8
            },
            "bodyPercentWatch": null,
            "wickRatioThreshold": null,
            "toggleDebug": null,
            "toggleVolumeWick": null,
            "togglePrintNormalObv": null,
            "toggleRefine": null,
            "showDivs": false,
            "pivotLeftLength": 40,
            "pivotRightLength": 40,
            "ppCheck": 3,
            "maxbars": "",
            "togglePivotAgo": false,
            "toggleShowPricePivot": false,
            "DivcolorUp": "rgba(247,124,128,0.51)",
            "DivcolorDn": "rgba(247,124,128,0.51)",
            "cvdColor": "rgb(247,124,128)",
            "quote": 0,
            "exchange": "COINBASE",
            "type": "spot",
            "title": "C",
            "color": "rgb(250,161,164)",
            "visible": true,
            "lineWidth": 1
          },
          "optionsDefinitions": {
            "quote": {
              "default": 0,
              "type": "list",
              "options": [
                null,
                "USD",
                "USDT",
                "TUSD",
                "USDC"
              ],
              "rebuild": true
            },
            "exchange": {
              "default": 0,
              "type": "exchange",
              "rebuild": true
            },
            "type": {
              "default": "perp",
              "type": "list",
              "options": [
                null,
                "spot",
                "perp"
              ],
              "rebuild": true
            }
          },
          "series": [
            "cvd-coinbase copy 1",
            "i8vu5zu1"
          ],
          "displayName": "CVD Coinbase",
          "unsavedChanges": false
        },
        "_bc6lfhgxb0wc36l9": {
          "id": "_bc6lfhgxb0wc36l9",
          "libraryId": "cvd-binance-p",
          "name": "CVD Binance P",
          "script": "if (pivotsMax === 0) {\r\n  // Source\r\n  quote = option(default=null,type=list,options=[null, \"USD\", \"USDT\", \"TUSD\", \"USDC\"],rebuild=true)\r\n  exchange = option(default=null,type=exchange,rebuild=true)\r\n  type = option(default=perp,type=list,options=[null, \"spot\", \"perp\"],rebuild=true)\r\n  \r\n  maxBars = options.maxbars || 500\r\n\r\n  // Pivots\r\n  pivotsMax = options.ppCheck || 5\r\n  phPositions = []\r\n  plPositions = []\r\n  phVals = []\r\n  plVals = []\r\n  phCvds = []\r\n  plCvds = []\r\n}\r\n\r\nbuyVolume = source(vbuy, quote=quote,type=type,exchange=exchange)\r\nsellVolume = source(vsell, quote=quote,type=type,exchange=exchange)\r\n\r\ncvd(500) = cum(buyVolume - sellVolume)\r\n\r\nplotline(cvd, title=options.title || \"CVD\", color=options.cvdColor)\r\n\r\nif( options.toggleShowPricePivot ){\r\n  plotline(cvd, color=transparent)\r\n}\r\n\r\nif (options.showDivs) {\r\n  \r\n  // <markers utils>\r\n  if (markersDiv === 0) {\r\n    markersDiv = []\r\n  }\r\n  if (markersPivot === 0) {\r\n    markersPivot = []\r\n  }\r\n  \r\n  if (pendingMarkerDiv && pendingMarkerDiv.time < time) {\r\n    markersDiv.push(pendingMarkerDiv)\r\n    pendingMarkerDiv = null\r\n  }\r\n\r\n  if (pendingMarkerPivot && pendingMarkerPivot.time < time) {\r\n    markersPivot.push(pendingMarkerPivot)\r\n    pendingMarkerPivot = null\r\n  }\r\n  \r\n  var newMarkerDiv = null\r\n  var newMarkerPivot = null\r\n  // </markers utils>\r\n  \r\n  // Check if we get new Pivot High Or Pivot Low\r\n\r\n  // find pivots low (cvd and price)\r\n  //plCvd(10) = cvd //pivot_low(cvd, options.pivotLeftLength, options.pivotRightLength)\r\n  var plPrice = pivot_low($price.low, options.pivotLeftLength, options.pivotRightLength)\r\n\r\n  // find pivots high (cvd and price)\r\n  //phCvd(10) = cvd // pivot_high(cvd, options.pivotLeftLength, options.pivotRightLength)\r\n  var phPrice = pivot_high($price.high, options.pivotLeftLength, options.pivotRightLength)\r\n  \r\n  // if we have a new pivot point\r\n  if( plPrice ){\r\n    // get its CVD\r\n    var plCvd = cvd[options.pivotRightLength-1]\r\n    // add new pivot at beginning of array\r\n    plPositions.unshift(bar.length)\r\n    // add price pivot at beginning of array\r\n    plVals.unshift(plPrice)\r\n    plCvds.unshift(plCvd)\r\n  \r\n    // max pivots in memory. remove last \r\n    if( plPositions.length > pivotsMax ){\r\n      plPositions.pop();\r\n      plVals.pop()\r\n      plCvds.pop()\r\n    }\r\n\r\n    var foundDiv = false\r\n    var startPoint = 0\r\n   // cvd[100] // looks like required to load \r\n    // Go through each previous pivot\r\n    for( var i = 0; i < (options.ppCheck || 10); i++ ){ \r\n      if( i > plPositions.length || previousBarLength == 0){\r\n        break\r\n      }\r\n      var previousPrice = plVals[i]\r\n      var previousBarLength = plPositions[i]\r\n      var previousCvd = plCvds[i]\r\n\r\n      // Find distance to the previous pivot. where pivot is (bar - pivot) \r\n      var len = bar.length - options.pivotRightLength - 1 - previousBarLength\r\n      if( len > maxBars){\r\n        break\r\n      }\r\n      \r\n      var hiddenDiv = plPrice > previousPrice && phCvd < previousCvd\r\n      var regularDiv = plPrice < (previousPrice || 0) && plCvd > previousCvd\r\n\r\n      // Price lower than previous pivot but CVD is higher\r\n      if( /*len > 5 &&*/ hiddenDiv || hiddenDiv ){\r\n         foundDiv = true\r\n\r\n         newMarkerDiv = { \r\n          time: time - (options.pivotRightLength-1) * bar.timeframe,\r\n          color: options.DivcolorUp,\r\n          position: 'belowBar',\r\n          //shape: 'arrowDown',\r\n          text: '▲' + (options.togglePivotAgo ? i + 1 : '') + (hiddenDiv ? '.' : '')\r\n        }\r\n        break\r\n      }\r\n    }\r\n\r\n    if( !foundDiv && options.toggleShowPricePivot){\r\n      newMarkerPivot = {\r\n          time: time - (options.pivotRightLength-1) * bar.timeframe,\r\n          color: options.DivcolorUp,\r\n          position: 'belowBar',\r\n          //shape: 'arrowUp',\r\n          text:  'L'\r\n        }\r\n    }\r\n  }\r\n\r\n  if( phPrice ){\r\n    var phCvd = cvd[options.pivotRightLength-1]\r\n    phPositions.unshift(bar.length)\r\n    phVals.unshift(phPrice)\r\n    phCvds.unshift(phCvd)\r\n    if( phPositions.length > pivotsMax ){\r\n      phPositions.pop();\r\n      phVals.pop()\r\n      phCvds.pop()\r\n    }\r\n\r\n    var foundDiv = false\r\n    var startPoint = 0\r\n   // cvd[100] // looks like required to load \r\n    for( var i = 0; i < (options.ppCheck || 10); i++ ){ \r\n      if( i > phPositions.length || phPositions[i] == 0){\r\n        break\r\n      }\r\n      var previousPrice = phVals[i]\r\n      var previousBarLength = phPositions[i]\r\n      var previousCvd = phCvds[i]\r\n\r\n      // previousPivotDistance\r\n      var len = bar.length - options.pivotRightLength - 1 - previousBarLength\r\n\r\n      /*if( len > (options.maxbars || 100)){\r\n        break\r\n      }*/\r\n      var hiddenDiv = phPrice < previousPrice && phCvd > previousCvd\r\n      var regularDiv = phPrice > (previousPrice || Infinity) && phCvd < previousCvd\r\n\r\n      // Price greater than previous pivot but CVD lower\r\n      if( /*len > 5 &&*/ regularDiv || hiddenDiv ){\r\n        foundDiv = true\r\n         newMarkerDiv = { \r\n          time: time - (options.pivotRightLength-1) * bar.timeframe,\r\n          color: options.DivcolorDn,\r\n          position: 'aboveBar',\r\n          //shape: 'arrowDown',\r\n          text: '▼' + (options.togglePivotAgo ? i + 1 : '') + (hiddenDiv ? '.' : '')\r\n        }\r\n        break\r\n      }\r\n    }\r\n\r\n    if( !foundDiv  && options.toggleShowPricePivot ){\r\n        newMarkerPivot = { \r\n            time: time - (options.pivotRightLength-1) * bar.timeframe,\r\n            color: options.DivcolorDn,\r\n            position: 'aboveBar',\r\n            //shape: 'arrowDown',\r\n            text: 'H'\r\n          }\r\n    }\r\n  }\r\n  \r\n  // <markers utils>\r\n  if (newMarkerDiv || (pendingMarkerDiv && !newMarkerDiv)) {\r\n      pendingMarkerDiv = newMarkerDiv\r\n    \r\n    if (markersDiv.length > 100) {\r\n        markersDiv.splice(0, 1)\r\n    }\r\n      \r\n    if (series[0].setMarkers) {\r\n      series[0].setMarkers(markersDiv.concat(pendingMarkerDiv))\r\n    }\r\n  }\r\n\r\n  if (newMarkerPivot || (pendingMarkerPivot && !newMarkerPivot)) {\r\n      pendingMarkerPivot = newMarkerPivot\r\n    \r\n    if (markersPivot.length > 100) {\r\n        markersPivot.splice(0, 1)\r\n    }\r\n      \r\n    if (series[1].setMarkers) {\r\n      series[1].setMarkers(markersPivot.concat(pendingMarkerPivot))\r\n    }\r\n  }\r\n\r\n  // </markers utils>\r\n}",
          "createdAt": 1705025447976,
          "updatedAt": 1727910484701,
          "options": {
            "priceScaleId": "_bc6lfhgxb0wc36l9",
            "scaleMargins": {
              "top": 0.04,
              "bottom": 0.8
            },
            "bodyPercentWatch": null,
            "wickRatioThreshold": null,
            "toggleDebug": null,
            "toggleVolumeWick": null,
            "togglePrintNormalObv": null,
            "toggleRefine": null,
            "showDivs": false,
            "pivotLeftLength": 25,
            "pivotRightLength": 25,
            "ppCheck": 5,
            "maxbars": null,
            "togglePivotAgo": false,
            "toggleShowPricePivot": false,
            "DivcolorUp": "rgba(49,121,245,0.51)",
            "DivcolorDn": "rgba(49,121,245,0.47)",
            "cvdColor": "rgb(49,121,245)",
            "quote": null,
            "exchange": "BINANCE_FUTURES",
            "type": "perp",
            "title": "P",
            "visible": true
          },
          "optionsDefinitions": {
            "quote": {
              "default": 0,
              "type": "list",
              "options": [
                null,
                "USD",
                "USDT",
                "TUSD",
                "USDC"
              ],
              "rebuild": true
            },
            "exchange": {
              "default": 0,
              "type": "exchange",
              "rebuild": true
            },
            "type": {
              "default": "perp",
              "type": "list",
              "options": [
                null,
                "spot",
                "perp"
              ],
              "rebuild": true
            }
          },
          "series": [
            "cvd-binance-p",
            "yhqyjmui"
          ],
          "displayName": "CVD Binance P",
          "unsavedChanges": true
        },
        "_oh4jdeuqr3sfb21e": {
          "id": "_oh4jdeuqr3sfb21e",
          "libraryId": "keltner",
          "name": "keltner",
          "description": null,
          "script": "close = BINANCE_FUTURES:btcusdt.close\n\nrange = BINANCE_FUTURES:btcusdt.high - BINANCE_FUTURES:btcusdt.low\naverageRange = sma(range, options.length)\n\nbasis = ema(close, options.length)\ndev = options.mult * averageRange\nupper = basis + dev\nlower = basis - dev\n\nplotline(basis, color=options.basisColor)\nplotcloudarea(lower, upper)",
          "createdAt": 1666924136794,
          "updatedAt": 1705183470830,
          "options": {
            "priceScaleId": "right",
            "length": 55,
            "mult": 4,
            "positiveColor": "rgba(35,37,35,0.1)",
            "negativeColor": "rgba(192,174,174,0.1)",
            "higherLineColor": "rgba(137,141,138,0.25)",
            "lowerLineColor": "rgba(223,210,210,0.16)",
            "basisColor": "rgba(228,224,218,0)",
            "scaleMargins": {
              "top": 0.33,
              "bottom": 0.44
            },
            "lineWidth": 1,
            "lineStyle": 0,
            "higherLineWidth": 2,
            "lowerLineWidth": 2,
            "visible": false
          },
          "optionsDefinitions": {},
          "series": [
            "keltner",
            "5xnjxqk0"
          ],
          "displayName": "keltner",
          "unsavedChanges": true
        },
        "_my4zvk49em6mh062": {
          "id": "_my4zvk49em6mh062",
          "libraryId": "oi",
          "name": "OI",
          "script": "src = { sources: { \"ORDERBOOK:AGGROI-BTCUSD\":ORDERBOOK:AGGROI-BTCUSD }, localTimestamp: time }\r\n\r\nvar ohlc = options.useHeikinAshi ? avg_heikinashi(src) : options.useGaps ? avg_ohlc_with_gaps(src) : avg_ohlc(src)\r\n\r\nplotcandlestick(ohlc, id=openinterest)",
          "createdAt": 1705463203632,
          "updatedAt": 1738721480318,
          "options": {
            "priceScaleId": "_tdqicpndr092c1gk",
            "priceFormat": {
              "type": "volume",
              "precision": 2,
              "minMove": 0.01,
              "auto": true
            },
            "priceLineVisible": false,
            "lastValueVisible": false,
            "borderVisible": false,
            "upColor": "rgba(255,235,59,0.52)",
            "downColor": "rgba(242,54,69,0.64)",
            "borderUpColor": "rgba(255,245,157,0.66)",
            "borderDownColor": "rgba(178,40,51,0.52)",
            "wickUpColor": "rgb(223,211,144)",
            "wickDownColor": "rgba(239,67,82,0.47)",
            "useGaps": false,
            "useHeikinAshi": false,
            "scaleMargins": {
              "top": 0.02,
              "bottom": 0.88
            },
            "visible": true
          },
          "optionsDefinitions": {},
          "series": [
            "openinterest"
          ],
          "displayName": "OI",
          "unsavedChanges": false
        },
        "_tl0sezw2my46cdj3": {
          "id": "_tl0sezw2my46cdj3",
          "libraryId": "top-bands-spots-copy-1",
          "name": "Top Levels Spot/Perp",
          "script": "strokeWidth = option(default=0,type=number,description=\"For debug purpose\")\r\nminVolume = option(default=50,type=range,min=0,max=1000)\r\nmaxVolume = option(default=500,type=range,min=0,max=5000)\r\ndynamicMax = option(default=true,type=checkbox)\r\n\r\nif (!pendingMarkers) {\r\n    freeSlots = []\r\n    usedSlots = []\r\n    boundaries = {}\r\n    pendingRedraws = []\r\n    topBandAtPrice = {}\r\n\r\n    // runs only once\r\n    pendingMarkers = [] \r\n\r\n    togglePerp = options.togglePerp || false\r\n    \r\n    moveTo = options.togglePerp ? 10 : -10\r\n    bandSize = options.bandSize || 15\r\n\r\n\r\n    colorLevel0 = options.colorLevel0 \r\n    colorLevel1 = options.colorLevel1\r\n    colorLevel = options.colorLevel\r\n\r\n    limitPercent = (options.limitPercent || 100) / 100\r\n\r\n    for (var i = 0; i < series.length; i++) {\r\n      if (series[i].seriesType() !== 'BrokenArea') {\r\n        continue\r\n      }\r\n\r\n      // register each available series as a slot \r\n      freeSlots.push({\r\n        index: i,\r\n        redrawAt: 0 \r\n      })\r\n\r\n      // bind boundaries reference\r\n      // boundaries: { [cellId: string]: *bar index* }\r\n      series[i].setExtensionsBoundaries(boundaries)\r\n    }\r\n}\r\n\r\n// process only on new candle\r\n/*if (bar.length === lastIndex) {\r\n  return\r\n}*/\r\n\r\n/*if (bar.length < lastIndex) {\r\n  return\r\n}*/\r\n\r\n\r\n\r\nvar topLimit = $price.close + $price.close * limitPercent\r\nvar bottomLimit = $price.close - $price.close * limitPercent\r\n\r\nvar levels = togglePerp ? ORDERBOOK:AGGRPERP-BTCUSD.zlevels  : ORDERBOOK:AGGRSPOT-BTCUSD.zlevels\r\n\r\nif( !levels ){\r\n  return\r\n}\r\n// avoid too many changes\r\n  if( new Date().getTime() > (renderer.timestamp + renderer.timeframe)*1000 ){\r\n    return\r\n  } \r\n\r\nif( dynamicMax ){\r\n  levels.bids.sort( (a, b) => a[0] - b[0] )\r\n  levels.asks.sort( (a, b) => a[0] - b[0] )\r\n  maxVolumeDetected = levels.bids[0][1] > levels.asks[0][1] ? levels.bids[0][1] : levels.asks[0][1];\r\n}\r\n\r\nlevels.bids.forEach( (level) => {\r\n  var resolvedSrc = level[0] // price already rounded\r\n\r\n  if (!topBandAtPrice[resolvedSrc]) {\r\n    // register cell\r\n    var top = resolvedSrc + bandSize\r\n    var bottom = resolvedSrc\r\n\r\n    topBandAtPrice[resolvedSrc] = {\r\n      strength: 0,\r\n      count: 0,\r\n      top: top,\r\n      bottom: bottom\r\n    }\r\n    \r\n  }\r\n\r\n\r\n\r\n  if( level[1] < minVolume ){\r\n    return;\r\n  }\r\n\r\n\r\n  topBandAtPrice[resolvedSrc].color =  interpolate(level[1] /(dynamicMax ? maxVolumeDetected : maxVolume), colorLevel, colorLevel1, colorLevel0);\r\n  //console.log(topBandAtPrice[resolvedSrc].color);\r\n\r\n   if (pendingRedraws.indexOf(resolvedSrc) === -1) {\r\n      pendingRedraws.push(resolvedSrc)\r\n    }\r\n\r\n})\r\n\r\nlevels.asks.forEach( (level) => {\r\n  var resolvedSrc = level[0] // price already rounded\r\n\r\n  if (!topBandAtPrice[resolvedSrc]) {\r\n    // register cell\r\n    var top = resolvedSrc + bandSize\r\n    var bottom = resolvedSrc\r\n\r\n    topBandAtPrice[resolvedSrc] = {\r\n      strength: 0,\r\n      count: 0,\r\n      top: top,\r\n      bottom: bottom\r\n    }\r\n    \r\n  }\r\n\r\n  topBandAtPrice[resolvedSrc].color =  interpolate(level[1] / maxVolume, colorLevel, colorLevel1, colorLevel0);\r\n  //console.log(topBandAtPrice[resolvedSrc].color);\r\n\r\n   if (pendingRedraws.indexOf(resolvedSrc) === -1) {\r\n      pendingRedraws.push(resolvedSrc)\r\n    }\r\n\r\n})\r\n\r\nif (pendingRedraws.length) {\r\n\r\n  // round of used slot(s)\r\n  var slotsToRelease = []\r\n  for (var i = 0; i < pendingRedraws.length; i++) {\r\n    var cell = topBandAtPrice[pendingRedraws[i]]\r\n    var slot = freeSlots.find(slot => slot.redrawAt < bar.length)\r\n\r\n    if (slot) {\r\n      var usedIndex = freeSlots.splice(freeSlots.indexOf(slot), 1)[0].index\r\n      usedSlots.push(usedIndex)\r\n\r\n      if (cell.id) {\r\n        boundaries[cell.id] = bar.length\r\n      }\r\n      \r\n      cell.id = Math.random().toString()\r\n      renderer.indicators[indicatorId].series[usedIndex] ={\r\n        id: cell.id,\r\n        time: time + renderer.timeframe * 10,\r\n        lowerValue: cell.top,\r\n        higherValue: cell.bottom,\r\n        extendRight: true,\r\n        color: cell.color\r\n      }\r\n\r\n      pendingRedraws.splice(i--, 1)\r\n      slotsToRelease.push(usedIndex)\r\n    }\r\n\r\n    delete topBandAtPrice[pendingRedraws[i]]\r\n  }\r\n  for (let i = 0; i < slotsToRelease.length; i++) {\r\n    var plotIndexToFree = usedSlots.splice(usedSlots.indexOf(slotsToRelease[i]), 1)[0]\r\n    \r\n    freeSlots.push({\r\n      index: plotIndexToFree,\r\n      redrawAt: bar.length + 1\r\n    })\r\n  }\r\n \r\n}\r\n\r\n// set reference to bar index : avoid process next //tick\r\nlastIndex = bar.length\r\n\r\n// define available series\r\nif (renderer.indicators[indicatorId].series[0]) {\r\n  brokenarea(renderer.indicators[indicatorId].series[0] || { time: time }, strokeColor=options.strokeColor, strokeWidth=options.strokeWidth)\r\n}\r\nif (renderer.indicators[indicatorId].series[1]) {\r\n  brokenarea(renderer.indicators[indicatorId].series[1] || { time: time }, strokeColor=options.strokeColor, strokeWidth=options.strokeWidth)\r\n}\r\nif (renderer.indicators[indicatorId].series[2]) {\r\n  brokenarea(renderer.indicators[indicatorId].series[2] || { time: time }, strokeColor=options.strokeColor, strokeWidth=options.strokeWidth)\r\n}\r\nif (renderer.indicators[indicatorId].series[3]) {\r\n  brokenarea(renderer.indicators[indicatorId].series[3] || { time: time }, strokeColor=options.strokeColor, strokeWidth=options.strokeWidth)\r\n}\r\nif (renderer.indicators[indicatorId].series[4]) {\r\n  brokenarea(renderer.indicators[indicatorId].series[4] || { time: time }, strokeColor=options.strokeColor, strokeWidth=options.strokeWidth)\r\n}\r\nif (renderer.indicators[indicatorId].series[5]) {\r\n  brokenarea(renderer.indicators[indicatorId].series[5] || { time: time }, strokeColor=options.strokeColor, strokeWidth=options.strokeWidth)\r\n}\r\nif (renderer.indicators[indicatorId].series[6]) {\r\n  brokenarea(renderer.indicators[indicatorId].series[6] || { time: time }, strokeColor=options.strokeColor, strokeWidth=options.strokeWidth)\r\n}\r\nif (renderer.indicators[indicatorId].series[7]) {\r\n  brokenarea(renderer.indicators[indicatorId].series[7] || { time: time }, strokeColor=options.strokeColor, strokeWidth=options.strokeWidth)\r\n}\r\nif (renderer.indicators[indicatorId].series[8]) {\r\n  brokenarea(renderer.indicators[indicatorId].series[8] || { time: time }, strokeColor=options.strokeColor, strokeWidth=options.strokeWidth)\r\n}\r\nif (renderer.indicators[indicatorId].series[9]) {\r\n  brokenarea(renderer.indicators[indicatorId].series[9] || { time: time }, strokeColor=options.strokeColor, strokeWidth=options.strokeWidth)\r\n}\r\nif (renderer.indicators[indicatorId].series[10]) {\r\n  brokenarea(renderer.indicators[indicatorId].series[10] || { time: time }, strokeColor=options.strokeColor, strokeWidth=options.strokeWidth)\r\n}\r\nif (renderer.indicators[indicatorId].series[11]) {\r\n  brokenarea(renderer.indicators[indicatorId].series[11] || { time: time }, strokeColor=options.strokeColor, strokeWidth=options.strokeWidth)\r\n}\r\nif (renderer.indicators[indicatorId].series[12]) {\r\n  brokenarea(renderer.indicators[indicatorId].series[12] || { time: time }, strokeColor=options.strokeColor, strokeWidth=options.strokeWidth)\r\n}\r\nif (renderer.indicators[indicatorId].series[13]) {\r\n  brokenarea(renderer.indicators[indicatorId].series[13] || { time: time }, strokeColor=options.strokeColor, strokeWidth=options.strokeWidth)\r\n}\r\nif (renderer.indicators[indicatorId].series[14]) {\r\n  brokenarea(renderer.indicators[indicatorId].series[14] || { time: time }, strokeColor=options.strokeColor, strokeWidth=options.strokeWidth)\r\n}\r\nif (renderer.indicators[indicatorId].series[15]) {\r\n  brokenarea(renderer.indicators[indicatorId].series[15] || { time: time }, strokeColor=options.strokeColor, strokeWidth=options.strokeWidth)\r\n}\r\nif (renderer.indicators[indicatorId].series[16]) {\r\n  brokenarea(renderer.indicators[indicatorId].series[16] || { time: time }, strokeColor=options.strokeColor, strokeWidth=options.strokeWidth)\r\n}",
          "createdAt": 1713304521424,
          "updatedAt": 1713313893105,
          "options": {
            "priceScaleId": "right",
            "scaleMargins": {
              "top": 0.33,
              "bottom": 0.44
            },
            "visible": false,
            "colorLevels": "rgb(255,255,255)",
            "colorLevel1": "rgba(255,235,59,0.73)",
            "colorLevel0": "rgba(156,39,176,0.73)",
            "colorLevel": "rgba(120,123,134,0.83)",
            "level0": 700,
            "level1": 400,
            "maxVolume": 400,
            "minVolume": 0,
            "startOpacity": 0.4,
            "togglePerp": false,
            "bandSize": 20,
            "lastValueVisible": false,
            "color": "rgb(76,175,80)",
            "limitPercent": 6,
            "priceLineVisible": false,
            "strokeWidth": 0,
            "strokeColor": "rgb(49,121,245)",
            "dynamicMax": false
          },
          "optionsDefinitions": {
            "strokeWidth": {
              "default": 0,
              "type": "number",
              "description": "For debug purpose"
            },
            "minVolume": {
              "default": 50,
              "type": "range",
              "min": 0,
              "max": 1000
            },
            "maxVolume": {
              "default": 500,
              "type": "range",
              "min": 0,
              "max": 5000
            },
            "dynamicMax": {
              "default": true,
              "type": "checkbox"
            }
          },
          "displayName": "Top Levels Spot/Perp",
          "series": [
            "top-bands-spots-copy-1",
            "nl1t5gdh",
            "f3evutao",
            "qm52gkmp",
            "nx80rtjw",
            "9y7fxnd5",
            "i2s1ovta",
            "3eyzsmg7",
            "bd8jdwik",
            "cn0dqkro",
            "5nswy8bz",
            "v7g5gxfw",
            "2wt2ywef",
            "6b3w80t5",
            "75cvn3bb",
            "sw5jk510",
            "qme49h2m"
          ],
          "unsavedChanges": false
        },
        "_0mg4vqeobgu9ep1h": {
          "id": "_0mg4vqeobgu9ep1h",
          "name": "Top Bands Spots copy 2",
          "script": "strokeWidth = option(default=0,type=number,description=\"For debug purpose\")\r\n\r\nif (!pendingMarkers) {\r\n    freeSlots = []\r\n    usedSlots = []\r\n    boundaries = {}\r\n    pendingRedraws = []\r\n    topBandAtPrice = {}\r\n\r\n    // runs only once\r\n    pendingMarkers = [] \r\n\r\n    togglePerp = options.togglePerp || false\r\n    \r\n    moveTo = options.togglePerp ? 10 : -10\r\n    bandSize = options.bandSize || 15\r\n\r\n    maxVolume = options.maxVolume || (togglePerp ? 4000 : 1500)\r\n    minVolume = options.minVolume || (togglePerp ? 500 : 200)\r\n\r\n    level0 = options.level0 || (togglePerp ? 2000 : 800)\r\n    level1 = options.level1 || (togglePerp ? 1000 : 400)\r\n\r\n    startOpacity = options.startOpacity || 0.1\r\n\r\n    colorLevel0 = options.colorLevel0 \r\n    colorLevel1 = options.colorLevel1\r\n    colorLevel = options.colorLevel\r\n\r\n    /*colorLevel0 = options.colorLevel0.match(/\\(([\\d.]+),([\\d.]+),([\\d.]+),?([\\d.]+)?\\)$/).slice(1,5).map(a => +a)\r\n    colorLevel1 = options.colorLevel1.match(/\\(([\\d.]+),([\\d.]+),([\\d.]+),?([\\d.]+)?\\)$/).slice(1,5).map(a => +a)\r\n    colorLevel = options.colorLevel.match(/\\(([\\d.]+),([\\d.]+),([\\d.]+),?([\\d.]+)?\\)$/).slice(1,5).map(a => +a)\r\n\r\n    colorOpacity0 = colorLevel0.pop()\r\n    colorOpacity1 = colorLevel1.pop()\r\n    colorOpacity2 = colorLevel.pop()*/\r\n\r\n    limitPercent = (options.limitPercent || 100) / 100\r\n\r\n    for (var i = 0; i < series.length; i++) {\r\n      if (series[i].seriesType() !== 'BrokenArea') {\r\n        continue\r\n      }\r\n\r\n      // register each available series as a slot \r\n      freeSlots.push({\r\n        index: i,\r\n        redrawAt: 0 \r\n      })\r\n\r\n      // bind boundaries reference\r\n      // boundaries: { [cellId: string]: *bar index* }\r\n      series[i].setExtensionsBoundaries(boundaries)\r\n    }\r\n}\r\n\r\n// process only on new candle\r\n/*if (bar.length === lastIndex) {\r\n  return\r\n}*/\r\n\r\nif (bar.length < lastIndex) {\r\n  return\r\n}\r\n\r\nif( new Date().getTime() > (renderer.timestamp + renderer.timeframe)*1000 ){\r\n  return\r\n} \r\n\r\nvar topLimit = $price.close + $price.close * limitPercent\r\nvar bottomLimit = $price.close - $price.close * limitPercent\r\n\r\nvar levels = togglePerp ? ORDERBOOK:AGGRPERP-BTCUSD.zlevels  : ORDERBOOK:AGGRSPOT-BTCUSD.zlevels\r\n\r\nif( !levels ){\r\n  return\r\n}\r\n// avoid too many changes\r\n//levels.bids.sort( (a, b) => a[0] - b[0] )\r\n//levels.asks.sort( (a, b) => a[0] - b[0] )\r\n\r\nlevels.bids.forEach( (level) => {\r\n  var resolvedSrc = level[0] // price already rounded\r\n\r\n  if (!topBandAtPrice[resolvedSrc]) {\r\n    // register cell\r\n    var top = resolvedSrc + bandSize\r\n    var bottom = resolvedSrc\r\n\r\n    topBandAtPrice[resolvedSrc] = {\r\n      strength: 0,\r\n      count: 0,\r\n      top: top,\r\n      bottom: bottom\r\n    }\r\n    \r\n  }\r\n\r\n  topBandAtPrice[resolvedSrc].color =  interpolate(level[1] / maxVolume, colorLevel, colorLevel1, colorLevel0);\r\n  //console.log(topBandAtPrice[resolvedSrc].color);\r\n\r\n   if (pendingRedraws.indexOf(resolvedSrc) === -1) {\r\n      pendingRedraws.push(resolvedSrc)\r\n    }\r\n\r\n})\r\n\r\nlevels.asks.forEach( (level) => {\r\n  var resolvedSrc = level[0] // price already rounded\r\n\r\n  if (!topBandAtPrice[resolvedSrc]) {\r\n    // register cell\r\n    var top = resolvedSrc + bandSize\r\n    var bottom = resolvedSrc\r\n\r\n    topBandAtPrice[resolvedSrc] = {\r\n      strength: 0,\r\n      count: 0,\r\n      top: top,\r\n      bottom: bottom\r\n    }\r\n    \r\n  }\r\n\r\n  topBandAtPrice[resolvedSrc].color =  interpolate(level[1] / maxVolume, colorLevel, colorLevel1, colorLevel0);\r\n  //console.log(topBandAtPrice[resolvedSrc].color);\r\n\r\n   if (pendingRedraws.indexOf(resolvedSrc) === -1) {\r\n      pendingRedraws.push(resolvedSrc)\r\n    }\r\n\r\n})\r\n\r\nif (pendingRedraws.length) {\r\n\r\n  // round of used slot(s)\r\n  var slotsToRelease = []\r\n  for (var i = 0; i < pendingRedraws.length; i++) {\r\n    var cell = topBandAtPrice[pendingRedraws[i]]\r\n    var slot = freeSlots.find(slot => slot.redrawAt < bar.length)\r\n\r\n    if (slot) {\r\n      var usedIndex = freeSlots.splice(freeSlots.indexOf(slot), 1)[0].index\r\n      usedSlots.push(usedIndex)\r\n\r\n      if (cell.id) {\r\n        boundaries[cell.id] = bar.length\r\n      }\r\n      \r\n      cell.id = Math.random().toString()\r\n      renderer.indicators[indicatorId].series[usedIndex] ={\r\n        id: cell.id,\r\n        time: time,\r\n        lowerValue: cell.top,\r\n        higherValue: cell.bottom,\r\n        extendRight: true,\r\n        color: cell.color\r\n      }\r\n\r\n      pendingRedraws.splice(i--, 1)\r\n      slotsToRelease.push(usedIndex)\r\n    }\r\n\r\n    delete topBandAtPrice[pendingRedraws[i]]\r\n  }\r\n  for (let i = 0; i < slotsToRelease.length; i++) {\r\n    var plotIndexToFree = usedSlots.splice(usedSlots.indexOf(slotsToRelease[i]), 1)[0]\r\n    \r\n    freeSlots.push({\r\n      index: plotIndexToFree,\r\n      redrawAt: bar.length + 1\r\n    })\r\n  }\r\n \r\n}\r\n\r\n// set reference to bar index : avoid process next //tick\r\nlastIndex = bar.length\r\n\r\n// define available series\r\nif (renderer.indicators[indicatorId].series[0]) {\r\n  brokenarea(renderer.indicators[indicatorId].series[0] || { time: time }, strokeColor=options.strokeColor, strokeWidth=options.strokeWidth)\r\n}\r\nif (renderer.indicators[indicatorId].series[1]) {\r\n  brokenarea(renderer.indicators[indicatorId].series[1] || { time: time }, strokeColor=options.strokeColor, strokeWidth=options.strokeWidth)\r\n}\r\nif (renderer.indicators[indicatorId].series[2]) {\r\n  brokenarea(renderer.indicators[indicatorId].series[2] || { time: time }, strokeColor=options.strokeColor, strokeWidth=options.strokeWidth)\r\n}\r\nif (renderer.indicators[indicatorId].series[3]) {\r\n  brokenarea(renderer.indicators[indicatorId].series[3] || { time: time }, strokeColor=options.strokeColor, strokeWidth=options.strokeWidth)\r\n}\r\nif (renderer.indicators[indicatorId].series[4]) {\r\n  brokenarea(renderer.indicators[indicatorId].series[4] || { time: time }, strokeColor=options.strokeColor, strokeWidth=options.strokeWidth)\r\n}\r\nif (renderer.indicators[indicatorId].series[5]) {\r\n  brokenarea(renderer.indicators[indicatorId].series[5] || { time: time }, strokeColor=options.strokeColor, strokeWidth=options.strokeWidth)\r\n}\r\nif (renderer.indicators[indicatorId].series[6]) {\r\n  brokenarea(renderer.indicators[indicatorId].series[6] || { time: time }, strokeColor=options.strokeColor, strokeWidth=options.strokeWidth)\r\n}\r\nif (renderer.indicators[indicatorId].series[7]) {\r\n  brokenarea(renderer.indicators[indicatorId].series[7] || { time: time }, strokeColor=options.strokeColor, strokeWidth=options.strokeWidth)\r\n}\r\nif (renderer.indicators[indicatorId].series[8]) {\r\n  brokenarea(renderer.indicators[indicatorId].series[8] || { time: time }, strokeColor=options.strokeColor, strokeWidth=options.strokeWidth)\r\n}\r\nif (renderer.indicators[indicatorId].series[9]) {\r\n  brokenarea(renderer.indicators[indicatorId].series[9] || { time: time }, strokeColor=options.strokeColor, strokeWidth=options.strokeWidth)\r\n}\r\nif (renderer.indicators[indicatorId].series[10]) {\r\n  brokenarea(renderer.indicators[indicatorId].series[10] || { time: time }, strokeColor=options.strokeColor, strokeWidth=options.strokeWidth)\r\n}\r\nif (renderer.indicators[indicatorId].series[11]) {\r\n  brokenarea(renderer.indicators[indicatorId].series[11] || { time: time }, strokeColor=options.strokeColor, strokeWidth=options.strokeWidth)\r\n}\r\nif (renderer.indicators[indicatorId].series[12]) {\r\n  brokenarea(renderer.indicators[indicatorId].series[12] || { time: time }, strokeColor=options.strokeColor, strokeWidth=options.strokeWidth)\r\n}\r\nif (renderer.indicators[indicatorId].series[13]) {\r\n  brokenarea(renderer.indicators[indicatorId].series[13] || { time: time }, strokeColor=options.strokeColor, strokeWidth=options.strokeWidth)\r\n}\r\nif (renderer.indicators[indicatorId].series[14]) {\r\n  brokenarea(renderer.indicators[indicatorId].series[14] || { time: time }, strokeColor=options.strokeColor, strokeWidth=options.strokeWidth)\r\n}\r\nif (renderer.indicators[indicatorId].series[15]) {\r\n  brokenarea(renderer.indicators[indicatorId].series[15] || { time: time }, strokeColor=options.strokeColor, strokeWidth=options.strokeWidth)\r\n}\r\nif (renderer.indicators[indicatorId].series[16]) {\r\n  brokenarea(renderer.indicators[indicatorId].series[16] || { time: time }, strokeColor=options.strokeColor, strokeWidth=options.strokeWidth)\r\n}",
          "options": {
            "priceScaleId": "right",
            "scaleMargins": {
              "top": 0.33,
              "bottom": 0.44
            },
            "visible": false,
            "colorLevels": "rgb(255,255,255)",
            "colorLevel1": "rgba(255,255,255,0.94)",
            "colorLevel0": "rgba(156,39,176,0.93)",
            "colorLevel": "rgba(120,123,134,0.83)",
            "level0": 700,
            "level1": 400,
            "maxVolume": 500,
            "minVolume": 200,
            "startOpacity": 0.4,
            "togglePerp": false,
            "bandSize": 20,
            "lastValueVisible": false,
            "color": "rgb(76,175,80)",
            "limitPercent": 6,
            "priceLineVisible": false,
            "strokeWidth": 0,
            "strokeColor": "rgb(49,121,245)"
          },
          "optionsDefinitions": {
            "strokeWidth": {
              "default": 0,
              "type": "number",
              "description": "For debug purpose"
            }
          },
          "series": [
            "_0mg4vqeobgu9ep1h",
            "j8wpcdqv",
            "z9kq56yz",
            "jr87rfwo",
            "twyjnmwk",
            "f8kcair9",
            "q7agndc7",
            "dzw8em7e",
            "6qnvvgr0",
            "j9sqrt5t",
            "vvttsaaw",
            "qn3eumcx",
            "2v6zmycf",
            "wfddf24v",
            "sgu3fclf",
            "noz8l46t",
            "l2o8b7kn"
          ],
          "displayName": "Top Bands Spots copy 2"
        },
        "_cj0l7ltnxfoj1neg": {
          "id": "_cj0l7ltnxfoj1neg",
          "libraryId": "top-levels",
          "name": "Top Levels ",
          "script": "strokeWidth = option(default=0,type=number,description=\"For debug purpose\")\r\nminVolumeSpot = option(default=50,type=range,min=0,max=1000)\r\nmaxVolumeSpot = option(default=500,type=range,min=0,max=5000)\r\nminVolumePerp = option(default=50,type=range,min=0,max=1000)\r\nmaxVolumePerp = option(default=500,type=range,min=0,max=5000)\r\ndynamicMax = option(default=true,type=checkbox)\r\nuseSameColor = option(default=true,type=checkbox)\r\napplyAlpha = option(default=false,type=checkbox)\r\nuseSingleColor = option(default=false,type=checkbox)\r\neth = option(default=false,type=checkbox)\r\nalphaBase = option(default=0.2,type=range,min=0,max=1,step=0.1)\r\ncolor0 = option(default=rgba(0,0,0,0),type=color)\r\ncolor1 = option(default=rgb(63,16,87),type=color)\r\ncolor2 = option(default=rgb(76,152,134),type=color)\r\ncolor3 = option(default=rgb(240,218,24),type=color)\r\n\r\ncolorPerp0 = option(default=rgba(0,0,0,0),type=color)\r\ncolorPerp1 = option(default=rgb(63,16,87),type=color)\r\ncolorPerp2 = option(default=rgb(76,152,134),type=color)\r\ncolorPerp3 = option(default=rgb(240,218,24),type=color)\r\ncolorBoth = option(default=rgb(240,218,24),type=color)\r\nstrengthSpot = option(default=1,type=range,min=0,max=1,step=0.01)\r\nstrengthPerp = option(default=1,type=range,min=0,max=1,step=0.01)\r\n\r\nfunction interpolateAlpha(ratio, c ){\r\n  var startOpacity = alphaBase\r\n  var alpha = startOpacity + (1 - startOpacity) * ratio\r\n  var alphaRounded = Math.round(alpha * 100) / 100 \r\n  var colorBase = c.match(/\\(([\\d.]+),([\\d.]+),([\\d.]+),?([\\d.]+)?\\)$/).slice(1,5).map(a => +a)\r\n  var alpha = colorBase.pop()\r\n  var finalColor = 'rgba(' + colorBase.join(',') + ',' + alphaRounded + ')'\r\n  return finalColor\r\n}\r\n/*if( useSameColor ){  \r\n  colorPerp0 = color0\r\n  colorPerp1 = color1\r\n  colorPerp2 = color2\r\n  colorPerp3 = color3\r\n}*/\r\n\r\nif (!pendingMarkers) {\r\n    freeSlots = []\r\n    usedSlots = []\r\n    boundaries = {}\r\n    pendingRedraws = []\r\n    \r\n    // runs only once\r\n    pendingMarkers = [] \r\n    \r\n    bandSize = options.bandSize || 15\r\n\r\n    for (var i = 0; i < series.length; i++) {\r\n      if (series[i].seriesType() !== 'BrokenArea') {\r\n        continue\r\n      }\r\n\r\n      // register each available series as a slot \r\n      freeSlots.push(i)\r\n\r\n      // bind boundaries reference\r\n      // boundaries: { [cellId: string]: *bar index* }\r\n      series[i].setExtensionsBoundaries(boundaries)\r\n    }\r\n}\r\n\r\n// Don't presist\r\nvar topBandAtPrice = {};\r\n\r\nif (bar.length < lastIndex) {\r\n  //console.log('not last index')\r\n  return\r\n}\r\n\r\nvar perpLevels = eth ? ORDERBOOK:AGGRPERP-ETHUSD.zlevels  : ORDERBOOK:AGGRPERP-BTCUSD.zlevels \r\nvar spotLevels = eth ? ORDERBOOK:AGGRPERP-ETHUSD.zlevels  : ORDERBOOK:AGGRSPOT-BTCUSD.zlevels\r\n\r\n\r\nif( !perpLevels || !spotLevels || !spotLevels.bids || !perpLevels.bids){\r\n // console.log('missing level', spotLevels, perpLevels)\r\n  return\r\n}\r\n\r\n// 1.5 seconds before end of candle\r\nvar isAboutToEnd = new Date().getTime() >= (renderer.timestamp + renderer.timeframe)*1000 - 1500\r\n\r\nif( !isAboutToEnd ){\r\n  spotLevels.bids.length && spotLevels.bids.forEach( (level) => {\r\n    var resolvedSrc = level[0] // price already rounded\r\n\r\n    if (!topBandAtPrice[resolvedSrc]) {\r\n      // register cell\r\n      var top = resolvedSrc + bandSize\r\n      var bottom = resolvedSrc\r\n\r\n      topBandAtPrice[resolvedSrc] = {\r\n        strength: 0,\r\n        count: 0,\r\n        top: top,\r\n        bottom: bottom,\r\n        volume: ''\r\n      }\r\n    }\r\n\r\n    if( level[1] < minVolumeSpot ){\r\n      return;\r\n    }\r\n\r\n    var ratio = level[1] /(dynamicMax ? maxVolumeDetected : maxVolumeSpot)\r\n    topBandAtPrice[resolvedSrc].strength += Math.min(1, ratio * strengthSpot)\r\n    topBandAtPrice[resolvedSrc].volume += ' S.'+ level[1]\r\n\r\n    if( useSingleColor ){\r\n      topBandAtPrice[resolvedSrc].color = color3\r\n    }else{ \r\n      topBandAtPrice[resolvedSrc].color =  interpolate(topBandAtPrice[resolvedSrc].strength, color0, color1, color2, color3);\r\n    }\r\n    if( applyAlpha ){\r\n      topBandAtPrice[resolvedSrc].color =  interpolateAlpha(topBandAtPrice[resolvedSrc].strength, topBandAtPrice[resolvedSrc].color);\r\n    }\r\n\r\n    if (pendingRedraws.indexOf(resolvedSrc) === -1) {\r\n      pendingRedraws.push(resolvedSrc)\r\n    }\r\n  })\r\n\r\n  spotLevels.asks.length && spotLevels.asks.forEach( (level) => {\r\n    var resolvedSrc = level[0] // price already rounded\r\n\r\n    if (!topBandAtPrice[resolvedSrc]) {\r\n      // register cell\r\n      var top = resolvedSrc + bandSize\r\n      var bottom = resolvedSrc\r\n\r\n      topBandAtPrice[resolvedSrc] = {\r\n        strength: 0,\r\n        count: 0,\r\n        top: top,\r\n        bottom: bottom,\r\n        volume: ''\r\n      }\r\n    }\r\n\r\n    if( level[1] < minVolumeSpot ){\r\n      return;\r\n    }\r\n\r\n    var ratio = level[1] /(dynamicMax ? maxVolumeDetected : maxVolumeSpot)\r\n    topBandAtPrice[resolvedSrc].strength += Math.min(1, ratio*strengthSpot)\r\n    topBandAtPrice[resolvedSrc].volume += ' S.'+ level[1]\r\n\r\n    if( useSingleColor ){\r\n      topBandAtPrice[resolvedSrc].color = color3\r\n    }else{ \r\n      topBandAtPrice[resolvedSrc].color =  interpolate(topBandAtPrice[resolvedSrc].strength, color0, color1, color2, color3);\r\n    }\r\n    if( applyAlpha ){\r\n      topBandAtPrice[resolvedSrc].color =  interpolateAlpha(topBandAtPrice[resolvedSrc].strength, topBandAtPrice[resolvedSrc].color);\r\n    }\r\n\r\n    if (pendingRedraws.indexOf(resolvedSrc) === -1) {\r\n      pendingRedraws.push(resolvedSrc)\r\n    }\r\n  })\r\n\r\n  perpLevels.bids.length && perpLevels.bids.forEach( (level) => {\r\n    var resolvedSrc = level[0] // price already rounded\r\n\r\n    if (!topBandAtPrice[resolvedSrc]) {\r\n      // register cell\r\n      var top = resolvedSrc + bandSize\r\n      var bottom = resolvedSrc\r\n\r\n      topBandAtPrice[resolvedSrc] = {\r\n        strength: 0,\r\n        count: 0,\r\n        top: top,\r\n        bottom: bottom,\r\n        volume: ''\r\n      }\r\n    }\r\n\r\n    if( level[1] < minVolumePerp ){\r\n      return;\r\n    }\r\n\r\n    var ratio = level[1] /(dynamicMax ? maxVolumeDetected : maxVolumePerp)\r\n    var hasSpotLevel = topBandAtPrice[resolvedSrc].strength > 0.3\r\n    topBandAtPrice[resolvedSrc].strength += Math.min(1, ratio*strengthPerp)\r\n    topBandAtPrice[resolvedSrc].volume += ' P.'+level[1]\r\n\r\n    if( hasSpotLevel ){\r\n      topBandAtPrice[resolvedSrc].color = colorBoth\r\n    } else if( useSingleColor ){\r\n      topBandAtPrice[resolvedSrc].color = colorPerp3\r\n    } else if( useSameColor ){\r\n      topBandAtPrice[resolvedSrc].color = interpolate(topBandAtPrice[resolvedSrc].strength, color0, color1, color2, color3);\r\n    }else{\r\n      topBandAtPrice[resolvedSrc].color = interpolate(topBandAtPrice[resolvedSrc].strength, colorPerp0, colorPerp1, colorPerp2, colorPerp3);\r\n    }\r\n    if( applyAlpha ){\r\n      topBandAtPrice[resolvedSrc].color = interpolateAlpha(topBandAtPrice[resolvedSrc].strength, topBandAtPrice[resolvedSrc].color );\r\n    }\r\n\r\n    if (pendingRedraws.indexOf(resolvedSrc) === -1) {\r\n      pendingRedraws.push(resolvedSrc)\r\n    }\r\n  })\r\n\r\n  perpLevels.asks.length && perpLevels.asks.forEach( (level) => {\r\n    var resolvedSrc = level[0] // price already rounded\r\n\r\n    if (!topBandAtPrice[resolvedSrc]) {\r\n      // register cell\r\n      var top = resolvedSrc + bandSize\r\n      var bottom = resolvedSrc\r\n\r\n      topBandAtPrice[resolvedSrc] = {\r\n        strength: 0,\r\n        count: 0,\r\n        top: top,\r\n        bottom: bottom,\r\n        volume: ''\r\n      }\r\n    }\r\n\r\n    if( level[1] < minVolumePerp ){\r\n      return;\r\n    }\r\n\r\n    var ratio = level[1] /(dynamicMax ? maxVolumeDetected : maxVolumePerp)\r\n    var hasSpotLevel = topBandAtPrice[resolvedSrc].strength > 0.3\r\n    topBandAtPrice[resolvedSrc].strength += Math.min(1, ratio*strengthPerp)\r\n    topBandAtPrice[resolvedSrc].volume += ' P.'+level[1]\r\n\r\n    if( hasSpotLevel ){\r\n      topBandAtPrice[resolvedSrc].color = colorBoth\r\n    } else if( useSingleColor ){\r\n      topBandAtPrice[resolvedSrc].color = colorPerp3\r\n    } else if( useSameColor ){\r\n      topBandAtPrice[resolvedSrc].color = interpolate(topBandAtPrice[resolvedSrc].strength, color0, color1, color2, color3);\r\n    }else{\r\n      topBandAtPrice[resolvedSrc].color = interpolate(topBandAtPrice[resolvedSrc].strength, colorPerp0, colorPerp1, colorPerp2, colorPerp3);\r\n    }\r\n    if( applyAlpha ){\r\n      topBandAtPrice[resolvedSrc].color = interpolateAlpha(topBandAtPrice[resolvedSrc].strength, topBandAtPrice[resolvedSrc].color );\r\n    }\r\n    \r\n    if (pendingRedraws.indexOf(resolvedSrc) === -1) {\r\n      pendingRedraws.push(resolvedSrc)\r\n    }\r\n  })\r\n}else{\r\n  for (var i = 0; i < series.length; i++) {\r\n    if (series[i].seriesType() !== 'BrokenArea') {\r\n      continue\r\n    }\r\n\r\n     renderer.indicators[indicatorId].series[i] ={\r\n        id: Math.random().toString(),\r\n        time: time + renderer.timeframe,\r\n        lowerValue: 0,\r\n        higherValue: 0,\r\n        extendRight: false,\r\n        label: ''\r\n      }\r\n  }\r\n}\r\n\r\nif (pendingRedraws.length) {\r\n  \r\n  // free all the slots that won't be redrawn\r\n  for (var i = 0; i < usedSlots.length; i++) {\r\n\r\n    var level = usedSlots[i][1]\r\n\r\n    // do we have a level to redraw?\r\n    var exist = pendingRedraws.includes(level)\r\n    if( !exist ){\r\n      var usedIndex = usedSlots[i][0]\r\n\r\n      freeSlots.push(usedIndex)\r\n      usedSlots.splice(i--, 1)\r\n      renderer.indicators[indicatorId].series[usedIndex] ={\r\n        id: Math.random().toString(),\r\n        time: time + renderer.timeframe,\r\n        lowerValue: 0,\r\n        higherValue: 0,\r\n        extendRight: false,\r\n        label: ''\r\n      }\r\n    }\r\n\r\n  }\r\n\r\n  // round of used slot(s)\r\n  var slotsToRelease = []\r\n  for (var i = 0; i < pendingRedraws.length; i++) {\r\n    var cell = topBandAtPrice[pendingRedraws[i]]\r\n    // find a brokenarea index to use\r\n    // var slot = freeSlots.find(slot => slot.redrawAt <= bar.length)\r\n    // find a brokenarea already use to draw same level or first one\r\n    var reuse = usedSlots.find(slot => slot[1] === pendingRedraws[i])\r\n    \r\n    var useIndex = (reuse && reuse[0]) || (freeSlots.length && freeSlots[0]) \r\n\r\n    // if we have one\r\n    if (useIndex >= 0) {\r\n      // removed it from freeSlots\r\n      freeSlots.splice(freeSlots.indexOf(useIndex), 1)\r\n      // put it in usedSlots\r\n      !reuse && usedSlots.push([useIndex, pendingRedraws[i]])\r\n      \r\n      if (cell.id) {\r\n        //boundaries[cell.id] = bar.length\r\n      }\r\n      \r\n      cell.id = Math.random().toString()\r\n      renderer.indicators[indicatorId].series[useIndex] ={\r\n        id: cell.id,\r\n        time: time + renderer.timeframe,\r\n        lowerValue: cell.top,\r\n        higherValue: cell.bottom,\r\n        extendRight: true,\r\n        color: cell.color,\r\n        label: cell.volume\r\n      }\r\n\r\n      pendingRedraws.splice(i--, 1)\r\n\r\n      //slotsToRelease.push([usedIndex, pendingRedraws[i]])\r\n    }else{\r\n      console.log('No more slots')\r\n    }\r\n\r\n    //delete topBandAtPrice[pendingRedraws[i]]\r\n  }\r\n  /*for (let i = 0; i < slotsToRelease.length; i++) {\r\n    var ind = slotsToRelease[i][0]\r\n    var level = slotsToRelease[i][1]\r\n    var plotIndexToFree = usedSlots.splice(usedSlots.indexOf(ind), 1)[0]\r\n    \r\n    freeSlots.push({\r\n      index: plotIndexToFree,\r\n      level: level\r\n    })\r\n  }*/\r\n \r\n}\r\n\r\n// set reference to bar index : avoid process next //tick\r\nlastIndex = bar.length\r\n\r\n// define available series\r\nif (renderer.indicators[indicatorId].series[0]) {\r\n  brokenarea(renderer.indicators[indicatorId].series[0] || { time: time }, strokeColor=options.strokeColor, strokeWidth=options.strokeWidth)\r\n}\r\nif (renderer.indicators[indicatorId].series[1]) {\r\n  brokenarea(renderer.indicators[indicatorId].series[1] || { time: time }, strokeColor=options.strokeColor, strokeWidth=options.strokeWidth)\r\n}\r\nif (renderer.indicators[indicatorId].series[2]) {\r\n  brokenarea(renderer.indicators[indicatorId].series[2] || { time: time }, strokeColor=options.strokeColor, strokeWidth=options.strokeWidth)\r\n}\r\nif (renderer.indicators[indicatorId].series[3]) {\r\n  brokenarea(renderer.indicators[indicatorId].series[3] || { time: time }, strokeColor=options.strokeColor, strokeWidth=options.strokeWidth)\r\n}\r\nif (renderer.indicators[indicatorId].series[4]) {\r\n  brokenarea(renderer.indicators[indicatorId].series[4] || { time: time }, strokeColor=options.strokeColor, strokeWidth=options.strokeWidth)\r\n}\r\nif (renderer.indicators[indicatorId].series[5]) {\r\n  brokenarea(renderer.indicators[indicatorId].series[5] || { time: time }, strokeColor=options.strokeColor, strokeWidth=options.strokeWidth)\r\n}\r\nif (renderer.indicators[indicatorId].series[6]) {\r\n  brokenarea(renderer.indicators[indicatorId].series[6] || { time: time }, strokeColor=options.strokeColor, strokeWidth=options.strokeWidth)\r\n}\r\nif (renderer.indicators[indicatorId].series[7]) {\r\n  brokenarea(renderer.indicators[indicatorId].series[7] || { time: time }, strokeColor=options.strokeColor, strokeWidth=options.strokeWidth)\r\n}\r\nif (renderer.indicators[indicatorId].series[8]) {\r\n  brokenarea(renderer.indicators[indicatorId].series[8] || { time: time }, strokeColor=options.strokeColor, strokeWidth=options.strokeWidth)\r\n}\r\nif (renderer.indicators[indicatorId].series[9]) {\r\n  brokenarea(renderer.indicators[indicatorId].series[9] || { time: time }, strokeColor=options.strokeColor, strokeWidth=options.strokeWidth)\r\n}\r\nif (renderer.indicators[indicatorId].series[10]) {\r\n  brokenarea(renderer.indicators[indicatorId].series[10] || { time: time }, strokeColor=options.strokeColor, strokeWidth=options.strokeWidth)\r\n}\r\nif (renderer.indicators[indicatorId].series[11]) {\r\n  brokenarea(renderer.indicators[indicatorId].series[11] || { time: time }, strokeColor=options.strokeColor, strokeWidth=options.strokeWidth)\r\n}\r\nif (renderer.indicators[indicatorId].series[12]) {\r\n  brokenarea(renderer.indicators[indicatorId].series[12] || { time: time }, strokeColor=options.strokeColor, strokeWidth=options.strokeWidth)\r\n}\r\nif (renderer.indicators[indicatorId].series[13]) {\r\n  brokenarea(renderer.indicators[indicatorId].series[13] || { time: time }, strokeColor=options.strokeColor, strokeWidth=options.strokeWidth)\r\n}\r\nif (renderer.indicators[indicatorId].series[14]) {\r\n  brokenarea(renderer.indicators[indicatorId].series[14] || { time: time }, strokeColor=options.strokeColor, strokeWidth=options.strokeWidth)\r\n}\r\nif (renderer.indicators[indicatorId].series[15]) {\r\n  brokenarea(renderer.indicators[indicatorId].series[15] || { time: time }, strokeColor=options.strokeColor, strokeWidth=options.strokeWidth)\r\n}\r\nif (renderer.indicators[indicatorId].series[16]) {\r\n  brokenarea(renderer.indicators[indicatorId].series[16] || { time: time }, strokeColor=options.strokeColor, strokeWidth=options.strokeWidth)\r\n}\r\nif (renderer.indicators[indicatorId].series[17]) {\r\n  brokenarea(renderer.indicators[indicatorId].series[17] || { time: time }, strokeColor=options.strokeColor, strokeWidth=options.strokeWidth)\r\n}\r\nif (renderer.indicators[indicatorId].series[18]) {\r\n  brokenarea(renderer.indicators[indicatorId].series[18] || { time: time }, strokeColor=options.strokeColor, strokeWidth=options.strokeWidth)\r\n}\r\nif (renderer.indicators[indicatorId].series[19]) {\r\n  brokenarea(renderer.indicators[indicatorId].series[19] || { time: time }, strokeColor=options.strokeColor, strokeWidth=options.strokeWidth)\r\n}",
          "createdAt": 1713314961958,
          "updatedAt": 1746675083719,
          "options": {
            "priceScaleId": "right",
            "scaleMargins": {
              "top": 0.33,
              "bottom": 0.44
            },
            "visible": true,
            "colorLevels": "rgb(255,255,255)",
            "colorLevel1": "rgba(255,235,59,0.73)",
            "colorLevel0": "rgba(156,39,176,0.73)",
            "colorLevel": "rgba(120,123,134,0.83)",
            "level0": 700,
            "level1": 400,
            "maxVolume": 400,
            "minVolume": 0,
            "startOpacity": 0.4,
            "togglePerp": false,
            "bandSize": 14,
            "lastValueVisible": false,
            "color": "rgb(76,175,80)",
            "limitPercent": 6,
            "priceLineVisible": false,
            "strokeWidth": 0,
            "strokeColor": "rgb(255,255,255)",
            "dynamicMax": false,
            "minVolumeSpot": 50,
            "maxVolumeSpot": 500,
            "minVolumePerp": 100,
            "maxVolumePerp": 800,
            "eth": false,
            "color1": "rgba(255,255,255,0.55)",
            "strengthSpot": 1,
            "strengthPerp": 1,
            "useSameColor": false,
            "colorPerp0": "rgba(42,46,57,0.08)",
            "colorPerp1": "rgba(255,255,255,0.55)",
            "colorPerp2": "rgb(255,152,0)",
            "colorPerp3": "rgb(41,98,255)",
            "colorBoth": "rgb(178,40,51)",
            "color2": "rgb(56,142,60)",
            "color3": "rgb(255,235,59)",
            "useAlpha": true,
            "applyAlpha": false,
            "useSingleColor": false,
            "alphaBase": 0.1,
            "color0": "rgba(42,46,57,0.08)",
            "priceFormat": {
              "type": "price",
              "precision": 1,
              "minMove": 0.1,
              "auto": true
            }
          },
          "optionsDefinitions": {
            "strokeWidth": {
              "default": 0,
              "type": "number",
              "description": "For debug purpose"
            },
            "minVolumeSpot": {
              "default": 50,
              "type": "range",
              "min": 0,
              "max": 1000
            },
            "maxVolumeSpot": {
              "default": 500,
              "type": "range",
              "min": 0,
              "max": 5000
            },
            "minVolumePerp": {
              "default": 50,
              "type": "range",
              "min": 0,
              "max": 1000
            },
            "maxVolumePerp": {
              "default": 500,
              "type": "range",
              "min": 0,
              "max": 5000
            },
            "dynamicMax": {
              "default": true,
              "type": "checkbox"
            },
            "useSameColor": {
              "default": true,
              "type": "checkbox"
            },
            "applyAlpha": {
              "default": 0,
              "type": "checkbox"
            },
            "useSingleColor": {
              "default": 0,
              "type": "checkbox"
            },
            "eth": {
              "default": 0,
              "type": "checkbox"
            },
            "alphaBase": {
              "default": 0.2,
              "type": "range",
              "min": 0,
              "max": 1,
              "step": 0.1
            },
            "color0": {
              "default": "rgba(0,0,0,0)",
              "type": "color"
            },
            "color1": {
              "default": "rgb(63,16,87)",
              "type": "color"
            },
            "color2": {
              "default": "rgb(76,152,134)",
              "type": "color"
            },
            "color3": {
              "default": "rgb(240,218,24)",
              "type": "color"
            },
            "colorPerp0": {
              "default": "rgba(0,0,0,0)",
              "type": "color"
            },
            "colorPerp1": {
              "default": "rgb(63,16,87)",
              "type": "color"
            },
            "colorPerp2": {
              "default": "rgb(76,152,134)",
              "type": "color"
            },
            "colorPerp3": {
              "default": "rgb(240,218,24)",
              "type": "color"
            },
            "colorBoth": {
              "default": "rgb(240,218,24)",
              "type": "color"
            },
            "strengthSpot": {
              "default": 1,
              "type": "range",
              "min": 0,
              "max": 1,
              "step": 0.01
            },
            "strengthPerp": {
              "default": 1,
              "type": "range",
              "min": 0,
              "max": 1,
              "step": 0.01
            }
          },
          "displayName": "Top Levels ",
          "series": [
            "top-levels",
            "had7qi5d",
            "4oss6u5x",
            "grhih3a1",
            "gmns9eye",
            "gvtioxhh",
            "twwoaelb",
            "td81x5qz",
            "25sjyjbh",
            "ohg5pqun",
            "1fhb4asz",
            "db2j24q6",
            "wg0ob89p",
            "8mxx01ht",
            "t49wm0ft",
            "2wnyz8l2",
            "9gc1xv6f",
            "1ap9bysm",
            "mt6ckkq4",
            "vcpsz9r4"
          ],
          "unsavedChanges": true
        },
        "_zutos8s4mda6l4nl": {
          "id": "_zutos8s4mda6l4nl",
          "libraryId": "ls",
          "name": "LS",
          "script": "line(ORDERBOOK:AGGRLS-BTCUSD.open)",
          "createdAt": 1705956281484,
          "updatedAt": 1715651120016,
          "options": {
            "priceScaleId": "_s5m8wbbdhz2oi1cs",
            "scaleMargins": {
              "top": 0.62,
              "bottom": 0.08
            },
            "priceFormat": {
              "type": "volume",
              "precision": 2,
              "minMove": 0.01,
              "auto": true
            },
            "lastValueVisible": true,
            "visible": true,
            "priceLineVisible": false,
            "lineStyle": 4,
            "lineType": 1,
            "baseLineVisible": false,
            "toggleShowLegend": null
          },
          "optionsDefinitions": {},
          "series": [
            "ls"
          ],
          "displayName": "LS",
          "unsavedChanges": false
        },
        "_1az7ecqr58tvft65": {
          "id": "_1az7ecqr58tvft65",
          "libraryId": "spot-bands copy 1",
          "name": "Spot 1% delta",
          "script": "if (!pendingMarkers) {\r\n    // runs only once\r\n    pendingMarkers = []\r\n\r\n    showType = {\r\n      spot: options.toggleSpot,\r\n      perp: options.togglePerp,\r\n      binance: options.toggleBinance,\r\n      coinbase: options.toggleCoinbase,\r\n      bitmex: options.toggleBitmex\r\n    }\r\n\r\n    toAdd = [\r\n        options.toggleBand1 || false,\r\n        options.toggleBand2 || false,\r\n        options.toggleBand3 || false,\r\n        options.toggleBand4 || false,\r\n    ]\r\n\r\n    highDiffSpot = options.highDiffSpot || 6500\r\n    highDiffPerp = options.highDiffPerp || 24000\r\n\r\n    highDiff = showType.spot ? highDiffSpot : highDiffPerp\r\n\r\n    showDelta = options.toggleDelta || false\r\n    showRatios = options.toggleRatios || false\r\n    showLines = options.toggleLines || false\r\n}\r\n// </STARTUP SCRIPT> \r\nvar bidsPerp = ORDERBOOK:AGGRPERP-BTCUSD.zbids\r\nvar asksPerp = ORDERBOOK:AGGRPERP-BTCUSD.zasks\r\nvar bidsSpot = ORDERBOOK:AGGRSPOT-BTCUSD.zbids \r\nvar asksSpot = ORDERBOOK:AGGRSPOT-BTCUSD.zasks \r\nvar bidsBinance = renderer.sources['ORDERBOOK:BINANCE-BTCUSDT'] && renderer.sources['ORDERBOOK:BINANCE-BTCUSDT'].zbids\r\nvar asksBinance = renderer.sources['ORDERBOOK:BINANCE-BTCUSDT'] && renderer.sources['ORDERBOOK:BINANCE-BTCUSDT'].zasks\r\nvar bidsCoinbase = renderer.sources['ORDERBOOK:COINBASE-BTCUSD'] && renderer.sources['ORDERBOOK:COINBASE-BTCUSD'].zbids\r\nvar asksCoinbase = renderer.sources['ORDERBOOK:COINBASE-BTCUSD'] && renderer.sources['ORDERBOOK:COINBASE-BTCUSD'].zasks\r\nvar bidsBitmex = renderer.sources['ORDERBOOK:BITMEX-XBTUSD'] && renderer.sources['ORDERBOOK:BITMEX-XBTUSD'].zbids\r\nvar asksBitmex = renderer.sources['ORDERBOOK:BITMEX-XBTUSD'] && renderer.sources['ORDERBOOK:BITMEX-XBTUSD'].zasks\r\n\r\nvar m = [\r\n    { which: 'perp', bids: bidsPerp || [], asks: asksPerp || [] },\r\n    { which: 'spot', bids: bidsSpot || [], asks: asksSpot || [] },\r\n    { which: 'binance', bids: bidsBinance || [], asks: asksBinance || [] },\r\n    { which: 'coinbase', bids: bidsCoinbase || [], asks: asksCoinbase || [] },\r\n    { which: 'bitmex', bids: bidsBitmex || [], asks: asksBitmex || [] }\r\n];\r\n\r\n// per type\r\nvar ratios = {};\r\n\r\n// total and sum\r\nvar _bids = 0\r\nvar _asks = 0\r\n\r\nfor(let typeIndex = 0; typeIndex < m.length; typeIndex++){\r\n\r\n    var c = m[typeIndex]\r\n\r\n    if( showType[c.which]  === false ){\r\n      continue\r\n    }\r\n    var mybids = 0\r\n    var myasks = 0\r\n\r\n    for(let i = 0; i < 4; i++){\r\n        if( toAdd[i] === true ){\r\n            _bids += c.bids[i] || 0\r\n            _asks += c.asks[i] || 0\r\n            mybids += c.bids[i] || 0\r\n            myasks += c.asks[i] || 0\r\n        }\r\n    }\r\n\r\n    ratios[c.which] = Math.round(((mybids-myasks)/(mybids+myasks))*100)\r\n}\r\n\r\nvar delta =  _bids - _asks\r\n\r\nif( showDelta ){\r\nhistogram({\r\n  time: time,\r\n  value: delta,\r\n  color: Math.abs(delta) > highDiff ? (delta > 0 ? options.positiveColor : options.negativeColor) : options.color\r\n})\r\n}else if(showRatios){\r\n  if( showLines){\r\n    line(ratios['coinbase'], color =  'pink')\r\n    line(ratios['binance'], color =  'yellow')\r\n   /* baseline(0, color='grey')\r\n    baseline(75, color='grey')\r\n    baseline(-75, color='grey')*/\r\n  }\r\n}else{\r\nplotcloudarea( _asks, _bids, positiveColor=options.positiveColor,  negativeColor=options.negativeColor,  higherLineColor=options.positiveLineColor, lowerLineColor=options.negativeLineColor)\r\n\r\nif ( Math.abs(_bids - _asks) > highDiff) {\r\n    brokenarea({\r\n      time: time, \r\n      lowerValue: _asks,\r\n      higherValue: _bids,\r\n      extendRight: false,\r\n      color: (_bids - _asks ? options.positiveColor : options.negativeColor)\r\n    })\r\n}\r\n}",
          "createdAt": 1700698276480,
          "updatedAt": 1738795717843,
          "options": {
            "priceScaleId": "bids-asks-total",
            "scaleMargins": {
              "top": 0.66,
              "bottom": 0.27
            },
            "ratio0Toggle": null,
            "ratio1Toggle": null,
            "ratio2Toggle": null,
            "ratio3Toggle": null,
            "togglePerp": false,
            "toggleRatio0": true,
            "toggleRatio1": true,
            "toggleRatio2": true,
            "toggleRatio3": true,
            "negativeLineColor": "rgba(255,82,82,0.8)",
            "positiveLineColor": "rgba(41,175,47,0.97)",
            "visible": true,
            "toggleSpot": false,
            "toggleBinance": true,
            "toggleCoinbase": true,
            "toggleBitmex": false,
            "toggleBand1": true,
            "toggleBand2": true,
            "toggleBand3": true,
            "toggleBand4": false,
            "lastValueVisible": true,
            "priceFormat": {
              "type": "volume",
              "precision": 2,
              "minMove": 0.01,
              "auto": true
            },
            "highDiff": null,
            "highDiffSpot": 200,
            "highDiffPerp": 200,
            "positiveColor": "rgba(76,175,80,0.74)",
            "color": "rgba(178,181,190,0.57)",
            "toggleDelta": false,
            "negativeColor": "rgba(255,82,82,0.72)",
            "toggleLines": true,
            "toggleRatios": true,
            "topFillColor1": "rgba(38,166,154,0)",
            "topFillColor2": "rgba(149,152,161,0)",
            "bottomFillColor1": "rgba(239,83,80,0)",
            "bottomFillColor2": "rgba(239,83,80,0)",
            "topLineColor": "rgb(178,181,190)"
          },
          "optionsDefinitions": {},
          "series": [
            "spot-bands copy 1",
            "az1ajno5",
            "gbsidyfl",
            "uj41clj3",
            "3i4l8ue4",
            "didqe464",
            "2lz0s3wt",
            "xo7dlh9h"
          ],
          "displayName": "Spot 1% delta",
          "unsavedChanges": true
        },
        "_754ztqlgvqyl7uv4": {
          "id": "_754ztqlgvqyl7uv4",
          "libraryId": "pivots",
          "name": "Pivots",
          "script": "candlestick($price, color=transparent)\r\n\r\n\r\nif (pivotsMax === 0) {\r\n  // Pivots\r\n  pivotsMax = 20\r\n  phPositions = []\r\n  plPositions = []\r\n  phVals = []\r\n  plVals = []\r\n}\r\n\r\n  // <markers utils>\r\n  if (markersDiv === 0) {\r\n    markersDiv = []\r\n  }\r\n  if (markersPivot === 0) {\r\n    markersPivot = []\r\n  }\r\n  \r\n  if (pendingMarkerDiv && pendingMarkerDiv.time < time) {\r\n    markersDiv.push(pendingMarkerDiv)\r\n    pendingMarkerDiv = null\r\n  }\r\n\r\n  if (pendingMarkerPivot && pendingMarkerPivot.time < time) {\r\n    markersPivot.push(pendingMarkerPivot)\r\n    pendingMarkerPivot = null\r\n  }\r\n  \r\n  var newMarkerDiv = null\r\n  var newMarkerPivot = null\r\n  // </markers utils>\r\n\r\n  plPrice = pivot_low($price.low, options.pivotLength, options.pivotLength)\r\n  phPrice = pivot_high($price.high, options.pivotLength, options.pivotLength)\r\n  \r\n\r\n  if( plPrice ){\r\n      var timeAtPivot = new Date((time - (options.pivotLength-1) * bar.timeframe) * 1000);\r\n\r\n        newMarkerPivot = {\r\n            time: time - (options.pivotLength-1) * bar.timeframe,\r\n            color: options.DivcolorUp,\r\n            position: 'belowBar',\r\n            text:  'L'\r\n          }\r\n      \r\n  }\r\n\r\n\r\n  if( phPrice ){\r\n      var timeAtPivot = new Date((time - (options.pivotLength-1) * bar.timeframe) * 1000);\r\n\r\n        newMarkerPivot = { \r\n            time: time - (options.pivotLength-1) * bar.timeframe,\r\n            color: options.DivcolorDn,\r\n            position: 'aboveBar',\r\n            text: 'H'\r\n          }\r\n      \r\n\r\n  }\r\n  \r\n  // <markers utils>\r\n  if (newMarkerPivot || (pendingMarkerPivot && !newMarkerPivot)) {\r\n      pendingMarkerPivot = newMarkerPivot\r\n    \r\n      \r\n    if (series[0].setMarkers) {\r\n      series[0].setMarkers(markersPivot.concat(pendingMarkerPivot))\r\n    }\r\n  }\r\n\r\n  // </markers utils>",
          "createdAt": 1705351552192,
          "updatedAt": 1716925274872,
          "options": {
            "priceScaleId": "right",
            "toggleShowPricePivot": null,
            "showDivs": null,
            "pivotLeftLength": 14,
            "pivotRightLength": 14,
            "ppCheck": null,
            "maxbars": null,
            "togglePivotAgo": null,
            "DivcolorUp": "rgb(76,175,80)",
            "DivcolorDn": "rgb(233,30,99)",
            "pivotLength": 60,
            "visible": false,
            "scaleMargins": {
              "top": 0.33,
              "bottom": 0.44
            }
          },
          "optionsDefinitions": {},
          "series": [
            "pivots"
          ],
          "displayName": "Pivots",
          "unsavedChanges": true
        },
        "_nzhr00eu7o3no6gm": {
          "id": "_nzhr00eu7o3no6gm",
          "libraryId": "liquidation-cum",
          "name": "liquidation_cum",
          "script": "delta = $openinterest.open - $openinterest.close\r\nif( delta < 0 ){\r\n  \r\n}\r\ncvl(5) = lbuy+lsell\r\nline(cum(cvl))",
          "createdAt": 1719358615779,
          "updatedAt": 1719359260854,
          "options": {
            "priceScaleId": "_nzhr00eu7o3no6gm",
            "scaleMargins": {
              "top": 0.1,
              "bottom": 0.2
            },
            "visible": false
          },
          "optionsDefinitions": {},
          "series": [
            "liquidation-cum"
          ],
          "displayName": "liquidation_cum",
          "unsavedChanges": false
        },
        "_0jf3x8lf5d8w6u6e": {
          "id": "_0jf3x8lf5d8w6u6e",
          "libraryId": "liquidation-heatmap copy 3",
          "name": "Liquidation Heatmap",
          "description": "Visualizes potential liquidation levels",
          "script": "leverages = option(default=5|20|100,type=text)\nthreshold = option(default=800,type=range,min=100,max=5000,log=true, step=100) \nmaxRange = option(default=2200,type=range,min=100,max=5000,log=true, step=100)\nminDelta = option(default=0,type=range,min=0,max=100,log=true, step=1)\nfadeOut = option(default=0,type=range,min=0,max=1,log=true,step=0.001)\nstepScale = option(default=0.5,type=range,min=0,max=2,step=0.01)\nstepValue = option(default=\"\",type=text,placeholder=\"empty = ATR\")\nstrength = option(default=50,type=range,min=0,max=100,step=1,log=true)\nquote = option(default=null,type=list,options=[null, \"USD\", \"USDT\", \"TUSD\", \"USDC\"],rebuild=true)\nexchange = option(default=null,type=exchange,rebuild=true)\ntype = option(default=perp,type=list,options=[null, \"spot\", \"perp\"],rebuild=true)\nsrc = option(default=\"high/low\",type=list,options=[\"open\", \"high\", \"low\", \"close\",\"hl2\",\"ohl3\",\"ohlc4\",\"hlcc4\",\"high/low\",\"low/high\"])\ncolor0 = option(default=rgba(0,0,0,0),type=color)\ncolor1 = option(default=rgb(63,16,87),type=color)\ncolor2 = option(default=rgb(76,152,134),type=color)\ncolor3 = option(default=rgb(240,218,24),type=color)\nvolLength = option(default=20,type=range,min=1,max=200, step=1)\natrLength = option(default=20,type=range,min=1,max=200, step=1)\nuseHK = option(default=true,type=checkbox,description=\"Use heikinashi as source\")\nuseLog = option(default=true,type=checkbox)\ndynamicMax = option(default=true,type=checkbox)\nstrokeWidth = option(default=0,type=number,description=\"For debug purpose\")\n\n//var isLastCurrentCandle = new Date().getTime() >= renderer.timestamp && new Date().getTime() <= renderer.timestamp + renderer.timescale;\n\n\nif (!liquidityAtPrices) {\n  // init\n\n  lastIndex = null\n  freeSlots = []\n  usedSlots = []\n  boundaries = {}\n  liquidityAtPrices = {}\n  resistances = []\n  supports = []\n  pendingRedraws = []\n  maxOpened = 0 \n  var shortLeverage = options.leverages.toString().split(/[|,]/).map(a => +a)\n  var longLeverage = shortLeverage.map(a => -a)\n  resolvedLeverages = shortLeverage.concat(longLeverage)\n  steps = null\n\n  for (var i = 0; i < series.length; i++) {\n    if (series[i].seriesType() !== 'BrokenArea') {\n      continue\n    }\n\n    // register each available series as a slot \n    freeSlots.push({\n    index: i,\n    redrawAt: 0\n    })\n\n    // bind boundaries reference\n    // boundaries: { [cellId: string]: *bar index* }\n    series[i].setExtensionsBoundaries(boundaries)\n  }\n}\n\n\n\n// process only on new candle\nif (bar.length === lastIndex) {\n   return\n}\n\nvar customSrc = source(quote=quote,type=type,exchange=exchange)\nvar price = useHK ? avg_heikinashi(customSrc) : avg_ohlc_with_gaps(customSrc)\n\nif( !price || !$openinterest){\n  return\n}\n\npriceRef = price\n\n// grid size\nif (stepValue) {\n  // absolute\n  steps = stepValue\n} else {\n  // calculated with atr\n  var hl = price.high - price.low\n  var hc = Math.abs(price.high - priceRef[1].close)\n  var lc = Math.abs(price.low - priceRef[1].close)\n  var atr = sma(Math.max(hl, hc, lc), atrLength)\n\n  if (bar.length < atrLength) {\n    return\n  }\n\n  if (!steps) {\n    steps = atr * stepScale\n  }\n}\n\nbuyVolume = source(vbuy, quote=quote,type=type,exchange=exchange)\nsellVolume = source(vsell, quote=quote,type=type,exchange=exchange)\noi = $openinterest\nvar oiDelta = oi.high - oi.low\n\nvol = buyVolume + sellVolume\n\n// since we only run this indi once per bar (for performance)\n// only analyze volume data of the previous bar (vol[1], buyVolume[1], sellVolume[1])\nconst avgBuyVolume = sma(buyVolume[1] || 0, volLength) || 0.0001;\nconst avgSellVolume = sma(sellVolume[1] || 0, volLength) || 0.0001;\n\nvar buyRatio = (buyVolume[1] || 0) / avgBuyVolume;\nvar sellRatio = (sellVolume[1] || 0) / avgSellVolume;\nif (useLog) {\n  buyRatio = Math.log(buyRatio + 1)\n  sellRatio = Math.log(sellRatio + 1)\n}\n\n// custom src\nvar resolvedSrc  = priceRef[1][options.src]\nif (resolvedSrc === undefined) {\n  if (options.src === 'hl2') {\n    resolvedSrc = (priceRef[1].high + priceRef[1].low) / 2\n  } else if (options.src === 'ohl3') {\n    resolvedSrc = (priceRef[1].open + priceRef[1].high + priceRef[1].low) / 3\n  } else if (options.src === 'ohlc4') {\n    resolvedSrc = (priceRef[1].open + priceRef[1].high + priceRef[1].low + priceRef[1].close) / 4\n  } else if (options.src === 'hlcc4') {\n    resolvedSrc = (priceRef[1].high + priceRef[1].low + priceRef[1].close + priceRef[1].close) / 4\n  }\n}\n\nfor (let i = 0; i < resolvedLeverages.length; i++) {\n  var lev = (resolvedLeverages)[i]\n\n  if (options.src === 'high/low') {\n    resolvedSrc = lev > 0 ? priceRef[1].high : priceRef[1].low\n  } else if (options.src === 'low/high') {\n    resolvedSrc = lev > 0 ? priceRef[1].low : priceRef[1].high\n  }\n\n  // liquidation price (from resolvedSrc + % to leverages[i]) \n  var lp = (resolvedSrc + resolvedSrc * (100 / lev / 100))\n  \n  // rounded lp median (the cell id)\n  var slp = Math.ceil(lp / steps) * steps\n  \n  if (!liquidityAtPrices[slp]) {\n    // register cell\n    var top = slp + steps / 2\n    var bottom = slp - steps / 2\n    liquidityAtPrices[slp] = {\n      strength: 0,\n      count: 0,\n      top: top,\n      bottom: bottom\n    }\n    \n    if (lev > 0) {\n        resistances.push(slp)\n        resistances.sort((a, b) => a - b)\n    } else {\n        supports.push(slp)\n        supports.sort((a, b) => b - a)\n    }\n  }\n  \n  // update cell\n  //liquidityAtPrices[slp].count++\n  //liquidityAtPrices[slp].strength += lev > 0 ? sellRatio : buyRatio\n  \n  //var ratio = Math.min(1, liquidityAtPrices[slp].strength * liquidityAtPrices[slp].count * (options.strength / 100))\n\n  if (oiDelta < minDelta) {\n    continue\n  }\n\n  var oiDeltaNormalized = oiDelta / options.threshold\n  var maxOpenedThreshold = dynamicMax && maxOpened > 0 ? maxOpened : options.maxRange\n  var ratio = Math.min(1, (liquidityAtPrices[slp].strength + oiDelta) / maxOpenedThreshold ) * (options.strength / 100)\n  // var ratio = Math.min(1, liquidityAtPrices[slp].strength * liquidityAtPrices[slp].count * (options.strength / 100))\n\n  liquidityAtPrices[slp].count++\n  liquidityAtPrices[slp].strength += oiDelta\n  //ratio = liquidityAtPrices[slp].strength > 0 ? 1 : 0.1\n  liquidityAtPrices[slp].color = interpolate(ratio, color0, color1, color2, color3)\n\n  if (liquidityAtPrices[slp].strength > options.threshold ) {\n    maxOpened = maxOpened > liquidityAtPrices[slp].strength ? maxOpened : liquidityAtPrices[slp].strength\n    if (pendingRedraws.indexOf(slp) === -1) {\n      pendingRedraws.push(slp)\n    }\n  }\n}\n\nif (pendingRedraws.length) {\n\n  // round of used slot(s)\n  var slotsToRelease = []\n  for (var i = 0; i < pendingRedraws.length; i++) {\n    var cell = liquidityAtPrices[pendingRedraws[i]]\n    var slot = freeSlots.find(slot => slot.redrawAt < bar.length)\n\n    if (slot) {\n      var usedIndex = freeSlots.splice(freeSlots.indexOf(slot), 1)[0].index\n      usedSlots.push(usedIndex)\n\n      if (cell.id) {\n        boundaries[cell.id] = bar.length\n      }\n      \n      \n\n      cell.id = Math.random().toString()\n      renderer.indicators[indicatorId].series[usedIndex] ={\n        id: cell.id,\n        time: time,\n        lowerValue: cell.top,\n        higherValue: cell.bottom,\n        extendRight: true,\n        color: cell.color\n      }\n\n      pendingRedraws.splice(i--, 1)\n      slotsToRelease.push(usedIndex)\n    }\n  }\n  for (let i = 0; i < slotsToRelease.length; i++) {\n    var plotIndexToFree = usedSlots.splice(usedSlots.indexOf(slotsToRelease[i]), 1)[0]\n    \n    freeSlots.push({\n      index: plotIndexToFree,\n      redrawAt: bar.length + 1\n    })\n  }\n}\n\nfor (let i = 0; i < supports.length; i++) {\n  if (\n   price.low <= supports[i] || liquidityAtPrices[supports[i]].count <= 0\n  ) {\n    boundaries[liquidityAtPrices[supports[i]].id] = bar.length\n    delete liquidityAtPrices[supports[i]]\n    supports.splice(i--, 1)\n  } else {\n    if (fadeOut) {\n      liquidityAtPrices[supports[i]].count -= fadeOut\n    } else {\n      break;\n    }\n  }\n}\n\nfor (let i = 0; i < resistances.length; i++) {\n  if (\n   price.high >= resistances[i] || liquidityAtPrices[resistances[i]].count <= 0\n  ) {\n    boundaries[liquidityAtPrices[resistances[i]].id] = bar.length\n    delete liquidityAtPrices[resistances[i]]\n    resistances.splice(i--, 1)\n  } else {\n    if (fadeOut) {\n      liquidityAtPrices[resistances[i]].count -= fadeOut\n    } else {\n      break;\n    }\n  }\n}\n\n// set reference to bar index : avoid process next tick\nlastIndex = bar.length\n\n// define available series\nif (renderer.indicators[indicatorId].series[0]) {\n  brokenarea(renderer.indicators[indicatorId].series[0] || { time: time }, strokeColor=options.strokeColor, strokeWidth=options.strokeWidth)\n}\nif (renderer.indicators[indicatorId].series[1]) {\n  brokenarea(renderer.indicators[indicatorId].series[1] || { time: time }, strokeColor=options.strokeColor, strokeWidth=options.strokeWidth)\n}\nif (renderer.indicators[indicatorId].series[2]) {\n  brokenarea(renderer.indicators[indicatorId].series[2] || { time: time }, strokeColor=options.strokeColor, strokeWidth=options.strokeWidth)\n}\nif (renderer.indicators[indicatorId].series[3]) {\n  brokenarea(renderer.indicators[indicatorId].series[3] || { time: time }, strokeColor=options.strokeColor, strokeWidth=options.strokeWidth)\n}\nif (renderer.indicators[indicatorId].series[4]) {\n  brokenarea(renderer.indicators[indicatorId].series[4] || { time: time }, strokeColor=options.strokeColor, strokeWidth=options.strokeWidth)\n}\nif (renderer.indicators[indicatorId].series[5]) {\n  brokenarea(renderer.indicators[indicatorId].series[5] || { time: time }, strokeColor=options.strokeColor, strokeWidth=options.strokeWidth)\n}\nif (renderer.indicators[indicatorId].series[6]) {\n  brokenarea(renderer.indicators[indicatorId].series[6] || { time: time }, strokeColor=options.strokeColor, strokeWidth=options.strokeWidth)\n}\nif (renderer.indicators[indicatorId].series[7]) {\n  brokenarea(renderer.indicators[indicatorId].series[7] || { time: time }, strokeColor=options.strokeColor, strokeWidth=options.strokeWidth)\n}\nif (renderer.indicators[indicatorId].series[8]) {\n  brokenarea(renderer.indicators[indicatorId].series[8] || { time: time }, strokeColor=options.strokeColor, strokeWidth=options.strokeWidth)\n}\nif (renderer.indicators[indicatorId].series[9]) {\n  brokenarea(renderer.indicators[indicatorId].series[9] || { time: time }, strokeColor=options.strokeColor, strokeWidth=options.strokeWidth)\n}\nif (renderer.indicators[indicatorId].series[10]) {\n  brokenarea(renderer.indicators[indicatorId].series[10] || { time: time }, strokeColor=options.strokeColor, strokeWidth=options.strokeWidth)\n}\nif (renderer.indicators[indicatorId].series[11]) {\n  brokenarea(renderer.indicators[indicatorId].series[11] || { time: time }, strokeColor=options.strokeColor, strokeWidth=options.strokeWidth)\n}\nif (renderer.indicators[indicatorId].series[12]) {\n  brokenarea(renderer.indicators[indicatorId].series[12] || { time: time }, strokeColor=options.strokeColor, strokeWidth=options.strokeWidth)\n}\nif (renderer.indicators[indicatorId].series[13]) {\n  brokenarea(renderer.indicators[indicatorId].series[13] || { time: time }, strokeColor=options.strokeColor, strokeWidth=options.strokeWidth)\n}\nif (renderer.indicators[indicatorId].series[14]) {\n  brokenarea(renderer.indicators[indicatorId].series[14] || { time: time }, strokeColor=options.strokeColor, strokeWidth=options.strokeWidth)\n}\nif (renderer.indicators[indicatorId].series[15]) {\n  brokenarea(renderer.indicators[indicatorId].series[15] || { time: time }, strokeColor=options.strokeColor, strokeWidth=options.strokeWidth)\n}\nif (renderer.indicators[indicatorId].series[16]) {\n  brokenarea(renderer.indicators[indicatorId].series[16] || { time: time }, strokeColor=options.strokeColor, strokeWidth=options.strokeWidth)\n}",
          "createdAt": 1703543399433,
          "updatedAt": 1730153038711,
          "options": {
            "priceScaleId": "right",
            "leverages": "50|100",
            "threshold": 800,
            "fadeOut": 0,
            "stepScale": 0.52,
            "stepValue": 50,
            "strength": 78,
            "quote": "USDT",
            "exchange": "BINANCE_FUTURES",
            "type": "perp",
            "src": "high/low",
            "volLength": 21,
            "atrLength": 22,
            "useHK": false,
            "useLog": true,
            "strokeWidth": 0,
            "color0": "rgba(194,24,91,0)",
            "color": "rgba(76,175,80,0)",
            "visible": false,
            "lastValueVisible": false,
            "scaleMargins": {
              "top": 0.33,
              "bottom": 0.44
            },
            "max": 100,
            "color1": "rgba(63,16,87,0.29)",
            "color2": "rgba(76,152,134,0.28)",
            "maxRange": 3800,
            "dynamicMax": true,
            "minDelta": 23,
            "color3": "rgba(240,218,24,0.28)",
            "strokeColor": "rgba(91,156,246,0.29)"
          },
          "optionsDefinitions": {
            "leverages": {
              "default": "5|20|100",
              "type": "text"
            },
            "threshold": {
              "default": 800,
              "type": "range",
              "min": 100,
              "max": 5000,
              "log": true,
              "step": 100
            },
            "maxRange": {
              "default": 2200,
              "type": "range",
              "min": 100,
              "max": 5000,
              "log": true,
              "step": 100
            },
            "minDelta": {
              "default": 0,
              "type": "range",
              "min": 0,
              "max": 100,
              "log": true,
              "step": 1
            },
            "fadeOut": {
              "default": 0,
              "type": "range",
              "min": 0,
              "max": 1,
              "log": true,
              "step": 0.001
            },
            "stepScale": {
              "default": 0.5,
              "type": "range",
              "min": 0,
              "max": 2,
              "step": 0.01
            },
            "stepValue": {
              "default": "",
              "type": "text",
              "placeholder": "empty = ATR"
            },
            "strength": {
              "default": 50,
              "type": "range",
              "min": 0,
              "max": 100,
              "step": 1,
              "log": true
            },
            "quote": {
              "default": 0,
              "type": "list",
              "options": [
                null,
                "USD",
                "USDT",
                "TUSD",
                "USDC"
              ],
              "rebuild": true
            },
            "exchange": {
              "default": 0,
              "type": "exchange",
              "rebuild": true
            },
            "type": {
              "default": "perp",
              "type": "list",
              "options": [
                null,
                "spot",
                "perp"
              ],
              "rebuild": true
            },
            "src": {
              "default": "high/low",
              "type": "list",
              "options": [
                "open",
                "high",
                "low",
                "close",
                "hl2",
                "ohl3",
                "ohlc4",
                "hlcc4",
                "high/low",
                "low/high"
              ]
            },
            "color0": {
              "default": "rgba(0,0,0,0)",
              "type": "color"
            },
            "color1": {
              "default": "rgb(63,16,87)",
              "type": "color"
            },
            "color2": {
              "default": "rgb(76,152,134)",
              "type": "color"
            },
            "color3": {
              "default": "rgb(240,218,24)",
              "type": "color"
            },
            "volLength": {
              "default": 20,
              "type": "range",
              "min": 1,
              "max": 200,
              "step": 1
            },
            "atrLength": {
              "default": 20,
              "type": "range",
              "min": 1,
              "max": 200,
              "step": 1
            },
            "useHK": {
              "default": true,
              "type": "checkbox",
              "description": "Use heikinashi as source"
            },
            "useLog": {
              "default": true,
              "type": "checkbox"
            },
            "dynamicMax": {
              "default": true,
              "type": "checkbox"
            },
            "strokeWidth": {
              "default": 0,
              "type": "number",
              "description": "For debug purpose"
            }
          },
          "series": [
            "liquidation-heatmap copy 3",
            "yp9gh87u",
            "wjxl3fnz",
            "dl9vm5v1",
            "3nhhyhfq",
            "gg44sd8k",
            "qka7oirj",
            "2jq9na3t",
            "mq10wuwv",
            "7x52f0oo",
            "vq02naxz",
            "vo7o9vds",
            "uezz2h5k",
            "40liobmq",
            "wrx1qk4q",
            "1f08dhog",
            "whl0m41n"
          ],
          "displayName": "Liquidation Heatmap",
          "unsavedChanges": false
        },
        "_8wmsx7s5kg8mfzg7": {
          "id": "_8wmsx7s5kg8mfzg7",
          "libraryId": "test3",
          "name": "test",
          "script": "color0 = option(default=rgba(0,0,0,0),type=color)\r\ncolor1 = option(default=rgba(0,0,0,0),type=color)\r\ncolor2 = option(default=rgba(0,0,0,0),type=color)\r\n\r\n\r\nif (!pendingMarkers) {\r\n    lastIndex = null\r\n    // runs only once\r\n    pendingMarkers = [] \r\n\r\n    togglePerp = options.togglePerp || false\r\n    \r\n    moveTo = options.togglePerp ? 10 : -10\r\n    bandSize = options.bandSize || 15\r\n\r\n    maxVolume = options.maxVolume || (togglePerp ? 4000 : 1500)\r\n    minVolume = options.minVolume || (togglePerp ? 500 : 200)\r\n\r\n    level0 = options.level0 || (togglePerp ? 2000 : 800)\r\n    level1 = options.level1 || (togglePerp ? 1000 : 400)\r\n\r\n    startOpacity = options.startOpacity || 0.5\r\n\r\n    colorLevel0 = color0.match(/\\(([\\d.]+),([\\d.]+),([\\d.]+),?([\\d.]+)?\\)$/).slice(1,5).map(a => +a)\r\n    colorLevel1 = color1.match(/\\(([\\d.]+),([\\d.]+),([\\d.]+),?([\\d.]+)?\\)$/).slice(1,5).map(a => +a)\r\n    colorLevel = color2.match(/\\(([\\d.]+),([\\d.]+),([\\d.]+),?([\\d.]+)?\\)$/).slice(1,5).map(a => +a)\r\n\r\n    colorOpacity0 = colorLevel0.pop()\r\n    colorOpacity1 = colorLevel1.pop()\r\n    colorOpacity2 = colorLevel.pop()\r\n\r\n    limitPercent = (options.limitPercent || 100) / 100\r\n\r\n    levelsToShow = options.levelsToShow || 5\r\n\r\n    printMaxBars = options.printMaxBars || 200\r\n\r\n    timeAtDrawing = new Date().getTime()\r\n    currentDate = new Date().getTime() / 1000 - 1000 * bar.timeframe \r\n    // store serie of price level\r\n\r\n  \r\n}\r\n\r\nvar topLimit = $price.close + $price.close * limitPercent\r\nvar bottomLimit = $price.close - $price.close * limitPercent\r\n\r\nvar levels = togglePerp ? ORDERBOOK:AGGRPERP-BTCUSD.zlevels  : ORDERBOOK:AGGRSPOT-BTCUSD.zlevels\r\n\r\nif( lastIndex && (renderer.timestamp + renderer.timeframe)*1000 > timeAtDrawing  ){\r\n  return\r\n}\r\n\r\n// process only on new candle\r\nif (bar.length === lastIndex) {\r\n   return\r\n}\r\n\r\nif( bar.timestamp < currentDate ){\r\n  return\r\n}\r\nif( !levels ){\r\n  return\r\n}\r\n\r\n\r\n\r\n// sort by larger volume\r\nlevels.bids.sort( (a, b) => b[1] - a[1] ) \r\nlevels.asks.sort( (a, b) => b[1] - a[1] )\r\n\r\nvar previousPriceMap = priceMap[1] \r\n//var previousPriceMapSerie = priceMapSerie[1] \r\npriceMap(1) = []\r\npriceMapSerie(1) = {}\r\n\r\nvar free = [0,1,2,3,4,5,6,7,8,9]\r\n\r\n// copy last into current\r\npriceMapSerie[0] = priceMapSerie[1] || {}\r\nconsole.log(levels.bids, priceMapSerie[0], priceMapSerie[1])\r\n\r\n// Remove from free, levels that still exist\r\n\r\n\r\nfor( let i = 0; i < Math.min(levelsToShow, levels.bids.length) ; i++ ){\r\n  //if( levels.bids[i][1] > minVolume && (levels.bids[i][0] >= bottomLimit && levels.bids[i][0] <= topLimit) ){\r\n\r\n    var alpha = startOpacity + (1 - startOpacity) * ((levels.bids[i][1] - minVolume) / (maxVolume - minVolume))\r\n    var alphaRounded = Math.round(alpha * 100) / 100 \r\n    var colorbase = levels.bids[i][1] > level0 ? colorLevel0 : levels.bids[i][1] > level1 ? colorLevel1 : colorLevel\r\n    var color = 'rgba(' + colorbase.join(',') + ',' + alphaRounded + ')'\r\n    // Add level\r\n    priceMap.push(levels.bids[i][0])\r\n\r\n    // check if level was in previous candle (we don;t want single candle level)\r\n    if( previousPriceMap  && !(previousPriceMap.includes(levels.bids[i][0])) ){\r\n      console.log('not exist', priceMap[1])\r\n      continue;\r\n    }\r\n    // check if we have an existing serie for this level\r\n    if( priceMapSerie && ('l_' + levels.bids[i][0]) in priceMapSerie[0] ){\r\n      console.log('existing serie reuse', priceMapSerie[0]['l_'+levels.bids[i][0]])\r\n    }else{\r\n      // store which serie the level is drawn\r\n      priceMapSerie[0]['l_'+levels.bids[i][0]] = free[0]\r\n    }\r\n    free = free.filter(num => num !== priceMapSerie[0]['l_'+levels.bids[i][0]]);\r\n\r\n    console.log('draw', i, levels.bids[i][0], alphaRounded, priceMapSerie[0]['l_'+levels.bids[i][0]])\r\n\r\n   renderer.indicators[indicatorId].series[i] = {\r\n      time: time ,\r\n      lowerValue: levels.bids[i][0],\r\n      higherValue: levels.bids[i][0] + bandSize,\r\n      color: color\r\n    }\r\n  //}\r\n}\r\n\r\n/*for( let i = 0; i < Math.min(levelsToShow, levels.asks.length) ; i++ ){\r\n  if( levels.asks[i][1] > minVolume && (levels.asks[i][0] >= bottomLimit && levels.asks[i][0] <= topLimit) ){\r\n    var alpha = startOpacity + (1 - startOpacity) * ((levels.asks[i][1] - minVolume) / (maxVolume - minVolume))\r\n    var alphaRounded = Math.round(alpha * 100) / 100 \r\n    var colorbase = levels.asks[i][1] > level0 ? colorLevel0 : levels.asks[i][1] > level1 ? colorLevel1 : colorLevel\r\n    var color = 'rgba(' + colorbase.join(',') + ',' + alphaRounded + ')'\r\n    priceMap[levels.asks[i][0]] = 10 + i\r\n\r\n    if( previousPriceMap  && !(previousPriceMap.includes(levels.asks[i][0])) ){\r\n     // console.log('not exist', priceMap[1])\r\n      continue;\r\n    }\r\n   // priceMapSerie[levels.bids[i][0]] = i\r\n\r\n\r\n  }\r\n}*/\r\n\r\n\r\n// set reference to bar index : avoid process next tick\r\nlastIndex = bar.length\r\n\r\nreturn\r\n\r\nplotbrokenarea({ time: time, lowerValue: levels.bids[0][0] + moveTo, higherValue: levels.bids[0][0] + bandSize + moveTo } )\r\nplotbrokenarea({ time: time, lowerValue: levels.bids[1][0] + moveTo, higherValue: levels.bids[1][0] + bandSize + moveTo } )\r\nplotbrokenarea({ time: time, lowerValue: levels.bids[2][0] + moveTo, higherValue: levels.bids[2][0] + bandSize + moveTo } )\r\nplotbrokenarea({ time: time, lowerValue: levels.bids[3][0] + moveTo, higherValue: levels.bids[3][0] + bandSize + moveTo } )\r\nplotbrokenarea({ time: time, lowerValue: levels.bids[4][0] + moveTo, higherValue: levels.bids[4][0] + bandSize + moveTo } )\r\nplotbrokenarea({ time: time, lowerValue: levels.bids[5][0] + moveTo, higherValue: levels.bids[5][0] + bandSize + moveTo } )\r\nplotbrokenarea({ time: time, lowerValue: levels.bids[6][0] + moveTo, higherValue: levels.bids[6][0] + bandSize + moveTo } )\r\nplotbrokenarea({ time: time, lowerValue: levels.bids[7][0] + moveTo, higherValue: levels.bids[7][0] + bandSize + moveTo } )\r\nplotbrokenarea({ time: time, lowerValue: levels.bids[8][0] + moveTo, higherValue: levels.bids[8][0] + bandSize + moveTo } )\r\nplotbrokenarea({ time: time, lowerValue: levels.bids[9][0] + moveTo, higherValue: levels.bids[9][0] + bandSize + moveTo } )\r\n\r\nplotbrokenarea({ time: time, lowerValue: levels.asks[0][0] + moveTo, higherValue: levels.asks[0][0] + bandSize + moveTo } )\r\nplotbrokenarea({ time: time, lowerValue: levels.asks[1][0] + moveTo, higherValue: levels.asks[1][0] + bandSize + moveTo } )\r\nplotbrokenarea({ time: time, lowerValue: levels.asks[2][0] + moveTo, higherValue: levels.asks[2][0] + bandSize + moveTo } )\r\nplotbrokenarea({ time: time, lowerValue: levels.asks[3][0] + moveTo, higherValue: levels.asks[3][0] + bandSize + moveTo } )\r\nplotbrokenarea({ time: time, lowerValue: levels.asks[4][0] + moveTo, higherValue: levels.asks[4][0] + bandSize + moveTo } )\r\nplotbrokenarea({ time: time, lowerValue: levels.asks[5][0] + moveTo, higherValue: levels.asks[5][0] + bandSize + moveTo } )\r\nplotbrokenarea({ time: time, lowerValue: levels.asks[6][0] + moveTo, higherValue: levels.asks[6][0] + bandSize + moveTo } )\r\nplotbrokenarea({ time: time, lowerValue: levels.asks[7][0] + moveTo, higherValue: levels.asks[7][0] + bandSize + moveTo } )\r\nplotbrokenarea({ time: time, lowerValue: levels.asks[8][0] + moveTo, higherValue: levels.asks[8][0] + bandSize + moveTo } )\r\nplotbrokenarea({ time: time, lowerValue: levels.asks[9][0] + moveTo, higherValue: levels.asks[9][0] + bandSize + moveTo } )",
          "createdAt": 1729642387480,
          "updatedAt": 1729648971358,
          "options": {
            "priceScaleId": "right",
            "togglePerp": null,
            "bandSize": null,
            "maxVolume": null,
            "minVolume": 0,
            "level0": null,
            "level1": null,
            "startOpacity": null,
            "limitPercent": null,
            "levelsToShow": 5,
            "printMaxBars": null,
            "visible": false,
            "color0": "rgba(242,54,69,0.96)",
            "color1": "rgb(0,188,212)",
            "color2": "rgb(206,147,216)",
            "scaleMargins": {
              "top": 0.33,
              "bottom": 0.44
            }
          },
          "optionsDefinitions": {
            "color0": {
              "default": "rgba(0,0,0,0)",
              "type": "color"
            },
            "color1": {
              "default": "rgba(0,0,0,0)",
              "type": "color"
            },
            "color2": {
              "default": "rgba(0,0,0,0)",
              "type": "color"
            }
          },
          "series": [
            "test3",
            "2b4f9ww1",
            "jtu9rue3",
            "yec5fjso",
            "8747tjg5",
            "j0v4x0ir",
            "a2wpnhgy",
            "pmfzrgpa",
            "smvz4s5k",
            "0ax9ctj3",
            "u3if8i6i",
            "jmforq3q",
            "4wzopqxq",
            "mfzykxba",
            "8qshtb9c",
            "k8uwn7po",
            "91v0dq7i",
            "tocl5rza",
            "t75noqfr",
            "zqu19liy"
          ],
          "displayName": "test",
          "unsavedChanges": true
        },
        "_5iyacj6o11iiyiz4": {
          "id": "_5iyacj6o11iiyiz4",
          "name": "Top Bands Perps2",
          "script": "if (!pendingMarkers) {\r\n    // runs only once\r\n    pendingMarkers = [] \r\n\r\n    togglePerp = options.togglePerp || false\r\n    \r\n    moveTo = options.togglePerp ? 10 : -10\r\n    bandSize = options.bandSize || 15\r\n\r\n    maxVolume = options.maxVolume || (togglePerp ? 4000 : 1500)\r\n    minVolume = options.minVolume || (togglePerp ? 500 : 200)\r\n\r\n    level0 = options.level0 || (togglePerp ? 2000 : 800)\r\n    level1 = options.level1 || (togglePerp ? 1000 : 400)\r\n\r\n    startOpacity = options.startOpacity || 0.1\r\n\r\n    colorLevel0 = options.colorLevel0.match(/\\(([\\d.]+),([\\d.]+),([\\d.]+),?([\\d.]+)?\\)$/).slice(1,5).map(a => +a)\r\n    colorLevel1 = options.colorLevel1.match(/\\(([\\d.]+),([\\d.]+),([\\d.]+),?([\\d.]+)?\\)$/).slice(1,5).map(a => +a)\r\n    colorLevel = options.colorLevel.match(/\\(([\\d.]+),([\\d.]+),([\\d.]+),?([\\d.]+)?\\)$/).slice(1,5).map(a => +a)\r\n\r\n    colorOpacity0 = colorLevel0.pop()\r\n    colorOpacity1 = colorLevel1.pop()\r\n    colorOpacity2 = colorLevel.pop()\r\n\r\n    limitPercent = (options.limitPercent || 100) / 100\r\n\r\n    levelsToShow = options.levelsToShow || 5\r\n\r\n    printMaxBars = options.printMaxBars || 200\r\n    currentDate = new Date().getTime() / 1000 - 1000 * bar.timeframe \r\n    // store serie of price level\r\n}\r\nvar topLimit = $price.close + $price.close * limitPercent\r\nvar bottomLimit = $price.close - $price.close * limitPercent\r\n\r\nvar levels = togglePerp ? ORDERBOOK:AGGRPERP-BTCUSD.zlevels  : ORDERBOOK:AGGRSPOT-BTCUSD.zlevels\r\n\r\nif( bar.timestamp < currentDate ){\r\n  return\r\n}\r\nif( !levels ){\r\n  return\r\n}\r\n// avoid too many changes by sorting by price. not volume\r\nlevels.bids.sort( (a, b) => a[0] - b[0] ) \r\nlevels.asks.sort( (a, b) => a[0] - b[0] )\r\n\r\nvar previousPriceMap = priceMap[1]\r\npriceMap(1) = []\r\n//priceMapSerie(1) = {}\r\n\r\nfor( let i = 0; i < Math.min(levelsToShow, levels.bids.length) ; i++ ){\r\n  if( levels.bids[i][1] > minVolume && (levels.bids[i][0] >= bottomLimit && levels.bids[i][0] <= topLimit) ){\r\n\r\n    var alpha = startOpacity + (1 - startOpacity) * ((levels.bids[i][1] - minVolume) / (maxVolume - minVolume))\r\n    var alphaRounded = Math.round(alpha * 100) / 100 \r\n    var colorbase = levels.bids[i][1] > level0 ? colorLevel0 : levels.bids[i][1] > level1 ? colorLevel1 : colorLevel\r\n    var color = 'rgba(' + colorbase.join(',') + ',' + alphaRounded + ')'\r\n    priceMap.push(levels.bids[i][0])\r\n\r\n    if( previousPriceMap  && !(previousPriceMap.includes(levels.bids[i][0])) ){\r\n     // console.log('not exist', priceMap[1])\r\n      continue;\r\n    }\r\n    //priceMapSerie[levels.bids[i][0]] = i\r\n\r\n   renderer.indicators[indicatorId].series[i] = {\r\n      time: time ,\r\n      lowerValue: levels.bids[i][0],\r\n      higherValue: levels.bids[i][0] + bandSize,\r\n      color: color\r\n    }\r\n  }\r\n}\r\n\r\nfor( let i = 0; i < Math.min(levelsToShow, levels.asks.length) ; i++ ){\r\n  if( levels.asks[i][1] > minVolume && (levels.asks[i][0] >= bottomLimit && levels.asks[i][0] <= topLimit) ){\r\n    var alpha = startOpacity + (1 - startOpacity) * ((levels.asks[i][1] - minVolume) / (maxVolume - minVolume))\r\n    var alphaRounded = Math.round(alpha * 100) / 100 \r\n    var colorbase = levels.asks[i][1] > level0 ? colorLevel0 : levels.asks[i][1] > level1 ? colorLevel1 : colorLevel\r\n    var color = 'rgba(' + colorbase.join(',') + ',' + alphaRounded + ')'\r\n    priceMap[levels.asks[i][0]] = 10 + i\r\n\r\n    if( previousPriceMap  && !(previousPriceMap.includes(levels.asks[i][0])) ){\r\n     // console.log('not exist', priceMap[1])\r\n      continue;\r\n    }\r\n   // priceMapSerie[levels.bids[i][0]] = i\r\n\r\n   renderer.indicators[indicatorId].series[10 + i] = {\r\n      time: time ,\r\n      lowerValue: levels.asks[i][0],\r\n      higherValue: levels.asks[i][0] + bandSize,\r\n      color: color\r\n    }\r\n  }\r\n}\r\n\r\n\r\nreturn\r\n\r\nplotbrokenarea({ time: time, lowerValue: levels.bids[0][0] + moveTo, higherValue: levels.bids[0][0] + bandSize + moveTo } )\r\nplotbrokenarea({ time: time, lowerValue: levels.bids[1][0] + moveTo, higherValue: levels.bids[1][0] + bandSize + moveTo } )\r\nplotbrokenarea({ time: time, lowerValue: levels.bids[2][0] + moveTo, higherValue: levels.bids[2][0] + bandSize + moveTo } )\r\nplotbrokenarea({ time: time, lowerValue: levels.bids[3][0] + moveTo, higherValue: levels.bids[3][0] + bandSize + moveTo } )\r\nplotbrokenarea({ time: time, lowerValue: levels.bids[4][0] + moveTo, higherValue: levels.bids[4][0] + bandSize + moveTo } )\r\nplotbrokenarea({ time: time, lowerValue: levels.bids[5][0] + moveTo, higherValue: levels.bids[5][0] + bandSize + moveTo } )\r\nplotbrokenarea({ time: time, lowerValue: levels.bids[6][0] + moveTo, higherValue: levels.bids[6][0] + bandSize + moveTo } )\r\nplotbrokenarea({ time: time, lowerValue: levels.bids[7][0] + moveTo, higherValue: levels.bids[7][0] + bandSize + moveTo } )\r\nplotbrokenarea({ time: time, lowerValue: levels.bids[8][0] + moveTo, higherValue: levels.bids[8][0] + bandSize + moveTo } )\r\nplotbrokenarea({ time: time, lowerValue: levels.bids[9][0] + moveTo, higherValue: levels.bids[9][0] + bandSize + moveTo } )\r\n\r\nplotbrokenarea({ time: time, lowerValue: levels.asks[0][0] + moveTo, higherValue: levels.asks[0][0] + bandSize + moveTo } )\r\nplotbrokenarea({ time: time, lowerValue: levels.asks[1][0] + moveTo, higherValue: levels.asks[1][0] + bandSize + moveTo } )\r\nplotbrokenarea({ time: time, lowerValue: levels.asks[2][0] + moveTo, higherValue: levels.asks[2][0] + bandSize + moveTo } )\r\nplotbrokenarea({ time: time, lowerValue: levels.asks[3][0] + moveTo, higherValue: levels.asks[3][0] + bandSize + moveTo } )\r\nplotbrokenarea({ time: time, lowerValue: levels.asks[4][0] + moveTo, higherValue: levels.asks[4][0] + bandSize + moveTo } )\r\nplotbrokenarea({ time: time, lowerValue: levels.asks[5][0] + moveTo, higherValue: levels.asks[5][0] + bandSize + moveTo } )\r\nplotbrokenarea({ time: time, lowerValue: levels.asks[6][0] + moveTo, higherValue: levels.asks[6][0] + bandSize + moveTo } )\r\nplotbrokenarea({ time: time, lowerValue: levels.asks[7][0] + moveTo, higherValue: levels.asks[7][0] + bandSize + moveTo } )\r\nplotbrokenarea({ time: time, lowerValue: levels.asks[8][0] + moveTo, higherValue: levels.asks[8][0] + bandSize + moveTo } )\r\nplotbrokenarea({ time: time, lowerValue: levels.asks[9][0] + moveTo, higherValue: levels.asks[9][0] + bandSize + moveTo } )",
          "createdAt": 1702374821392,
          "updatedAt": 1719255705231,
          "options": {
            "priceScaleId": "right",
            "scaleMargins": {
              "top": 0.33,
              "bottom": 0.44
            },
            "visible": false,
            "colorLevels": "rgb(255,255,255)",
            "colorLevel1": "rgba(41,98,255,0.91)",
            "colorLevel0": "rgb(242,54,69)",
            "colorLevel": "rgba(91,156,246,0.79)",
            "level0": 1900,
            "level1": 1600,
            "maxVolume": 3500,
            "minVolume": 300,
            "startOpacity": 0.1,
            "togglePerp": true,
            "bandSize": 25,
            "limitPercent": 10,
            "priceLineVisible": false,
            "baseLineVisible": false,
            "levelsToShow": 5,
            "printMaxBars": null
          },
          "optionsDefinitions": {},
          "displayName": "Top Bands Perps2",
          "series": [
            "_5iyacj6o11iiyiz4",
            "bhmayacx",
            "x1b0zgkp",
            "di2hnaxy",
            "ec1u72du",
            "s4obvkac",
            "brozm2o5",
            "yhkcsy53",
            "hi2lflfa",
            "pqy7wbnc",
            "4kwz67ta",
            "st7k5ydz",
            "i8x99qxj",
            "51x6df1t",
            "4v7k7u29",
            "3ij9vl02",
            "dg6lrips",
            "krmg8uam",
            "vh7ifugo",
            "6c6674i8"
          ]
        },
        "_w0nq2lcksrqb9ib6": {
          "id": "_w0nq2lcksrqb9ib6",
          "name": "Top Bands Spot simple",
          "script": "if (!pendingMarkers) {\r\n    // runs only once\r\n    pendingMarkers = [] \r\n\r\n    togglePerp = options.togglePerp || false\r\n    \r\n    moveTo = options.togglePerp ? 10 : -10\r\n    bandSize = options.bandSize || 15\r\n\r\n    maxVolume = options.maxVolume || (togglePerp ? 4000 : 1500)\r\n    minVolume = options.minVolume || (togglePerp ? 500 : 200)\r\n\r\n    level0 = options.level0 || (togglePerp ? 2000 : 800)\r\n    level1 = options.level1 || (togglePerp ? 1000 : 400)\r\n\r\n    startOpacity = options.startOpacity || 0.1\r\n\r\n    colorLevel0 = options.colorLevel0.match(/\\(([\\d.]+),([\\d.]+),([\\d.]+),?([\\d.]+)?\\)$/).slice(1,5).map(a => +a)\r\n    colorLevel1 = options.colorLevel1.match(/\\(([\\d.]+),([\\d.]+),([\\d.]+),?([\\d.]+)?\\)$/).slice(1,5).map(a => +a)\r\n    colorLevel = options.colorLevel.match(/\\(([\\d.]+),([\\d.]+),([\\d.]+),?([\\d.]+)?\\)$/).slice(1,5).map(a => +a)\r\n\r\n    colorOpacity0 = colorLevel0.pop()\r\n    colorOpacity1 = colorLevel1.pop()\r\n    colorOpacity2 = colorLevel.pop()\r\n\r\n}\r\n\r\nvar levels = togglePerp ? ORDERBOOK:AGGRPERP-BTCUSD.zlevels : ORDERBOOK:AGGRSPOT-BTCUSD.zlevels\r\n\r\nif( !levels || levels.bids.length < 5 || levels.asks.length < 5  ){\r\n    return\r\n} \r\n\r\nvar alpha1 = startOpacity + (1 - startOpacity) * ((levels.bids[0][1] - minVolume) / (maxVolume - minVolume))\r\nvar alpha1Rounded = Math.round(alpha1 * 100) / 100 \r\nvar color1base = levels.bids[0][1] > level0 ? colorLevel0 : levels.bids[0][1] > level1 ? colorLevel1 : colorLevel\r\nvar color1 = 'rgba(' + color1base.join(',') + ',' + alpha1Rounded + ')'\r\n\r\nvar alpha2 = startOpacity + (1 - startOpacity) * ((levels.bids[1][1] - minVolume) / (maxVolume - minVolume))\r\nvar alpha2Rounded = Math.round(alpha1 * 100) / 100 \r\nvar color2base = levels.bids[1][1] > level0 ? colorLevel0 : levels.bids[1][1] > level1 ? colorLevel1 : colorLevel\r\nvar color2 = 'rgba(' + color2base.join(',') + ',' + alpha2Rounded + ')'\r\n\r\nvar alpha3 = startOpacity + (1 - startOpacity) * ((levels.bids[2][1] - minVolume) / (maxVolume - minVolume))\r\nvar alpha3Rounded = Math.round(alpha1 * 100) / 100 \r\nvar color3base = levels.bids[2][1] > level0 ? colorLevel0 : levels.bids[2][1] > level1 ? colorLevel1 : colorLevel\r\nvar color3 = 'rgba(' + color3base.join(',') + ',' + alpha3Rounded + ')'\r\n\r\nvar alpha4 = startOpacity + (1 - startOpacity) * ((levels.bids[3][1] - minVolume) / (maxVolume - minVolume))\r\nvar alpha4Rounded = Math.round(alpha1 * 100) / 100 \r\nvar color4base = levels.bids[3][1] > level0 ? colorLevel0 : levels.bids[3][1] > level1 ? colorLevel1 : colorLevel\r\nvar color4 = 'rgba(' + color4base.join(',') + ',' + alpha4Rounded + ')'\r\n\r\nvar alpha5 = startOpacity + (1 - startOpacity) * ((levels.bids[4][1] - minVolume) / (maxVolume - minVolume))\r\nvar alpha5Rounded = Math.round(alpha1 * 100) / 100 \r\nvar color5base = levels.bids[4][1] > level0 ? colorLevel0 : levels.bids[4][1] > level1 ? colorLevel1 : colorLevel\r\nvar color5 = 'rgba(' + color5base.join(',') + ',' + alpha5Rounded + ')'\r\n\r\nplotbrokenarea({ time: time, id: levels.bids[0][0], lowerValue: levels.bids[0][0] + moveTo, higherValue: levels.bids[0][0] + bandSize + moveTo, color: color1 } )\r\nplotbrokenarea({ time: time, id: levels.bids[1][0], lowerValue: levels.bids[1][0] + moveTo, higherValue: levels.bids[1][0] + bandSize + moveTo, color: color2 } )\r\nplotbrokenarea({ time: time, lowerValue: levels.bids[2][0] + moveTo, higherValue: levels.bids[2][0] + bandSize + moveTo, color: color3 } )\r\nplotbrokenarea({ time: time, lowerValue: levels.bids[3][0] + moveTo, higherValue: levels.bids[3][0] + bandSize + moveTo, color: color4 } )\r\nplotbrokenarea({ time: time, lowerValue: levels.bids[4][0] + moveTo, higherValue: levels.bids[4][0] + bandSize + moveTo, color: color5 } )\r\n\r\n\r\nvar alphaAsks1 = startOpacity + (1 - startOpacity) * ((levels.asks[0][1] - minVolume) / (maxVolume - minVolume))\r\nvar alphaAsks1Rounded = Math.round(alphaAsks1 * 100) / 100 \r\nvar colorAsks1base = levels.asks[0][1] > level0 ? colorLevel0 : levels.asks[0][1] > level1 ? colorLevel1 : colorLevel\r\nvar colorAsks1 = 'rgba(' + colorAsks1base.join(',') + ',' + alphaAsks1Rounded + ')'\r\n\r\nvar alphaAsks2 = startOpacity + (1 - startOpacity) * ((levels.asks[1][1] - minVolume) / (maxVolume - minVolume))\r\nvar alphaAsks2Rounded = Math.round(alphaAsks1 * 100) / 100 \r\nvar colorAsks2base = levels.asks[1][1] > level0 ? colorLevel0 : levels.asks[1][1] > level1 ? colorLevel1 : colorLevel\r\nvar colorAsks2 = 'rgba(' + colorAsks2base.join(',') + ',' + alphaAsks2Rounded + ')'\r\n\r\nvar alphaAsks3 = startOpacity + (1 - startOpacity) * ((levels.asks[2][1] - minVolume) / (maxVolume - minVolume))\r\nvar alphaAsks3Rounded = Math.round(alphaAsks1 * 100) / 100 \r\nvar colorAsks3base = levels.asks[2][1] > level0 ? colorLevel0 : levels.asks[2][1] > level1 ? colorLevel1 : colorLevel\r\nvar colorAsks3 = 'rgba(' + colorAsks3base.join(',') + ',' + alphaAsks3Rounded + ')'\r\n\r\nvar alphaAsks4 = startOpacity + (1 - startOpacity) * ((levels.asks[3][1] - minVolume) / (maxVolume - minVolume))\r\nvar alphaAsks4Rounded = Math.round(alphaAsks1 * 100) / 100 \r\nvar colorAsks4base = levels.asks[3][1] > level0 ? colorLevel0 : levels.asks[3][1] > level1 ? colorLevel1 : colorLevel\r\nvar colorAsks4 = 'rgba(' + colorAsks4base.join(',') + ',' + alphaAsks4Rounded + ')'\r\n\r\nvar alphaAsks5 = startOpacity + (1 - startOpacity) * ((levels.asks[4][1] - minVolume) / (maxVolume - minVolume))\r\nvar alphaAsks5Rounded = Math.round(alphaAsks1 * 100) / 100 \r\nvar colorAsks5base = levels.asks[4][1] > level0 ? colorLevel0 : levels.asks[4][1] > level1 ? colorLevel1 : colorLevel\r\nvar colorAsks5 = 'rgba(' + colorAsks5base.join(',') + ',' + alphaAsks5Rounded + ')'\r\n\r\nplotbrokenarea({ time: time, lowerValue: levels.asks[0][0] + moveTo, higherValue: levels.asks[0][0] + bandSize + moveTo, color: colorAsks1 } )\r\nplotbrokenarea({ time: time, lowerValue: levels.asks[1][0] + moveTo, higherValue: levels.asks[1][0] + bandSize + moveTo, color: colorAsks2 } )\r\nplotbrokenarea({ time: time, lowerValue: levels.asks[2][0] + moveTo, higherValue: levels.asks[2][0] + bandSize + moveTo, color: colorAsks3 } )\r\nplotbrokenarea({ time: time, lowerValue: levels.asks[3][0] + moveTo, higherValue: levels.asks[3][0] + bandSize + moveTo, color: colorAsks4 } )\r\nplotbrokenarea({ time: time, lowerValue: levels.asks[4][0] + moveTo, higherValue: levels.asks[4][0] + bandSize + moveTo, color: colorAsks5 } )",
          "createdAt": 1732403606484,
          "updatedAt": 1732477864875,
          "options": {
            "priceScaleId": "right",
            "togglePerp": false,
            "bandSize": 50,
            "maxVolume": 500,
            "minVolume": 100,
            "level0": 200,
            "level1": 300,
            "startOpacity": 0.5,
            "colorLevel0": "rgb(255,235,59)",
            "colorLevel1": "rgb(245,124,0)",
            "colorLevel": "rgb(34,171,148)",
            "visible": false,
            "scaleMargins": {
              "top": 0.33,
              "bottom": 0.44
            }
          },
          "optionsDefinitions": {},
          "series": [
            "_w0nq2lcksrqb9ib6",
            "s41zk7rd",
            "935bl9t7",
            "inkiby7r",
            "0qc0unsi",
            "hcg0x9oa",
            "r1l01fws",
            "bc8f5un4",
            "l2lozfm6",
            "icfnv4qy"
          ],
          "displayName": "Top Bands Spot simple"
        },
        "_acbxtd7a1i3xyd0d": {
          "id": "_acbxtd7a1i3xyd0d",
          "name": "LS2",
          "script": "line(ORDERBOOK:AGGRLS-BTCUSD.open)",
          "createdAt": 1705956281484,
          "updatedAt": 1715651120016,
          "options": {
            "priceScaleId": "_zutos8s4mda6l4nl",
            "scaleMargins": {
              "top": 0.25,
              "bottom": 0.63
            },
            "visible": false
          },
          "optionsDefinitions": {},
          "displayName": "LS2",
          "series": [
            "_acbxtd7a1i3xyd0d"
          ]
        }
      },
      "indicatorOrder": [
        "price",
        "_cj0l7ltnxfoj1neg",
        "overlays-all",
        "liquidations",
        "_1az7ecqr58tvft65",
        "orderbook-0-1-spot",
        "orderbook-0-1-perp",
        "orderbook-spot",
        "orderbook-perp",
        "large-liquidations",
        "spotvsperp",
        "perpvscoinbase",
        "trades",
        "ob-speed",
        "_f8i6stuml3q7zwkc",
        "_bc6lfhgxb0wc36l9",
        "_pngsl31b0gpvtuas",
        "bollinger-bands",
        "averages",
        "volume",
        "top-bands-perps",
        "_0mg4vqeobgu9ep1h",
        "_oh4jdeuqr3sfb21e",
        "_754ztqlgvqyl7uv4",
        "_tl0sezw2my46cdj3",
        "_zutos8s4mda6l4nl",
        "_my4zvk49em6mh062",
        "_nzhr00eu7o3no6gm",
        "_0jf3x8lf5d8w6u6e",
        "_8wmsx7s5kg8mfzg7",
        "alerts",
        "_5iyacj6o11iiyiz4",
        "_w0nq2lcksrqb9ib6",
        "_acbxtd7a1i3xyd0d"
      ],
      "priceScales": {
        "right": {
          "scaleMargins": {
            "top": 0.33,
            "bottom": 0.44
          },
          "indicators": [
            "Price"
          ],
          "priceFormat": {
            "precision": 1,
            "minMove": 0.1
          }
        },
        "cvd": {
          "scaleMargins": {
            "top": 0.39,
            "bottom": 0.48
          },
          "indicators": [
            "CVD"
          ]
        },
        "volume_liquidations": {
          "scaleMargins": {
            "top": 0,
            "bottom": 0.96
          },
          "indicators": [
            "Liquidations"
          ]
        },
        "volume": {
          "scaleMargins": {
            "top": 0.62,
            "bottom": 0.3
          },
          "indicators": [
            "Volume"
          ]
        },
        "orderbook-0-1-spot": {
          "scaleMargins": {
            "top": 0.73,
            "bottom": 0.23
          },
          "indicators": [
            "Orderbook 0-1% spot"
          ],
          "priceFormat": {
            "precision": 1,
            "minMove": 0.1
          }
        },
        "orderbook-0-1-perp": {
          "scaleMargins": {
            "top": 0.86,
            "bottom": 0.1
          },
          "indicators": [
            "Orderbook 0-1% perp"
          ],
          "priceFormat": {
            "precision": 1,
            "minMove": 0.1
          }
        },
        "orderbook-spot": {
          "scaleMargins": {
            "top": 0.77,
            "bottom": 0.15
          },
          "indicators": [
            "Orderbook spot"
          ],
          "priceFormat": {
            "precision": 1,
            "minMove": 0.1
          }
        },
        "orderbook-perp": {
          "scaleMargins": {
            "top": 0.91,
            "bottom": 0
          },
          "indicators": [
            "Orderbook Perp"
          ]
        },
        "left": {
          "scaleMargins": {
            "top": 0.59,
            "bottom": 0.28
          }
        },
        "test": {
          "scaleMargins": {
            "top": 0.1,
            "bottom": 0.2
          }
        },
        "bids-asks-total": {
          "scaleMargins": {
            "top": 0.66,
            "bottom": 0.27
          },
          "indicators": [
            "Spot 1% delta"
          ]
        },
        "cvd-btc-spot-cb": {
          "scaleMargins": {
            "top": 0.04,
            "bottom": 0.8
          },
          "indicators": [
            "CVD Coinbase"
          ]
        },
        "cvd-binance-perp-futures": {
          "scaleMargins": {
            "top": 0.04,
            "bottom": 0.8
          },
          "indicators": [
            "CVD Binance Perps"
          ]
        },
        "cvd-binance-spot": {
          "scaleMargins": {
            "top": 0.04,
            "bottom": 0.8
          },
          "indicators": [
            "CVD Binance Spot "
          ]
        },
        "perps-premiuum-simple": {
          "scaleMargins": {
            "top": 0.2,
            "bottom": 0.77
          },
          "indicators": [
            "perps premiuum simple"
          ]
        },
        "perpvscoinbase": {
          "scaleMargins": {
            "top": 0.23,
            "bottom": 0.74
          },
          "indicators": [
            "perpvscoinbase"
          ]
        },
        "spotvsperp": {
          "scaleMargins": {
            "top": 0.2,
            "bottom": 0.77
          },
          "indicators": [
            "SpotVSPerp"
          ]
        },
        "trades": {
          "scaleMargins": {
            "top": 0.57,
            "bottom": 0.39
          },
          "indicators": [
            "trades"
          ]
        },
        "obv": {
          "scaleMargins": {
            "top": 0.14,
            "bottom": 0.21
          }
        },
        "obv-copy-1": {
          "scaleMargins": {
            "top": 0.14,
            "bottom": 0.21
          }
        },
        "ob-speed": {
          "scaleMargins": {
            "top": 0.62,
            "bottom": 0.33
          },
          "indicators": [
            "OB speed"
          ]
        },
        "cvdperp": {
          "scaleMargins": {
            "top": 0.04,
            "bottom": 0.8
          },
          "indicators": [
            "CVD (BTC PERP)"
          ]
        },
        "cvdspot": {
          "scaleMargins": {
            "top": 0.04,
            "bottom": 0.8
          },
          "indicators": [
            "CVD (BTC SPOT)"
          ]
        },
        "_v9ix9ggm0looumtf": {
          "scaleMargins": {
            "top": 0.04,
            "bottom": 0.8
          },
          "indicators": [
            "CVD Binance"
          ]
        },
        "_ilwzivhp75r7wuat": {
          "scaleMargins": {
            "top": 0.04,
            "bottom": 0.69
          }
        },
        "_bc6lfhgxb0wc36l9": {
          "scaleMargins": {
            "top": 0.04,
            "bottom": 0.8
          },
          "indicators": [
            "CVD Binance P"
          ]
        },
        "_f8i6stuml3q7zwkc": {
          "scaleMargins": {
            "top": 0.04,
            "bottom": 0.8
          }
        },
        "_pngsl31b0gpvtuas": {
          "scaleMargins": {
            "top": 0.04,
            "bottom": 0.8
          }
        },
        "_tdqicpndr092c1gk": {
          "scaleMargins": {
            "top": 0.02,
            "bottom": 0.88
          },
          "indicators": [
            "OI"
          ]
        },
        "_fbb1pk08gwhpg9s6": {
          "scaleMargins": {
            "top": 0.25,
            "bottom": 0.2
          },
          "indicators": [
            "LS"
          ]
        },
        "_zutos8s4mda6l4nl": {
          "scaleMargins": {
            "top": 0.25,
            "bottom": 0.63
          },
          "indicators": [
            "LS"
          ]
        },
        "_nzhr00eu7o3no6gm": {
          "scaleMargins": {
            "top": 0.1,
            "bottom": 0.2
          }
        },
        "_s5m8wbbdhz2oi1cs": {
          "scaleMargins": {
            "top": 0.1,
            "bottom": 0.2
          }
        }
      },
      "layouting": false,
      "showIndicators": true,
      "timeframe": "60",
      "refreshRate": 900,
      "showAlerts": true,
      "showAlertsLabel": true,
      "showLegend": true,
      "fillGapsWithEmpty": true,
      "showHorizontalGridlines": false,
      "horizontalGridlinesColor": "rgba(255,255,255,.1)",
      "showVerticalGridlines": false,
      "verticalGridlinesColor": "rgba(255,255,255,.1)",
      "showWatermark": false,
      "watermarkColor": "rgba(255,255,255,.1)",
      "showBorder": true,
      "borderColor": null,
      "textColor": null,
      "showLeftScale": false,
      "showRightScale": true,
      "showTimeScale": true,
      "hiddenMarkets": {},
      "barSpacing": 21.765085329481934,
      "_id": "chart",
      "navigationState": {
        "tab": "script",
        "optionsQuery": "",
        "fontSizePx": 14
      }
    },
    "chart copy 1": {
      "indicatorsErrors": {},
      "indicators": {
        "liquidations": {
          "enabled": true,
          "name": "Liquidations",
          "description": "Liquidations by side",
          "script": "plothistogram(lbuy, color=options.upColor)\nplothistogram(-lsell, color=options.downColor)",
          "options": {
            "priceFormat": {
              "type": "volume"
            },
            "priceScaleId": "volume_liquidations",
            "upColor": "rgb(255,76,243)",
            "downColor": "rgb(255,183,77)",
            "scaleMargins": {
              "top": 0,
              "bottom": 0.95
            },
            "visible": true
          },
          "id": "liquidations",
          "createdAt": 1700269685372,
          "updatedAt": 1710216420552,
          "series": [
            "liquidations",
            "sr8ynjgv"
          ],
          "optionsDefinitions": {},
          "libraryId": "liquidations",
          "unsavedChanges": false
        },
        "volume": {
          "enabled": true,
          "name": "Volume",
          "description": "Volume + delta",
          "script": "if (upColor === 0) {\n  if (options.showDelta) {\n    upColor = options.upBgColor\n    downColor = options.downBgColor\n  } else {\n    upColor = options.upColor\n    downColor = options.downColor\n  }\n}\n\nvar _vbuy = source(vbuy, type=perp)\nvar _vsell = source(vsell, type=perp)\n\nif (options.showDelta) {\n  plothistogram({ time: time, value: Math.abs(_vbuy-_vsell), color: _vbuy - _vsell > 0 ? options.upColor : options.downColor})\n}\n\nplothistogram({ time: time, value: _vbuy + _vsell, color: _vbuy > _vsell ? upColor : downColor })",
          "options": {
            "priceScaleId": "volume",
            "priceFormat": {
              "type": "volume"
            },
            "upColor": "rgba(76,175,80,0.62)",
            "downColor": "rgba(242,54,69,0.71)",
            "scaleMargins": {
              "top": 0.13,
              "bottom": 0.81
            },
            "showDelta": true,
            "upBgColor": "rgba(178,181,190,0.33)",
            "downBgColor": "rgba(93,96,107,0.38)",
            "visible": false,
            "lastValueVisible": true,
            "color": "rgba(195,168,122,0.54)",
            "showDeltaOnly": true,
            "showBoth": true
          },
          "id": "volume",
          "createdAt": 1700269685372,
          "updatedAt": null,
          "series": [
            "volume",
            "1sss8df8"
          ],
          "unsavedChanges": false,
          "optionsDefinitions": {}
        },
        "cvd-coinbase": {
          "script": "if (pivotsMax === 0) {\r\n  // Source\r\n  quote = option(default=null,type=list,options=[null, \"USD\", \"USDT\", \"TUSD\", \"USDC\"],rebuild=true)\r\n  exchange = option(default=null,type=exchange,rebuild=true)\r\n  type = option(default=perp,type=list,options=[null, \"spot\", \"perp\"],rebuild=true)\r\n  \r\n  maxBars = options.maxbars || 500\r\n\r\n  // Pivots\r\n  pivotsMax = options.ppCheck || 5\r\n  phPositions = []\r\n  plPositions = []\r\n  phVals = []\r\n  plVals = []\r\n  phCvds = []\r\n  plCvds = []\r\n}\r\n\r\nbuyVolume = source(vbuy, quote=quote,type=type,exchange=exchange)\r\nsellVolume = source(vsell, quote=quote,type=type,exchange=exchange)\r\n\r\ncvd(500) = cum(buyVolume - sellVolume)\r\n\r\nplotline(cvd, title=options.title || \"CVD\", color=options.cvdColor)\r\n\r\nif( options.toggleShowPricePivot ){\r\n  plotline(cvd, color=transparent)\r\n}\r\n\r\nif (options.showDivs) {\r\n  \r\n  // <markers utils>\r\n  if (markersDiv === 0) {\r\n    markersDiv = []\r\n  }\r\n  if (markersPivot === 0) {\r\n    markersPivot = []\r\n  }\r\n  \r\n  if (pendingMarkerDiv && pendingMarkerDiv.time < time) {\r\n    markersDiv.push(pendingMarkerDiv)\r\n    pendingMarkerDiv = null\r\n  }\r\n\r\n  if (pendingMarkerPivot && pendingMarkerPivot.time < time) {\r\n    markersPivot.push(pendingMarkerPivot)\r\n    pendingMarkerPivot = null\r\n  }\r\n  \r\n  var newMarkerDiv = null\r\n  var newMarkerPivot = null\r\n  // </markers utils>\r\n  \r\n  // Check if we get new Pivot High Or Pivot Low\r\n\r\n  // find pivots low (cvd and price)\r\n  //plCvd(10) = cvd //pivot_low(cvd, options.pivotLeftLength, options.pivotRightLength)\r\n  var plPrice = pivot_low($price.low, options.pivotLeftLength, options.pivotRightLength)\r\n\r\n  // find pivots high (cvd and price)\r\n  //phCvd(10) = cvd // pivot_high(cvd, options.pivotLeftLength, options.pivotRightLength)\r\n  var phPrice = pivot_high($price.high, options.pivotLeftLength, options.pivotRightLength)\r\n  \r\n  // if we have a new pivot point\r\n  if( plPrice ){\r\n    // get its CVD\r\n    var plCvd = cvd[options.pivotRightLength-1]\r\n    // add new pivot at beginning of array\r\n    plPositions.unshift(bar.length)\r\n    // add price pivot at beginning of array\r\n    plVals.unshift(plPrice)\r\n    plCvds.unshift(plCvd)\r\n  \r\n    // max pivots in memory. remove last \r\n    if( plPositions.length > pivotsMax ){\r\n      plPositions.pop();\r\n      plVals.pop()\r\n      plCvds.pop()\r\n    }\r\n\r\n    var foundDiv = false\r\n    var startPoint = 0\r\n   // cvd[100] // looks like required to load \r\n    // Go through each previous pivot\r\n    for( var i = 0; i < (options.ppCheck || 10); i++ ){ \r\n      if( i > plPositions.length || previousBarLength == 0){\r\n        break\r\n      }\r\n      var previousPrice = plVals[i]\r\n      var previousBarLength = plPositions[i]\r\n      var previousCvd = plCvds[i]\r\n\r\n      // Find distance to the previous pivot. where pivot is (bar - pivot) \r\n      var len = bar.length - options.pivotRightLength - 1 - previousBarLength\r\n      if( len > maxBars){\r\n        break\r\n      }\r\n      \r\n      var hiddenDiv = plPrice > previousPrice && phCvd < previousCvd\r\n      var regularDiv = plPrice < (previousPrice || 0) && plCvd > previousCvd\r\n\r\n      // Price lower than previous pivot but CVD is higher\r\n      if( /*len > 5 &&*/ hiddenDiv || hiddenDiv ){\r\n         foundDiv = true\r\n\r\n         newMarkerDiv = { \r\n          time: time - (options.pivotRightLength-1) * bar.timeframe,\r\n          color: options.DivcolorUp,\r\n          position: 'belowBar',\r\n          //shape: 'arrowDown',\r\n          text: '▲' + (options.togglePivotAgo ? i + 1 : '') + (hiddenDiv ? '.' : '')\r\n        }\r\n        break\r\n      }\r\n    }\r\n\r\n    if( !foundDiv && options.toggleShowPricePivot){\r\n      newMarkerPivot = {\r\n          time: time - (options.pivotRightLength-1) * bar.timeframe,\r\n          color: options.DivcolorUp,\r\n          position: 'belowBar',\r\n          //shape: 'arrowUp',\r\n          text:  'L'\r\n        }\r\n    }\r\n  }\r\n\r\n  if( phPrice ){\r\n    var phCvd = cvd[options.pivotRightLength-1]\r\n    phPositions.unshift(bar.length)\r\n    phVals.unshift(phPrice)\r\n    phCvds.unshift(phCvd)\r\n    if( phPositions.length > pivotsMax ){\r\n      phPositions.pop();\r\n      phVals.pop()\r\n      phCvds.pop()\r\n    }\r\n\r\n    var foundDiv = false\r\n    var startPoint = 0\r\n   // cvd[100] // looks like required to load \r\n    for( var i = 0; i < (options.ppCheck || 10); i++ ){ \r\n      if( i > phPositions.length || phPositions[i] == 0){\r\n        break\r\n      }\r\n      var previousPrice = phVals[i]\r\n      var previousBarLength = phPositions[i]\r\n      var previousCvd = phCvds[i]\r\n\r\n      // previousPivotDistance\r\n      var len = bar.length - options.pivotRightLength - 1 - previousBarLength\r\n\r\n      /*if( len > (options.maxbars || 100)){\r\n        break\r\n      }*/\r\n      var hiddenDiv = phPrice < previousPrice && phCvd > previousCvd\r\n      var regularDiv = phPrice > (previousPrice || Infinity) && phCvd < previousCvd\r\n\r\n      // Price greater than previous pivot but CVD lower\r\n      if( /*len > 5 &&*/ regularDiv || hiddenDiv ){\r\n        foundDiv = true\r\n         newMarkerDiv = { \r\n          time: time - (options.pivotRightLength-1) * bar.timeframe,\r\n          color: options.DivcolorDn,\r\n          position: 'aboveBar',\r\n          //shape: 'arrowDown',\r\n          text: '▼' + (options.togglePivotAgo ? i + 1 : '') + (hiddenDiv ? '.' : '')\r\n        }\r\n        break\r\n      }\r\n    }\r\n\r\n    if( !foundDiv  && options.toggleShowPricePivot ){\r\n        newMarkerPivot = { \r\n            time: time - (options.pivotRightLength-1) * bar.timeframe,\r\n            color: options.DivcolorDn,\r\n            position: 'aboveBar',\r\n            //shape: 'arrowDown',\r\n            text: 'H'\r\n          }\r\n    }\r\n  }\r\n  \r\n  // <markers utils>\r\n  if (newMarkerDiv || (pendingMarkerDiv && !newMarkerDiv)) {\r\n      pendingMarkerDiv = newMarkerDiv\r\n    \r\n    if (markersDiv.length > 100) {\r\n        markersDiv.splice(0, 1)\r\n    }\r\n      \r\n    if (series[0].setMarkers) {\r\n      series[0].setMarkers(markersDiv.concat(pendingMarkerDiv))\r\n    }\r\n  }\r\n\r\n  if (newMarkerPivot || (pendingMarkerPivot && !newMarkerPivot)) {\r\n      pendingMarkerPivot = newMarkerPivot\r\n    \r\n    if (markersPivot.length > 100) {\r\n        markersPivot.splice(0, 1)\r\n    }\r\n      \r\n    if (series[1].setMarkers) {\r\n      series[1].setMarkers(markersPivot.concat(pendingMarkerPivot))\r\n    }\r\n  }\r\n\r\n  // </markers utils>\r\n}",
          "id": "cvd-coinbase",
          "name": "CVD Coinbase",
          "options": {
            "priceScaleId": "cvd-btc-spot-cb",
            "priceFormat": {
              "type": "volume",
              "precision": 1,
              "minMove": 0.1,
              "auto": false
            },
            "color": "rgba(247,124,128,0.88)",
            "lastValueVisible": false,
            "priceLineVisible": false,
            "visible": true,
            "lineType": 0,
            "priceLineStyle": 0,
            "lineWidth": 1,
            "scaleMargins": {
              "top": 0.04,
              "bottom": 0.8
            },
            "showDivs": false,
            "pivotLeftLength": 26,
            "pivotRightLength": 26,
            "DivcolorUp": "rgb(247,124,128)",
            "DivcolorDn": "rgb(247,124,128)",
            "lineStyle": 1,
            "quote": 0,
            "exchange": "COINBASE",
            "type": "spot",
            "maxbars": null,
            "ppCheck": null,
            "title": "C",
            "toggleShowPricePivot": false,
            "togglePivotAgo": false,
            "cvdColor": "rgb(247,124,128)"
          },
          "description": null,
          "createdAt": 1634910143267,
          "updatedAt": 1747014676134,
          "unsavedChanges": false,
          "series": [
            "cvd-coinbase",
            "vkez1wo0"
          ],
          "displayName": "CVD Coinbase",
          "preview": {},
          "optionsDefinitions": {
            "quote": {
              "default": 0,
              "type": "list",
              "options": [
                null,
                "USD",
                "USDT",
                "TUSD",
                "USDC"
              ],
              "rebuild": true
            },
            "exchange": {
              "default": 0,
              "type": "exchange",
              "rebuild": true
            },
            "type": {
              "default": "perp",
              "type": "list",
              "options": [
                null,
                "spot",
                "perp"
              ],
              "rebuild": true
            }
          },
          "libraryId": "cvd-coinbase"
        },
        "cvd-binance-spot": {
          "script": "plotline(cum((BINANCE:btctusd.vbuy + BINANCE:btcusdt.vbuy+ BINANCE:btcbusd.vbuy+ BINANCE:btcusdc.vbuy) - (BINANCE:btcusdt.vsell + BINANCE:btcbusd.vsell + BINANCE:btcusdc.vsell + BINANCE:btctusd.vsell)), title=B)",
          "id": "cvd-binance-spot",
          "name": "CVD Binance Spot ",
          "options": {
            "priceScaleId": "cvd-btc-spot-cb",
            "color": "rgb(237,184,0)",
            "priceFormat": {
              "type": "volume",
              "precision": 1,
              "minMove": 0.1,
              "auto": false
            },
            "lastValueVisible": false,
            "visible": true,
            "priceLineVisible": false,
            "lineWidth": 2,
            "lineStyle": 1,
            "scaleMargins": {
              "top": 0.04,
              "bottom": 0.8
            },
            "showDivs": true,
            "pivotLeftLength": 21,
            "pivotRightLength": 21,
            "DivcolorUp": "rgb(76,175,80)",
            "DivcolorDn": "rgb(242,54,69)"
          },
          "description": null,
          "createdAt": 1634910008149,
          "updatedAt": 1700778157395,
          "unsavedChanges": false,
          "series": [
            "cvd-binance-spot"
          ],
          "displayName": "CVD Binance Spot ",
          "preview": {},
          "optionsDefinitions": {}
        },
        "cvd-binance-perps": {
          "script": "plotline(cum((BINANCE_FUTURES:btcusd_perp.vbuy + BINANCE_FUTURES:btcusdt.vbuy) - (BINANCE_FUTURES:btcusd_perp.vsell + BINANCE_FUTURES:btcusdt.vsell)), title=P)",
          "id": "cvd-binance-perps",
          "name": "CVD Binance Perps",
          "options": {
            "priceScaleId": "cvd-binance-perp-futures",
            "color": "rgb(208,184,186)",
            "priceFormat": {
              "type": "volume",
              "minMove": "0.01",
              "precision": 2
            },
            "lastValueVisible": false,
            "lineStyle": 0,
            "visible": false,
            "priceLineVisible": false,
            "lineWidth": 2,
            "scaleMargins": {
              "top": 0.04,
              "bottom": 0.8
            },
            "showDivs": true,
            "pivotLeftLength": 21,
            "pivotRightLength": 21,
            "DivcolorUp": "rgb(76,175,80)",
            "DivcolorDn": "rgb(242,54,69)"
          },
          "description": null,
          "createdAt": 1635243776140,
          "updatedAt": 1700778145115,
          "unsavedChanges": false,
          "series": [
            "cvd-binance-perps"
          ],
          "displayName": "CVD Binance Perps",
          "preview": {},
          "optionsDefinitions": {}
        },
        "perpvscoinbase": {
          "script": "binance = (BINANCE_FUTURES:btcusdt.high+BINANCE_FUTURES:btcusdt.low+BINANCE_FUTURES:btcusdt.close)/3 \nbybit = (BYBIT:BTCUSDT.high+BYBIT:BTCUSDT.low+BYBIT:BTCUSDT.close)/3 \nokx = (OKEX:BTC-USD-SWAP.high+OKEX:BTC-USD-SWAP.low+OKEX:BTC-USD-SWAP.close)/3 \ncoinbaseSpot = (COINBASE:BTC-USD.high+COINBASE:BTC-USD.low+ COINBASE:BTC-USD.close)/3\n\n\npremium = coinbaseSpot - (binance+bybit+okx)/3\nbaseline = 0\n\n\nplotcloudarea(premium, baseline, title=\"C\")\n//line(\n//  ema(premium, 10)\n//)",
          "id": "perpvscoinbase",
          "name": "perpvscoinbase",
          "options": {
            "priceScaleId": "perpvscoinbase",
            "visible": true,
            "priceLineVisible": false,
            "lastValueVisible": true,
            "lowerLineColor": "rgba(119,255,0,0)",
            "positiveColor": "rgba(242,54,69,0.38)",
            "negativeColor": "rgb(49,121,245)",
            "higherLineColor": "rgba(255,255,255,0)",
            "priceFormat": {
              "type": "price",
              "minMove": "0.01",
              "precision": 1
            },
            "lineStyle": 1,
            "color": "rgb(209,212,220)",
            "scaleMargins": {
              "top": 0.84,
              "bottom": 0.08
            }
          },
          "description": null,
          "createdAt": 1681264031489,
          "updatedAt": 1700779599696,
          "unsavedChanges": false,
          "series": [
            "perpvscoinbase"
          ],
          "displayName": "perpvscoinbase",
          "preview": {},
          "optionsDefinitions": {}
        },
        "spotvsperp": {
          "script": "binanceOnly = options.toggleBinanceOnly || false\r\noptions.toggleShowLegend\r\nvar binance = (BINANCE:btcusdt.high+BINANCE:btcusdt.low)/2\r\nvar bitfinex = (BITFINEX:BTCUSD.high+BITFINEX:BTCUSD.low)/2\r\n\r\nvar binancePerp = (BINANCE_FUTURES:btcusdt.high+BINANCE_FUTURES:btcusdt.low)/2\r\nvar bybit = (BYBIT:BTCUSDT.high+BYBIT:BTCUSDT.low)/2\r\n\r\nif(binanceOnly){\r\n  premium =  (binancePerp) - (binance) \r\n}else{\r\n  premium =  (binancePerp + bybit) / 2 - (binance+bitfinex) / 2\r\n}\r\n\r\n\r\nbaseline = 0\r\n\r\nplotcloudarea(\r\n  premium,\r\n  baseline, \r\n  positiveColor=options.topLineColor,\r\n  negativeColor=options.bottomLineColor,\r\n  title = 'PvS'\r\n)\r\n\r\n//line(bitfinex)",
          "name": "SpotVSPerp",
          "priceScaleId": "right",
          "id": "spotvsperp",
          "options": {
            "priceScaleId": "spotvsperp",
            "visible": true,
            "scaleMargins": {
              "top": 0.92,
              "bottom": 0
            },
            "negativeLineColor": "rgba(255,235,59,0)",
            "negativeColor": "rgba(255,241,118,0.86)",
            "positiveLineColor": "rgba(255,255,255,0.86)",
            "baseLineVisible": false,
            "positiveColor": "rgba(255,255,255,0.86)",
            "lastValueVisible": true,
            "priceLineVisible": false,
            "topLineColor": "rgb(149,152,161)",
            "bottomLineColor": "rgb(255,238,88)",
            "toggleBinanceOnly": false,
            "toggleShowLegend": null
          },
          "series": [
            "spotvsperp"
          ],
          "displayName": "SpotVSPerp",
          "unsavedChanges": false,
          "preview": {},
          "createdAt": 1700847615822,
          "updatedAt": 1738720054619,
          "optionsDefinitions": {},
          "libraryId": "spotvsperp"
        },
        "top-bands-spots": {
          "script": "if (!pendingMarkers) {\r\n    // runs only once\r\n    pendingMarkers = [] \r\n\r\n    togglePerp = options.togglePerp || false\r\n    \r\n    moveTo = options.togglePerp ? 10 : -10\r\n    bandSize = options.bandSize || 15\r\n\r\n    maxVolume = options.maxVolume || (togglePerp ? 4000 : 1500)\r\n    minVolume = options.minVolume || (togglePerp ? 500 : 200)\r\n\r\n    level0 = options.level0 || (togglePerp ? 2000 : 800)\r\n    level1 = options.level1 || (togglePerp ? 1000 : 400)\r\n\r\n    startOpacity = options.startOpacity || 0.1\r\n\r\n    colorLevel0 = options.colorLevel0.match(/\\(([\\d.]+),([\\d.]+),([\\d.]+),?([\\d.]+)?\\)$/).slice(1,5).map(a => +a)\r\n    colorLevel1 = options.colorLevel1.match(/\\(([\\d.]+),([\\d.]+),([\\d.]+),?([\\d.]+)?\\)$/).slice(1,5).map(a => +a)\r\n    colorLevel = options.colorLevel.match(/\\(([\\d.]+),([\\d.]+),([\\d.]+),?([\\d.]+)?\\)$/).slice(1,5).map(a => +a)\r\n\r\n    colorOpacity0 = colorLevel0.pop()\r\n    colorOpacity1 = colorLevel1.pop()\r\n    colorOpacity2 = colorLevel.pop()\r\n\r\n}\r\n\r\nvar levels = togglePerp ? ORDERBOOK:AGGRPERP-BTCUSD.zlevels  : ORDERBOOK:AGGRSPOT-BTCUSD.zlevels\r\n\r\nif( !levels ){\r\n  return\r\n}\r\n\r\n// avoid too many changes\r\nlevels.bids.sort( (a, b) => a[0] - b[0] )\r\nlevels.asks.sort( (a, b) => a[0] - b[0] )\r\n\r\nvar alpha1 = startOpacity + (1 - startOpacity) * ((levels.bids[0][1] - minVolume) / (maxVolume - minVolume))\r\nvar alpha1Rounded = Math.round(alpha1 * 100) / 100 \r\nvar color1base = levels.bids[0][1] > level0 ? colorLevel0 : levels.bids[0][1] > level1 ? colorLevel1 : colorLevel\r\nvar color1 = 'rgba(' + color1base.join(',') + ',' + alpha1Rounded + ')'\r\n\r\nvar alpha2 = startOpacity + (1 - startOpacity) * ((levels.bids[1][1] - minVolume) / (maxVolume - minVolume))\r\nvar alpha2Rounded = Math.round(alpha1 * 100) / 100 \r\nvar color2base = levels.bids[1][1] > level0 ? colorLevel0 : levels.bids[1][1] > level1 ? colorLevel1 : colorLevel\r\nvar color2 = 'rgba(' + color2base.join(',') + ',' + alpha2Rounded + ')'\r\n\r\nvar alpha3 = startOpacity + (1 - startOpacity) * ((levels.bids[2][1] - minVolume) / (maxVolume - minVolume))\r\nvar alpha3Rounded = Math.round(alpha1 * 100) / 100 \r\nvar color3base = levels.bids[2][1] > level0 ? colorLevel0 : levels.bids[2][1] > level1 ? colorLevel1 : colorLevel\r\nvar color3 = 'rgba(' + color3base.join(',') + ',' + alpha3Rounded + ')'\r\n\r\nvar alpha4 = startOpacity + (1 - startOpacity) * ((levels.bids[3][1] - minVolume) / (maxVolume - minVolume))\r\nvar alpha4Rounded = Math.round(alpha1 * 100) / 100 \r\nvar color4base = levels.bids[3][1] > level0 ? colorLevel0 : levels.bids[3][1] > level1 ? colorLevel1 : colorLevel\r\nvar color4 = 'rgba(' + color4base.join(',') + ',' + alpha4Rounded + ')'\r\n\r\nvar alpha5 = startOpacity + (1 - startOpacity) * ((levels.bids[4][1] - minVolume) / (maxVolume - minVolume))\r\nvar alpha5Rounded = Math.round(alpha1 * 100) / 100 \r\nvar color5base = levels.bids[4][1] > level0 ? colorLevel0 : levels.bids[4][1] > level1 ? colorLevel1 : colorLevel\r\nvar color5 = 'rgba(' + color5base.join(',') + ',' + alpha5Rounded + ')'\r\n\r\nif( levels.bids[0][1] > minVolume ){\r\n    renderer.indicators[indicatorId].series[0] = {\r\n      time: time ,\r\n      lowerValue: levels.bids[0][0],\r\n      higherValue: levels.bids[0][0] + bandSize,\r\n      color: color1\r\n    }\r\n}\r\n\r\nif( levels.bids[1][1] > minVolume ){\r\n    renderer.indicators[indicatorId].series[1] = {\r\n      time: time ,\r\n      lowerValue: levels.bids[1][0],\r\n      higherValue: levels.bids[1][0] + bandSize,\r\n      color: color1\r\n    }\r\n}\r\n\r\nif( levels.bids[2][1] > minVolume ){\r\n    renderer.indicators[indicatorId].series[2] = {\r\n      time: time ,\r\n      lowerValue: levels.bids[2][0],\r\n      higherValue: levels.bids[2][0] + bandSize,\r\n      color: color1\r\n    }\r\n}\r\n\r\nif( levels.bids[3][1] > minVolume ){\r\n    renderer.indicators[indicatorId].series[3] = {\r\n      time: time ,\r\n      lowerValue: levels.bids[3][0],\r\n      higherValue: levels.bids[3][0] + bandSize,\r\n      color: color1\r\n    }\r\n}\r\n\r\nif( levels.bids[4][1] > minVolume ){\r\n    renderer.indicators[indicatorId].series[4] = {\r\n      time: time ,\r\n      lowerValue: levels.bids[4][0],\r\n      higherValue: levels.bids[4][0] + bandSize,\r\n      color: color1\r\n    }\r\n}\r\n\r\nvar alphaAsks1 = startOpacity + (1 - startOpacity) * ((levels.asks[0][1] - minVolume) / (maxVolume - minVolume))\r\nvar alphaAsks1Rounded = Math.round(alphaAsks1 * 100) / 100 \r\nvar colorAsks1base = levels.asks[0][1] > level0 ? colorLevel0 : levels.asks[0][1] > level1 ? colorLevel1 : colorLevel\r\nvar colorAsks1 = 'rgba(' + colorAsks1base.join(',') + ',' + alphaAsks1Rounded + ')'\r\n\r\nvar alphaAsks2 = startOpacity + (1 - startOpacity) * ((levels.asks[1][1] - minVolume) / (maxVolume - minVolume))\r\nvar alphaAsks2Rounded = Math.round(alphaAsks1 * 100) / 100 \r\nvar colorAsks2base = levels.asks[1][1] > level0 ? colorLevel0 : levels.asks[1][1] > level1 ? colorLevel1 : colorLevel\r\nvar colorAsks2 = 'rgba(' + colorAsks2base.join(',') + ',' + alphaAsks2Rounded + ')'\r\n\r\nvar alphaAsks3 = startOpacity + (1 - startOpacity) * ((levels.asks[2][1] - minVolume) / (maxVolume - minVolume))\r\nvar alphaAsks3Rounded = Math.round(alphaAsks1 * 100) / 100 \r\nvar colorAsks3base = levels.asks[2][1] > level0 ? colorLevel0 : levels.asks[2][1] > level1 ? colorLevel1 : colorLevel\r\nvar colorAsks3 = 'rgba(' + colorAsks3base.join(',') + ',' + alphaAsks3Rounded + ')'\r\n\r\nvar alphaAsks4 = startOpacity + (1 - startOpacity) * ((levels.asks[3][1] - minVolume) / (maxVolume - minVolume))\r\nvar alphaAsks4Rounded = Math.round(alphaAsks1 * 100) / 100 \r\nvar colorAsks4base = levels.asks[3][1] > level0 ? colorLevel0 : levels.asks[3][1] > level1 ? colorLevel1 : colorLevel\r\nvar colorAsks4 = 'rgba(' + colorAsks4base.join(',') + ',' + alphaAsks4Rounded + ')'\r\n\r\nvar alphaAsks5 = startOpacity + (1 - startOpacity) * ((levels.asks[4][1] - minVolume) / (maxVolume - minVolume))\r\nvar alphaAsks5Rounded = Math.round(alphaAsks1 * 100) / 100 \r\nvar colorAsks5base = levels.asks[4][1] > level0 ? colorLevel0 : levels.asks[4][1] > level1 ? colorLevel1 : colorLevel\r\nvar colorAsks5 = 'rgba(' + colorAsks5base.join(',') + ',' + alphaAsks5Rounded + ')'\r\n\r\n\r\nif( levels.asks[0][1] > minVolume ){\r\n    renderer.indicators[indicatorId].series[5] = {\r\n      time: time ,\r\n      lowerValue: levels.asks[0][0],\r\n      higherValue: levels.asks[0][0] + bandSize,\r\n      color: color1\r\n    }\r\n}\r\n\r\nif( levels.asks[1][1] > minVolume ){\r\n    renderer.indicators[indicatorId].series[6] = {\r\n      time: time ,\r\n      lowerValue: levels.asks[1][0],\r\n      higherValue: levels.asks[1][0] + bandSize,\r\n      color: color1\r\n    }\r\n}\r\n\r\nif( levels.asks[2][1] > minVolume ){\r\n    renderer.indicators[indicatorId].series[7] = {\r\n      time: time ,\r\n      lowerValue: levels.asks[2][0],\r\n      higherValue: levels.asks[2][0] + bandSize,\r\n      color: color1\r\n    }\r\n}\r\n\r\nif( levels.asks[3][1] > minVolume ){\r\n    renderer.indicators[indicatorId].series[8] = {\r\n      time: time ,\r\n      lowerValue: levels.asks[3][0],\r\n      higherValue: levels.asks[3][0] + bandSize,\r\n      color: color1\r\n    }\r\n}\r\n\r\nif( levels.asks[4][1] > minVolume ){\r\n    renderer.indicators[indicatorId].series[9] = {\r\n      time: time ,\r\n      lowerValue: levels.asks[4][0],\r\n      higherValue: levels.asks[4][0] + bandSize,\r\n      color: color1\r\n    }\r\n}\r\n\r\nreturn\r\n\r\nplotbrokenarea({ time: time, lowerValue: levels.bids[0][0] + moveTo, higherValue: levels.bids[0][0] + bandSize + moveTo, color: color1 } )\r\nplotbrokenarea({ time: time, lowerValue: levels.bids[1][0] + moveTo, higherValue: levels.bids[1][0] + bandSize + moveTo, color: color2 } )\r\nplotbrokenarea({ time: time, lowerValue: levels.bids[2][0] + moveTo, higherValue: levels.bids[2][0] + bandSize + moveTo, color: color3 } )\r\nplotbrokenarea({ time: time, lowerValue: levels.bids[3][0] + moveTo, higherValue: levels.bids[3][0] + bandSize + moveTo, color: color4 } )\r\nplotbrokenarea({ time: time, lowerValue: levels.bids[4][0] + moveTo, higherValue: levels.bids[4][0] + bandSize + moveTo, color: color5 } )\r\n\r\nplotbrokenarea({ time: time, lowerValue: levels.asks[0][0] + moveTo, higherValue: levels.asks[0][0] + bandSize + moveTo, color: colorAsks1 } )\r\nplotbrokenarea({ time: time, lowerValue: levels.asks[1][0] + moveTo, higherValue: levels.asks[1][0] + bandSize + moveTo, color: colorAsks2 } )\r\nplotbrokenarea({ time: time, lowerValue: levels.asks[2][0] + moveTo, higherValue: levels.asks[2][0] + bandSize + moveTo, color: colorAsks3 } )\r\nplotbrokenarea({ time: time, lowerValue: levels.asks[3][0] + moveTo, higherValue: levels.asks[3][0] + bandSize + moveTo, color: colorAsks4 } )\r\nplotbrokenarea({ time: time, lowerValue: levels.asks[4][0] + moveTo, higherValue: levels.asks[4][0] + bandSize + moveTo, color: colorAsks5 } )",
          "name": "Top Bands Spots",
          "priceScaleId": "right",
          "id": "top-bands-spots",
          "options": {
            "priceScaleId": "right",
            "scaleMargins": {
              "top": 0.33,
              "bottom": 0.4
            },
            "visible": false,
            "colorLevels": "rgb(255,255,255)",
            "colorLevel1": "rgba(255,255,255,0.94)",
            "colorLevel0": "rgba(255,235,59,0.95)",
            "colorLevel": "rgb(178,181,190)",
            "level0": 800,
            "level1": 500,
            "maxVolume": 1500,
            "minVolume": 300,
            "startOpacity": 0.5,
            "togglePerp": false,
            "bandSize": 40,
            "lastValueVisible": false,
            "color": "rgb(76,175,80)",
            "limitPercent": 5
          },
          "series": [
            "top-bands-spots",
            "xgc4nzlb",
            "69ke5ux4",
            "th2xrxp5",
            "vwv59nhj",
            "o7y7zc3g",
            "3lxu6fi6",
            "3ehi0yo4",
            "1cs739n0",
            "v773sf48"
          ],
          "displayName": "Top Bands Spots",
          "unsavedChanges": false,
          "preview": {},
          "createdAt": 1701117407838,
          "updatedAt": 1701118585462,
          "optionsDefinitions": {}
        },
        "spot-bands copy 1": {
          "script": "if (!pendingMarkers) {\r\n    // runs only once\r\n    pendingMarkers = []\r\n\r\n    showType = {\r\n      spot: options.toggleSpot,\r\n      perp: options.togglePerp,\r\n      binance: options.toggleBinance,\r\n      coinbase: options.toggleCoinbase,\r\n      bitmex: options.toggleBitmex\r\n    }\r\n\r\n    toAdd = [\r\n        options.toggleBand1 || false,\r\n        options.toggleBand2 || false,\r\n        options.toggleBand3 || false,\r\n        options.toggleBand4 || false,\r\n    ]\r\n\r\n    highDiffSpot = options.highDiffSpot || 6500\r\n    highDiffPerp = options.highDiffPerp || 24000\r\n\r\n    highDiff = showType.spot ? highDiffSpot : highDiffPerp\r\n}\r\n// </STARTUP SCRIPT> \r\nvar bidsPerp = ORDERBOOK:AGGRPERP-BTCUSD.zbids\r\nvar asksPerp = ORDERBOOK:AGGRPERP-BTCUSD.zasks\r\nvar bidsSpot = ORDERBOOK:AGGRSPOT-BTCUSD.zbids \r\nvar asksSpot = ORDERBOOK:AGGRSPOT-BTCUSD.zasks \r\nvar bidsBinance = renderer.sources['ORDERBOOK:BINANCE-BTCUSDTLEVELS'] && renderer.sources['ORDERBOOK:BINANCE-BTCUSDTLEVELS'].zbids\r\nvar asksBinance = renderer.sources['ORDERBOOK:BINANCE-BTCUSDTLEVELS'] && renderer.sources['ORDERBOOK:BINANCE-BTCUSDTLEVELS'].zasks\r\nvar bidsCoinbase = renderer.sources['ORDERBOOK:COINBASE-BTCUSD'] && renderer.sources['ORDERBOOK:COINBASE-BTCUSD'].zbids\r\nvar asksCoinbase = renderer.sources['ORDERBOOK:COINBASE-BTCUSD'] && renderer.sources['ORDERBOOK:COINBASE-BTCUSD'].zasks\r\nvar bidsBitmex = renderer.sources['ORDERBOOK:BITMEX-XBTUSDLEVELS'] && renderer.sources['ORDERBOOK:BITMEX-XBTUSDLEVELS'].zbids\r\nvar asksBitmex = renderer.sources['ORDERBOOK:BITMEX-XBTUSDLEVELS'] && renderer.sources['ORDERBOOK:BITMEX-XBTUSDLEVELS'].zasks\r\n\r\nvar m = [\r\n    { which: 'perp', bids: bidsPerp || [], asks: asksPerp || [] },\r\n    { which: 'spot', bids: bidsSpot || [], asks: asksSpot || [] },\r\n    { which: 'binance', bids: bidsBinance || [], asks: asksBinance || [] },\r\n    { which: 'coinbase', bids: bidsCoinbase || [], asks: asksCoinbase || [] },\r\n    { which: 'bitmex', bids: bidsBitmex || [], asks: asksBitmex || [] }\r\n];\r\n\r\nvar _bids = 0\r\nvar _asks = 0\r\n\r\nfor(let typeIndex = 0; typeIndex < m.length; typeIndex++){\r\n\r\n    var c = m[typeIndex]\r\n\r\n    if( showType[c.which]  === false ){\r\n      continue\r\n    }\r\n\r\n    for(let i = 0; i < 4; i++){\r\n        if( toAdd[i] === true ){\r\n            _bids += c.bids[i] || 0\r\n            _asks += c.asks[i] || 0\r\n        }\r\n    }\r\n}\r\n\r\nplotcloudarea( _asks, _bids, positiveColor=options.positiveColor,  negativeColor=options.negativeColor,  higherLineColor=options.positiveLineColor, lowerLineColor=options.negativeLineColor)\r\n\r\nif ( Math.abs(_bids - _asks) > highDiff) {\r\n    brokenarea({\r\n      time: time, \r\n      lowerValue: _asks,\r\n      higherValue: _bids,\r\n      extendRight: false,\r\n      color: (_bids - _asks ? options.positiveColor : options.negativeColor)\r\n    })\r\n}",
          "name": "Spot bands",
          "priceScaleId": "bids-asks-total",
          "id": "spot-bands copy 1",
          "options": {
            "priceScaleId": "bids-asks-total",
            "scaleMargins": {
              "top": 0.58,
              "bottom": 0.29
            },
            "ratio0Toggle": null,
            "ratio1Toggle": null,
            "ratio2Toggle": null,
            "ratio3Toggle": null,
            "togglePerp": false,
            "toggleRatio0": true,
            "toggleRatio1": true,
            "toggleRatio2": true,
            "toggleRatio3": true,
            "negativeLineColor": "rgba(255,82,82,0.8)",
            "positiveLineColor": "rgba(41,175,47,0.97)",
            "visible": false,
            "toggleSpot": true,
            "toggleBinance": false,
            "toggleCoinbase": false,
            "toggleBitmex": false,
            "toggleBand1": true,
            "toggleBand2": true,
            "toggleBand3": true,
            "toggleBand4": true,
            "lastValueVisible": true,
            "priceFormat": {
              "type": "volume",
              "precision": 2,
              "minMove": 0.01,
              "auto": true
            },
            "highDiff": null,
            "highDiffSpot": 200,
            "highDiffPerp": 222,
            "positiveColor": "rgba(76,175,80,0.74)",
            "color": "rgba(178,181,190,0.57)",
            "toggleDelta": true,
            "negativeColor": "rgba(255,82,82,0.72)"
          },
          "series": [
            "spot-bands copy 1",
            "ux3v2wt8"
          ],
          "displayName": "Spot bands",
          "unsavedChanges": true,
          "preview": {},
          "createdAt": 1700698276480,
          "updatedAt": 1714189019976,
          "optionsDefinitions": {},
          "libraryId": "spot-bands copy 1"
        },
        "perps-bands copy 1": {
          "script": "if (!pendingMarkers) {\r\n    // runs only once\r\n    pendingMarkers = []\r\n\r\n    showType = {\r\n      spot: options.toggleSpot,\r\n      perp: options.togglePerp,\r\n      binance: options.toggleBinance,\r\n      coinbase: options.toggleCoinbase,\r\n      bitmex: options.toggleBitmex\r\n    }\r\n\r\n    toAdd = [\r\n        options.toggleBand1 || false,\r\n        options.toggleBand2 || false,\r\n        options.toggleBand3 || false,\r\n        options.toggleBand4 || false,\r\n    ]\r\n\r\n    highDiffSpot = options.highDiffSpot || 6500\r\n    highDiffPerp = options.highDiffPerp || 24000\r\n\r\n    highDiff = showType.spot ? highDiffSpot : highDiffPerp\r\n}\r\n// </STARTUP SCRIPT> \r\nvar bidsPerp = ORDERBOOK:AGGRPERP-BTCUSD.zbids\r\nvar asksPerp = ORDERBOOK:AGGRPERP-BTCUSD.zasks\r\nvar bidsSpot = ORDERBOOK:AGGRSPOT-BTCUSD.zbids \r\nvar asksSpot = ORDERBOOK:AGGRSPOT-BTCUSD.zasks \r\nvar bidsBinance = renderer.sources['ORDERBOOK:BINANCE-BTCUSDTLEVELS'] && renderer.sources['ORDERBOOK:BINANCE-BTCUSDTLEVELS'].zbids\r\nvar asksBinance = renderer.sources['ORDERBOOK:BINANCE-BTCUSDTLEVELS'] && renderer.sources['ORDERBOOK:BINANCE-BTCUSDTLEVELS'].zasks\r\nvar bidsCoinbase = renderer.sources['ORDERBOOK:COINBASE-BTCUSD'] && renderer.sources['ORDERBOOK:COINBASE-BTCUSD'].zbids\r\nvar asksCoinbase = renderer.sources['ORDERBOOK:COINBASE-BTCUSD'] && renderer.sources['ORDERBOOK:COINBASE-BTCUSD'].zasks\r\nvar bidsBitmex = renderer.sources['ORDERBOOK:BITMEX-XBTUSDLEVELS'] && renderer.sources['ORDERBOOK:BITMEX-XBTUSDLEVELS'].zbids\r\nvar asksBitmex = renderer.sources['ORDERBOOK:BITMEX-XBTUSDLEVELS'] && renderer.sources['ORDERBOOK:BITMEX-XBTUSDLEVELS'].zasks\r\n\r\nvar m = [\r\n    { which: 'perp', bids: bidsPerp || [], asks: asksPerp || [] },\r\n    { which: 'spot', bids: bidsSpot || [], asks: asksSpot || [] },\r\n    { which: 'binance', bids: bidsBinance || [], asks: asksBinance || [] },\r\n    { which: 'coinbase', bids: bidsCoinbase || [], asks: asksCoinbase || [] },\r\n    { which: 'bitmex', bids: bidsBitmex || [], asks: asksBitmex || [] }\r\n];\r\n\r\nvar _bids = 0\r\nvar _asks = 0\r\n\r\nfor(let typeIndex = 0; typeIndex < m.length; typeIndex++){\r\n\r\n    var c = m[typeIndex]\r\n\r\n    if( showType[c.which]  === false ){\r\n      continue\r\n    }\r\n\r\n    for(let i = 0; i < 4; i++){\r\n        if( toAdd[i] === true ){\r\n            _bids += c.bids[i] || 0\r\n            _asks += c.asks[i] || 0\r\n        }\r\n    }\r\n}\r\n\r\nplotcloudarea( _asks, _bids, positiveColor=options.positiveColor,  negativeColor=options.negativeColor,  higherLineColor=options.positiveLineColor, lowerLineColor=options.negativeLineColor)\r\n\r\nif ( Math.abs(_bids - _asks) > highDiff) {\r\n    brokenarea({\r\n      time: time, \r\n      lowerValue: _asks,\r\n      higherValue: _bids,\r\n      extendRight: false,\r\n      color: (_bids - _asks ? options.positiveColor : options.negativeColor)\r\n    })\r\n}",
          "name": "Perps bands",
          "priceScaleId": "bids-asks-perp",
          "id": "perps-bands copy 1",
          "options": {
            "priceScaleId": "bids-asks-perp",
            "scaleMargins": {
              "top": 0.71,
              "bottom": 0.16
            },
            "togglePerp": true,
            "toggleRatio0": true,
            "toggleRatio1": true,
            "toggleRatio2": true,
            "toggleRatio3": true,
            "baseLineVisible": false,
            "lastValueVisible": true,
            "priceFormat": {
              "type": "volume",
              "precision": 2,
              "minMove": 0.01,
              "auto": true
            },
            "priceLineVisible": false,
            "positiveLineColor": "rgba(76,175,80,0.26)",
            "negativeLineColor": "rgba(255,82,82,0.25)",
            "visible": true,
            "toggleSpot": null,
            "toggleBinance": null,
            "toggleCoinbase": null,
            "toggleBitmex": null,
            "toggleBand1": true,
            "toggleBand2": true,
            "toggleBand3": true,
            "toggleBand4": true,
            "highDiffSpot": null,
            "highDiffPerp": 12000
          },
          "series": [
            "perps-bands copy 1",
            "kh439yk5"
          ],
          "displayName": "Perps bands",
          "unsavedChanges": false,
          "preview": {},
          "createdAt": 1700771851976,
          "updatedAt": 1738720256399,
          "optionsDefinitions": {},
          "libraryId": "perps-bands copy 1"
        },
        "price-coinbase": {
          "script": "src = { sources: { \"BINANCE:btcusdt\":BINANCE:btcusdt }, localTimestamp: time }\r\n\r\nvar ohlc = options.useHeikinAshi ? avg_heikinashi(src) : options.useGaps ? avg_ohlc_with_gaps(src) : avg_ohlc(src)\r\n\r\nplotcandlestick(ohlc, id=price)",
          "name": "Price Coinbase",
          "priceScaleId": "right",
          "id": "price-coinbase",
          "options": {
            "priceScaleId": "right",
            "useGaps": null,
            "useHeikinAshi": null,
            "visible": true,
            "lastValueVisible": true,
            "baseLineVisible": false,
            "priceLineVisible": true,
            "scaleMargins": {
              "top": 0.33,
              "bottom": 0.4
            }
          },
          "series": [
            "price"
          ],
          "displayName": "Price Coinbase",
          "unsavedChanges": false,
          "optionsDefinitions": {},
          "libraryId": "price-coinbase",
          "createdAt": 1701644059121,
          "updatedAt": 1729278371307
        },
        "volume-strength": {
          "script": "candlestick($price, color=transparent)\r\n\r\nif (markers === 0) {\r\n  // first script execution (0 is default values for all persistent variables)\r\n\r\n  // create a var to store already drawn markers\r\n  markers = []\r\n\r\n  // contain the last marker that can change as the bar update\r\n  repaintableMarker = null\r\n\r\n  binanceVlen = options.binanceVlen || 2.9\r\n  binancePerpVlen  = options.binancePerpVlen || 5.8\r\n  coinbaseVlen   = options.coinbaseVlen || 5\r\n  bybitVlen   = options.bybitVlen || 5.9\r\n}\r\n\r\nif (repaintableMarker && repaintableMarker.time < time) {\r\n  // bar is +1 since active marker was added, lock it in the array\r\n  markers.push(repaintableMarker)\r\n\r\n  // free up active marker\r\n  repaintableMarker = null\r\n}\r\n\r\nvar newMarker = null\r\n\r\nvar binanceVolume = BINANCE:btcusdt.vbuy + BINANCE:btcusdt.vbuy\r\nvar binancePerpVolume = BINANCE_FUTURES:btcusdt.vbuy + BINANCE_FUTURES:btcusdt.vsell\r\nvar coinbaseVolume = COINBASE:BTC-USD.vbuy + COINBASE:BTC-USD.vsell\r\nvar bybitVolume = BYBIT:BTCUSDT.vbuy + BYBIT:BTCUSDT.vsell\r\n\r\nvar vnBinance = binanceVolume / ema(binanceVolume, 20)\r\nvar vnBinancePerp = binancePerpVolume / ema(binancePerpVolume, 20)\r\nvar vnCoinbase = coinbaseVolume / ema(coinbaseVolume, 20)\r\nvar vnBybit = bybitVolume / ema(bybitVolume, 20)\r\n\r\nvar draw = false\r\nvar myLabel = '';\r\n\r\nif (vnBinance > binanceVlen ) {\r\n  myLabel += 'Bin '\r\n  draw = true\r\n}\r\nif (vnBinancePerp > binancePerpVlen ) {\r\n  myLabel += 'P '\r\n  draw = true\r\n}\r\nif (vnCoinbase > coinbaseVlen ) {\r\n  myLabel += 'C '\r\n  draw = true\r\n}\r\nif (vnBybit > bybitVlen ) {\r\n  myLabel += 'BB '\r\n  draw = true\r\n}\r\n\r\nvar isSell  = $price.close > $price.open\r\n\r\nif( draw && isSell ){\r\n   (newMarker) = {\r\n    time: time,\r\n    position: 'aboveBar',\r\n    color:  'orange',\r\n    shape: 'arrowDown',\r\n    text:  myLabel\r\n  }\r\n}else if ( draw ){\r\n  (newMarker) = {\r\n    time: time,\r\n    position: 'belowBar',\r\n    color:  'yellow',\r\n    shape: 'arrowUp',\r\n    text:  myLabel\r\n  }\r\n}\r\n\r\nif (newMarker || (repaintableMarker && !newMarker)) {\r\n  // override persistent variable repaintable marker\r\n  repaintableMarker = newMarker\r\n  \r\n  if (series[0].setMarkers) {\r\n    series[0].setMarkers(markers.concat(repaintableMarker))\r\n  }\r\n}",
          "name": "Volume Strength",
          "priceScaleId": "right",
          "id": "volume-strength",
          "options": {
            "priceScaleId": "right",
            "binancePerpVlen": 4,
            "binanceVlen": 2.9,
            "coinbaseVlen": 3,
            "scaleMargins": {
              "top": 0.33,
              "bottom": 0.4
            },
            "bybitVlen": 4.2,
            "visible": false
          },
          "series": [
            "volume-strength"
          ],
          "displayName": "Volume Strength",
          "unsavedChanges": false,
          "preview": {},
          "createdAt": 1701022164949,
          "updatedAt": 1701644096534,
          "optionsDefinitions": {}
        },
        "mondays": {
          "script": "// <STARTUP SCRIPT> \r\nif (!boundaries) {\r\n  lastPivotHigh = null\r\n  lastPivotLow = null\r\n\r\n  mondayHigh = null\r\n  mondayLow = null\r\n\r\n  boundaries = {}\r\n  if (series[0].setExtensionsBoundaries) {\r\n    series[0].setExtensionsBoundaries(boundaries)\r\n  }\r\n  if (series[1].setExtensionsBoundaries) {\r\n    series[1].setExtensionsBoundaries(boundaries)\r\n  }\r\n}\r\n// </STARTUP SCRIPT> \r\n\r\npriceRef(92) = $price.close\r\n\r\nvar localDateTime = new Date(renderer.timestamp*1000);\r\n\r\n// oOnly within 2 weeks\r\nif( new Date().getTime() - localDateTime.getTime() > 1209600000 ){\r\n  //return\r\n}\r\n\r\n// NZ Tuesday 15.45\r\nif( localDateTime.getDay() == 2 && localDateTime.getHours() == 15 && localDateTime.getMinutes() === 45  ){\r\n  \r\n  // 23 hours\r\n  mondayHigh =  Math.max(...#priceRef)\r\n  mondayLow =  Math.min(...#priceRef)\r\n\r\n  renderer.indicators[indicatorId].series[0] = {\r\n    time: time,\r\n    lowerValue: mondayHigh,\r\n    higherValue: mondayHigh,\r\n    extendRight: true,\r\n    label: mondayHigh,\r\n  }\r\n\r\n  renderer.indicators[indicatorId].series[1] = {\r\n    time: time,\r\n    lowerValue: mondayLow,\r\n    higherValue: mondayLow,\r\n    extendRight: true,\r\n    label: mondayLow,\r\n  }\r\n}\r\n\r\nreturn\r\n  \r\nbrokenarea({ time: time }, strokeWidth = options.strokeWidth, strokeColor = options.strokeColor, lastValueVisible = true, title = \"M.H\")\r\nbrokenarea({ time: time }, strokeWidth = options.strokeWidth, strokeColor = options.strokeColor, lastValueVisible = true, title = \"M.L\")",
          "name": "Mondays",
          "priceScaleId": "right",
          "id": "mondays",
          "options": {
            "priceScaleId": "right",
            "pivotLength": 14,
            "strokeWidth": 1,
            "visible": true,
            "strokeColor": "rgba(255,255,255,0.35)",
            "scaleMargins": {
              "top": 0.33,
              "bottom": 0.4
            },
            "color": "rgba(76,175,80,0.51)"
          },
          "series": [
            "mondays",
            "kv1o8ch3"
          ],
          "displayName": "Mondays",
          "unsavedChanges": true,
          "preview": {},
          "createdAt": 1701224825127,
          "updatedAt": 1722993961130,
          "optionsDefinitions": {},
          "libraryId": "mondays"
        },
        "top-levels-perps": {
          "script": "if (!pendingMarkers) {\r\n    // runs only once\r\n    pendingMarkers = [] \r\n\r\n    togglePerp = options.togglePerp || false\r\n    \r\n    moveTo = options.togglePerp ? 10 : -10\r\n    bandSize = options.bandSize || 15\r\n\r\n    maxVolume = options.maxVolume || (togglePerp ? 4000 : 1500)\r\n    minVolume = options.minVolume || (togglePerp ? 500 : 200)\r\n\r\n    level0 = options.level0 || (togglePerp ? 2000 : 800)\r\n    level1 = options.level1 || (togglePerp ? 1000 : 400)\r\n\r\n    startOpacity = options.startOpacity || 0.1\r\n\r\n    colorLevel0 = options.colorLevel0.match(/\\(([\\d.]+),([\\d.]+),([\\d.]+),?([\\d.]+)?\\)$/).slice(1,5).map(a => +a)\r\n    colorLevel1 = options.colorLevel1.match(/\\(([\\d.]+),([\\d.]+),([\\d.]+),?([\\d.]+)?\\)$/).slice(1,5).map(a => +a)\r\n    colorLevel = options.colorLevel.match(/\\(([\\d.]+),([\\d.]+),([\\d.]+),?([\\d.]+)?\\)$/).slice(1,5).map(a => +a)\r\n\r\n    colorOpacity0 = colorLevel0.pop()\r\n    colorOpacity1 = colorLevel1.pop()\r\n    colorOpacity2 = colorLevel.pop()\r\n\r\n}\r\n\r\nvar levels = togglePerp ? ORDERBOOK:AGGRPERP-BTCUSD.zlevels  : ORDERBOOK:AGGRSPOT-BTCUSD.zlevels\r\n\r\nif( !levels ){\r\n  return\r\n}\r\n\r\n// avoid too many changes\r\nlevels.bids.sort( (a, b) => a[0] - b[0] )\r\nlevels.asks.sort( (a, b) => a[0] - b[0] )\r\n\r\nvar alpha1 = startOpacity + (1 - startOpacity) * ((levels.bids[0][1] - minVolume) / (maxVolume - minVolume))\r\nvar alpha1Rounded = Math.round(alpha1 * 100) / 100 \r\nvar color1base = levels.bids[0][1] > level0 ? colorLevel0 : levels.bids[0][1] > level1 ? colorLevel1 : colorLevel\r\nvar color1 = 'rgba(' + color1base.join(',') + ',' + alpha1Rounded + ')'\r\n\r\nvar alpha2 = startOpacity + (1 - startOpacity) * ((levels.bids[1][1] - minVolume) / (maxVolume - minVolume))\r\nvar alpha2Rounded = Math.round(alpha1 * 100) / 100 \r\nvar color2base = levels.bids[1][1] > level0 ? colorLevel0 : levels.bids[1][1] > level1 ? colorLevel1 : colorLevel\r\nvar color2 = 'rgba(' + color2base.join(',') + ',' + alpha2Rounded + ')'\r\n\r\nvar alpha3 = startOpacity + (1 - startOpacity) * ((levels.bids[2][1] - minVolume) / (maxVolume - minVolume))\r\nvar alpha3Rounded = Math.round(alpha1 * 100) / 100 \r\nvar color3base = levels.bids[2][1] > level0 ? colorLevel0 : levels.bids[2][1] > level1 ? colorLevel1 : colorLevel\r\nvar color3 = 'rgba(' + color3base.join(',') + ',' + alpha3Rounded + ')'\r\n\r\nvar alpha4 = startOpacity + (1 - startOpacity) * ((levels.bids[3][1] - minVolume) / (maxVolume - minVolume))\r\nvar alpha4Rounded = Math.round(alpha1 * 100) / 100 \r\nvar color4base = levels.bids[3][1] > level0 ? colorLevel0 : levels.bids[3][1] > level1 ? colorLevel1 : colorLevel\r\nvar color4 = 'rgba(' + color4base.join(',') + ',' + alpha4Rounded + ')'\r\n\r\nvar alpha5 = startOpacity + (1 - startOpacity) * ((levels.bids[4][1] - minVolume) / (maxVolume - minVolume))\r\nvar alpha5Rounded = Math.round(alpha1 * 100) / 100 \r\nvar color5base = levels.bids[4][1] > level0 ? colorLevel0 : levels.bids[4][1] > level1 ? colorLevel1 : colorLevel\r\nvar color5 = 'rgba(' + color5base.join(',') + ',' + alpha5Rounded + ')'\r\n\r\nif( levels.bids[0][1] > minVolume ){\r\n    renderer.indicators[indicatorId].series[0] = {\r\n      time: time ,\r\n      lowerValue: levels.bids[0][0],\r\n      higherValue: levels.bids[0][0] + bandSize,\r\n      color: color1\r\n    }\r\n}\r\n\r\nif( levels.bids[1][1] > minVolume ){\r\n    renderer.indicators[indicatorId].series[1] = {\r\n      time: time ,\r\n      lowerValue: levels.bids[1][0],\r\n      higherValue: levels.bids[1][0] + bandSize,\r\n      color: color1\r\n    }\r\n}\r\n\r\nif( levels.bids[2][1] > minVolume ){\r\n    renderer.indicators[indicatorId].series[2] = {\r\n      time: time ,\r\n      lowerValue: levels.bids[2][0],\r\n      higherValue: levels.bids[2][0] + bandSize,\r\n      color: color1\r\n    }\r\n}\r\n\r\nif( levels.bids[3][1] > minVolume ){\r\n    renderer.indicators[indicatorId].series[3] = {\r\n      time: time ,\r\n      lowerValue: levels.bids[3][0],\r\n      higherValue: levels.bids[3][0] + bandSize,\r\n      color: color1\r\n    }\r\n}\r\n\r\nif( levels.bids[4][1] > minVolume ){\r\n    renderer.indicators[indicatorId].series[4] = {\r\n      time: time ,\r\n      lowerValue: levels.bids[4][0],\r\n      higherValue: levels.bids[4][0] + bandSize,\r\n      color: color1\r\n    }\r\n}\r\n\r\nvar alphaAsks1 = startOpacity + (1 - startOpacity) * ((levels.asks[0][1] - minVolume) / (maxVolume - minVolume))\r\nvar alphaAsks1Rounded = Math.round(alphaAsks1 * 100) / 100 \r\nvar colorAsks1base = levels.asks[0][1] > level0 ? colorLevel0 : levels.asks[0][1] > level1 ? colorLevel1 : colorLevel\r\nvar colorAsks1 = 'rgba(' + colorAsks1base.join(',') + ',' + alphaAsks1Rounded + ')'\r\n\r\nvar alphaAsks2 = startOpacity + (1 - startOpacity) * ((levels.asks[1][1] - minVolume) / (maxVolume - minVolume))\r\nvar alphaAsks2Rounded = Math.round(alphaAsks1 * 100) / 100 \r\nvar colorAsks2base = levels.asks[1][1] > level0 ? colorLevel0 : levels.asks[1][1] > level1 ? colorLevel1 : colorLevel\r\nvar colorAsks2 = 'rgba(' + colorAsks2base.join(',') + ',' + alphaAsks2Rounded + ')'\r\n\r\nvar alphaAsks3 = startOpacity + (1 - startOpacity) * ((levels.asks[2][1] - minVolume) / (maxVolume - minVolume))\r\nvar alphaAsks3Rounded = Math.round(alphaAsks1 * 100) / 100 \r\nvar colorAsks3base = levels.asks[2][1] > level0 ? colorLevel0 : levels.asks[2][1] > level1 ? colorLevel1 : colorLevel\r\nvar colorAsks3 = 'rgba(' + colorAsks3base.join(',') + ',' + alphaAsks3Rounded + ')'\r\n\r\nvar alphaAsks4 = startOpacity + (1 - startOpacity) * ((levels.asks[3][1] - minVolume) / (maxVolume - minVolume))\r\nvar alphaAsks4Rounded = Math.round(alphaAsks1 * 100) / 100 \r\nvar colorAsks4base = levels.asks[3][1] > level0 ? colorLevel0 : levels.asks[3][1] > level1 ? colorLevel1 : colorLevel\r\nvar colorAsks4 = 'rgba(' + colorAsks4base.join(',') + ',' + alphaAsks4Rounded + ')'\r\n\r\nvar alphaAsks5 = startOpacity + (1 - startOpacity) * ((levels.asks[4][1] - minVolume) / (maxVolume - minVolume))\r\nvar alphaAsks5Rounded = Math.round(alphaAsks1 * 100) / 100 \r\nvar colorAsks5base = levels.asks[4][1] > level0 ? colorLevel0 : levels.asks[4][1] > level1 ? colorLevel1 : colorLevel\r\nvar colorAsks5 = 'rgba(' + colorAsks5base.join(',') + ',' + alphaAsks5Rounded + ')'\r\n\r\n\r\nif( levels.asks[0][1] > minVolume ){\r\n    renderer.indicators[indicatorId].series[5] = {\r\n      time: time ,\r\n      lowerValue: levels.asks[0][0],\r\n      higherValue: levels.asks[0][0] + bandSize,\r\n      color: color1\r\n    }\r\n}\r\n\r\nif( levels.asks[1][1] > minVolume ){\r\n    renderer.indicators[indicatorId].series[6] = {\r\n      time: time ,\r\n      lowerValue: levels.asks[1][0],\r\n      higherValue: levels.asks[1][0] + bandSize,\r\n      color: color1\r\n    }\r\n}\r\n\r\nif( levels.asks[2][1] > minVolume ){\r\n    renderer.indicators[indicatorId].series[7] = {\r\n      time: time ,\r\n      lowerValue: levels.asks[2][0],\r\n      higherValue: levels.asks[2][0] + bandSize,\r\n      color: color1\r\n    }\r\n}\r\n\r\nif( levels.asks[3][1] > minVolume ){\r\n    renderer.indicators[indicatorId].series[8] = {\r\n      time: time ,\r\n      lowerValue: levels.asks[3][0],\r\n      higherValue: levels.asks[3][0] + bandSize,\r\n      color: color1\r\n    }\r\n}\r\n\r\nif( levels.asks[4][1] > minVolume ){\r\n    renderer.indicators[indicatorId].series[9] = {\r\n      time: time ,\r\n      lowerValue: levels.asks[4][0],\r\n      higherValue: levels.asks[4][0] + bandSize,\r\n      color: color1\r\n    }\r\n}\r\n\r\nreturn\r\n\r\nplotbrokenarea({ time: time, lowerValue: levels.bids[0][0] + moveTo, higherValue: levels.bids[0][0] + bandSize + moveTo, color: color1 } )\r\nplotbrokenarea({ time: time, lowerValue: levels.bids[1][0] + moveTo, higherValue: levels.bids[1][0] + bandSize + moveTo, color: color2 } )\r\nplotbrokenarea({ time: time, lowerValue: levels.bids[2][0] + moveTo, higherValue: levels.bids[2][0] + bandSize + moveTo, color: color3 } )\r\nplotbrokenarea({ time: time, lowerValue: levels.bids[3][0] + moveTo, higherValue: levels.bids[3][0] + bandSize + moveTo, color: color4 } )\r\nplotbrokenarea({ time: time, lowerValue: levels.bids[4][0] + moveTo, higherValue: levels.bids[4][0] + bandSize + moveTo, color: color5 } )\r\n\r\nplotbrokenarea({ time: time, lowerValue: levels.asks[0][0] + moveTo, higherValue: levels.asks[0][0] + bandSize + moveTo, color: colorAsks1 } )\r\nplotbrokenarea({ time: time, lowerValue: levels.asks[1][0] + moveTo, higherValue: levels.asks[1][0] + bandSize + moveTo, color: colorAsks2 } )\r\nplotbrokenarea({ time: time, lowerValue: levels.asks[2][0] + moveTo, higherValue: levels.asks[2][0] + bandSize + moveTo, color: colorAsks3 } )\r\nplotbrokenarea({ time: time, lowerValue: levels.asks[3][0] + moveTo, higherValue: levels.asks[3][0] + bandSize + moveTo, color: colorAsks4 } )\r\nplotbrokenarea({ time: time, lowerValue: levels.asks[4][0] + moveTo, higherValue: levels.asks[4][0] + bandSize + moveTo, color: colorAsks5 } )",
          "name": "Top Levels Perps",
          "priceScaleId": "right",
          "id": "top-levels-perps",
          "options": {
            "priceScaleId": "right",
            "scaleMargins": {
              "top": 0.33,
              "bottom": 0.4
            },
            "visible": false,
            "colorLevels": "rgb(255,255,255)",
            "colorLevel1": "rgb(24,72,204)",
            "colorLevel0": "rgb(178,40,51)",
            "colorLevel": "rgb(91,156,246)",
            "level0": 2000,
            "level1": 1200,
            "maxVolume": 3500,
            "minVolume": 1200,
            "startOpacity": 0.5,
            "togglePerp": true,
            "bandSize": 30
          },
          "series": [
            "top-levels-perps",
            "mvpqlvyz",
            "rkbmownw",
            "gzgj4ucy",
            "zys9ulsz",
            "sdoe53rh",
            "zj82lbd2",
            "oy26iv0i",
            "kzsmcvny",
            "c6xn5u5d"
          ],
          "displayName": "Top Levels Perps",
          "unsavedChanges": true,
          "preview": {},
          "createdAt": 1700867543235,
          "updatedAt": 1701118498209,
          "optionsDefinitions": {}
        },
        "overlays-aggr": {
          "script": "if (!pendingMarkers) {\r\n    // runs only once\r\n    pendingMarkers = []\r\n    spotColor = options.spotColor.match(/\\(([\\d.]+),([\\d.]+),([\\d.]+),?([\\d.]+)?\\)$/).slice(1,5).map(a => +a)\r\n    perpColor = options.perpColor.match(/\\(([\\d.]+),([\\d.]+),([\\d.]+),?([\\d.]+)?\\)$/).slice(1,5).map(a => +a)\r\n    binanceColor = options.binanceColor.match(/\\(([\\d.]+),([\\d.]+),([\\d.]+),?([\\d.]+)?\\)$/).slice(1,5).map(a => +a)\r\n    coinbaseColor = options.coinbaseColor.match(/\\(([\\d.]+),([\\d.]+),([\\d.]+),?([\\d.]+)?\\)$/).slice(1,5).map(a => +a)\r\n    bitmexColor = options.bitmexColor.match(/\\(([\\d.]+),([\\d.]+),([\\d.]+),?([\\d.]+)?\\)$/).slice(1, 5).map(a => +a);\r\n\r\n    //allOnColor = options.allOnColor.match(/\\(([\\d.]+),([\\d.]+),([\\d.]+),?([\\d.]+)?\\)$/).slice(1,5).map(a => +a)\r\n\r\n    spotOpacity = spotColor.pop()\r\n    perpOpacity = perpColor.pop()\r\n    binanceOpacity = binanceColor.pop()\r\n    coinbaseOpacity = coinbaseColor.pop()\r\n    bitmexOpacity = bitmexColor.pop()\r\n   // allOnColorOpacity = allOnColor.pop()\r\n\r\n    startOpacity = options.startOpacity || 0.1\r\n  \r\n    spotBuyAlerts  = [70, 70, 70, 70]\r\n    spotSellAlerts = [-70, -70, -70, -70]\r\n\r\n    perpBuyAlerts  = [50, 50, 50, 50]\r\n    perpSellAlerts = [-30, -50, -50, -50]\r\n\r\n    binanceBuyAlerts  = [70, 70, 70, 70]\r\n    binanceSellAlerts = [-70, -70, -70, -70]\r\n\r\n    coinbaseBuyAlerts  = [50, 50, 50, 50]\r\n    coinbaseSellAlerts = [-50, -70, -65, -50]\r\n\r\n    bitmexBuyAlerts  = [-50, -60, -50, -50]\r\n    bitmexSellAlerts = [-50, -60, -50, -50]\r\n\r\n    alerts = {\r\n      spot: {\r\n        buy: spotBuyAlerts,\r\n        sell: spotSellAlerts\r\n      },\r\n      perp: {\r\n        buy: perpBuyAlerts,\r\n        sell: perpSellAlerts\r\n      },\r\n      binance: {\r\n        buy: binanceBuyAlerts,\r\n        sell: binanceSellAlerts\r\n      },\r\n      coinbase: {\r\n        buy: coinbaseBuyAlerts,\r\n        sell: coinbaseSellAlerts\r\n      },\r\n        bitmex: {\r\n            buy: bitmexBuyAlerts,\r\n            sell: bitmexSellAlerts\r\n        }\r\n    }\r\n\r\n    whichColors = {\r\n      spot: spotColor,\r\n      perp: perpColor,\r\n      binance: binanceColor,\r\n      coinbase: coinbaseColor,\r\n      bitmex: bitmexColor\r\n    }\r\n\r\n    allOnIndicator = options.toggleAllOnIndicator || false,\r\n\r\n    showType = {\r\n      spot: options.toggleSpot,\r\n      perp: options.togglePerp,\r\n      binance: options.toggleBinance,\r\n      coinbase: options.toggleCoinbase,\r\n      bitmex: options.toggleBitmex\r\n    }\r\n\r\n    showBand = [\r\n        options.toggleBand1 || false,\r\n        options.toggleBand2 || false,\r\n        options.toggleBand3 || false,\r\n        options.toggleBand4 || false,\r\n    ]\r\n\r\n    lowerPercent = [options.band0lowerPercent || 0.11, 1, 2.5, 5]\r\n    upperPercent = [1, 2.5, 5, 10]  \r\n\r\n    timeframeMs = (renderer.timeframe * 1000)\r\n\r\n  }\r\n  // </STARTUP SCRIPT>\r\n\r\n  // TODO not working need to loo at previous \r\nvar isLastBar = false // renderer.timestamp *1000 === Math.floor(new Date().getTime() / timeframeMs) * timeframeMs\r\nvar ratiosPerp = ORDERBOOK:AGGRPERP-BTCUSD.zratios\r\nvar ratiosSpot = ORDERBOOK:AGGRSPOT-BTCUSD.zratios \r\nvar ratiosBinance = renderer.sources['ORDERBOOK:BINANCE-BTCUSDTLEVELS'] && renderer.sources['ORDERBOOK:BINANCE-BTCUSDTLEVELS'].zratios\r\nvar ratiosCoinbase = renderer.sources['ORDERBOOK:COINBASE-BTCUSD'] && renderer.sources['ORDERBOOK:COINBASE-BTCUSD'].zratios \r\nvar ratiosBitmex = renderer.sources['ORDERBOOK:BITMEX-XBTUSDLEVELS'] && renderer.sources['ORDERBOOK:BITMEX-XBTUSDLEVELS'].zratios\r\n\r\nvar m = [\r\n    { which: 'perp', ratios: ratiosPerp || [], bands: [] },\r\n    { which: 'spot', ratios: ratiosSpot || [], bands: [] },\r\n    { which: 'binance', ratios: ratiosBinance || [], bands: [] },\r\n    { which: 'coinbase', ratios: ratiosCoinbase || [], bands: [] },\r\n    { which: 'bitmex', ratios: ratiosBitmex || [], bands: [] }\r\n];\r\n  \r\n  /*var ratiosPerp = ORDERBOOK:AGGRPERP-BTCUSD.zratios\r\n  var ratiosSpot = ORDERBOOK:AGGRSPOT-BTCUSD.zratios \r\n  var ratiosBinance = renderer.sources['ORDERBOOK:BINANCE-BTCUSDTLEVELS'].zratios\r\n  var ratiosCoinbase = renderer.sources['ORDERBOOK:COINBASE-BTCUSD'].zratios \r\n\r\n  var perps = []\r\n  var spots = []\r\n  var binance = []\r\n  var coinbase = []\r\n*/\r\n  //var ratio = 0\r\n\r\n// for each ratio\r\nfor(let ratioIndex = 0; ratioIndex < 4; ratioIndex++){\r\n\r\n  // TODO must be same direction\r\n  var allOn = true;\r\n\r\n  // for each type (perp, spot, binance, ...)\r\n  for(let typeIndex = 0; typeIndex < m.length; typeIndex++){\r\n\r\n    var c = m[typeIndex]\r\n\r\n    if( showBand[ratioIndex] === false || showType[c.which]  === false ){\r\n      c.bands.push([0, 0, 'rgba(255,255,255,0)']) \r\n      continue\r\n    }\r\n      \r\n    /*\r\n    var ratioPerp = ratiosPerp && ratiosPerp.length > ratioIndex && ratiosPerp[ratioIndex]\r\n    var ratioSpot =  ratiosSpot && ratiosSpot.length > ratioIndex && ratiosSpot[ratioIndex]\r\n    var ratioBinance =  ratiosBinance && ratiosBinance.length > ratioIndex && ratiosBinance[ratioIndex]\r\n    var ratioCoinbase =  ratiosCoinbase && ratiosCoinbase.length > ratioIndex && ratiosCoinbase[ratioIndex]\r\n    */\r\n    var ratio = c.ratios.length && c.ratios[ratioIndex]\r\n    var direction = Math.sign(ratio)\r\n    var buyAlert = alerts[c.which]['buy'][ratioIndex]\r\n    var sellAlert = alerts[c.which]['sell'][ratioIndex]\r\n    var threshold = direction > 0 ? buyAlert : sellAlert\r\n    var thresholdAbs = Math.abs(threshold)\r\n  \r\n    var lower = $price.close + -1 * direction * (($price.close  * lowerPercent[ratioIndex]) / 100)  \r\n    var upper = $price.close + -1 * direction * (($price.close  * upperPercent[ratioIndex]) / 100)\r\n\r\n    if( !ratio || Math.abs(ratio) < thresholdAbs ){\r\n        allOn = false\r\n        c.bands.push([0, 0, 'rgba(255,255,255,0)']) \r\n    }else{\r\n\r\n        var alphaRatio = Math.abs(ratio) < thresholdAbs ? 0 : startOpacity + (1 - startOpacity) * ((Math.abs(ratio) - thresholdAbs) / (100 - thresholdAbs))\r\n        var alphaRatioRounded = Math.round(alphaRatio * 100) / 100 \r\n        var colorRatio = 'rgba(' + whichColors[c.which].join(',') + ',' + alphaRatioRounded + ')'\r\n        \r\n        c.bands.push([lower, upper, colorRatio])\r\n    }\r\n    \r\n  }// end for each type\r\n\r\n  if( allOnIndicator && allOn ){\r\n    for(let typeIndex = 0; typeIndex < 4; typeIndex++){\r\n      var c = m[typeIndex]\r\n      c.bands[ratioIndex] = [lower, upper, options.allOnColor]\r\n    }\r\n  }\r\n\r\n} // end for each ratios\r\n\r\n\r\nvar i = 0\r\n\r\nfor(let ratioIndex = 0; ratioIndex < 4; ratioIndex++){\r\n\r\n    if( showBand[ratioIndex] === false ){\r\n      i = i + m.length\r\n      continue\r\n    }\r\n\r\n    for(let typeIndex = 0; typeIndex < m.length; typeIndex++){\r\n\r\n       var c = m[typeIndex]\r\n    \r\n       // Print band if not 0 or i flast bar (so it removes previous)\r\n       if( c.bands.length && ( isLastBar || c.bands[ratioIndex][0] !== 0) ) {\r\n         renderer.indicators[indicatorId].series[i] = {\r\n          time: time, \r\n          lowerValue: c.bands[ratioIndex][0],\r\n          higherValue: c.bands[ratioIndex][1],\r\n          color:  c.bands[ratioIndex][2]\r\n        }\r\n      }\r\n\r\n      i++\r\n    }\r\n}\r\n\r\n\r\n\r\nreturn\r\n//perp\r\nbrokenarea({\r\n        time: time, \r\n        lowerValue: 0,\r\n        higherValue: 0,\r\n        color:  options.color\r\n      })\r\nbrokenarea({\r\n        time: time, \r\n        lowerValue: 0,\r\n        higherValue: 0,\r\n        color:  options.color\r\n      })\r\nbrokenarea({\r\n        time: time, \r\n        lowerValue: 0,\r\n        higherValue: 0,\r\n        color:  options.color\r\n      })\r\nbrokenarea({\r\n        time: time, \r\n        lowerValue: 0,\r\n        higherValue: 0,\r\n        color:  options.color\r\n      })     \r\n      brokenarea({\r\n        time: time, \r\n        lowerValue: 0,\r\n        higherValue: 0,\r\n        color:  options.color\r\n      })\r\nbrokenarea({\r\n        time: time, \r\n        lowerValue: 0,\r\n        higherValue: 0,\r\n        color:  options.color\r\n      })\r\nbrokenarea({\r\n        time: time, \r\n        lowerValue: 0,\r\n        higherValue: 0,\r\n        color:  options.color\r\n      })\r\nbrokenarea({\r\n        time: time, \r\n        lowerValue: 0,\r\n        higherValue: 0,\r\n        color:  options.color\r\n      })   \r\n      brokenarea({\r\n        time: time, \r\n        lowerValue: 0,\r\n        higherValue: 0,\r\n        color:  options.color\r\n      })\r\nbrokenarea({\r\n        time: time, \r\n        lowerValue: 0,\r\n        higherValue: 0,\r\n        color:  options.color\r\n      })\r\nbrokenarea({\r\n        time: time, \r\n        lowerValue: 0,\r\n        higherValue: 0,\r\n        color:  options.color\r\n      })\r\nbrokenarea({\r\n        time: time, \r\n        lowerValue: 0,\r\n        higherValue: 0,\r\n        color:  options.color\r\n      })   \r\n      brokenarea({\r\n        time: time, \r\n        lowerValue: 0,\r\n        higherValue: 0,\r\n        color:  options.color\r\n      })\r\nbrokenarea({\r\n        time: time, \r\n        lowerValue: 0,\r\n        higherValue: 0,\r\n        color:  options.color\r\n      })\r\nbrokenarea({\r\n        time: time, \r\n        lowerValue: 0,\r\n        higherValue: 0,\r\n        color:  options.color\r\n      })\r\nbrokenarea({\r\n        time: time, \r\n        lowerValue: 0,\r\n        higherValue: 0,\r\n        color:  options.color\r\n      })\r\n            brokenarea({\r\n        time: time, \r\n        lowerValue: 0,\r\n        higherValue: 0,\r\n        color:  options.color\r\n      })\r\nbrokenarea({\r\n        time: time, \r\n        lowerValue: 0,\r\n        higherValue: 0,\r\n        color:  options.color\r\n      })\r\nbrokenarea({\r\n        time: time, \r\n        lowerValue: 0,\r\n        higherValue: 0,\r\n        color:  options.color\r\n      })\r\nbrokenarea({\r\n        time: time, \r\n        lowerValue: 0,\r\n        higherValue: 0,\r\n        color:  options.color\r\n      })",
          "id": "overlays-aggr",
          "name": "Overlays Aggr",
          "options": {
            "priceScaleId": "right",
            "startOpacity": null,
            "allOnColor": "rgb(242,54,69)",
            "binanceColor": "rgb(255,255,255)",
            "perpColor": "rgb(41,98,255)",
            "spotColor": "rgb(255,235,59)",
            "scaleMargins": {
              "top": 0.33,
              "bottom": 0.4
            },
            "coinbaseColor": "rgb(247,124,128)",
            "visible": false,
            "priceFormat": {
              "type": "price",
              "precision": 1,
              "minMove": 0.1,
              "auto": true
            },
            "toggleSpot": true,
            "togglePerp": true,
            "toggleBinance": false,
            "toggleCoinbase": false,
            "toggleAllOnIndicator": true,
            "toggleBitmex": false,
            "bitmexColor": "rgb(149,117,205)",
            "toggleBand1": true,
            "toggleBand2": true,
            "toggleBand3": true,
            "toggleBand4": true,
            "band0lowerPercent": 0.25
          },
          "description": null,
          "createdAt": 1703208803782,
          "updatedAt": 1744235214280,
          "unsavedChanges": true,
          "optionsDefinitions": {},
          "series": [
            "overlays-aggr",
            "5uqh82in",
            "5r6npdxn",
            "if5rfla2",
            "c4oi28zp",
            "zz4lzxsv",
            "o5mw1ycq",
            "3qho3egf",
            "cj6barm6",
            "51boc1lh",
            "9sebb7rf",
            "24qmo91b",
            "4otu6fe4",
            "092jqcgw",
            "mqox8p2v",
            "evs05fgi",
            "9k0zxn4d",
            "no7n1chd",
            "ihiiamty",
            "rhw3sudt"
          ],
          "displayName": "Overlays Aggr",
          "libraryId": "overlays-aggr"
        },
        "extra-copy-1": {
          "script": "var price = (BINANCE_FUTURES:btcusdt.high + BINANCE_FUTURES:btcusdt.low + BINANCE_FUTURES:btcusdt.close) / 3\r\nvar sumPV = sum((BINANCE_FUTURES:btcusdt.vsell + BINANCE_FUTURES:btcusdt.vbuy) * (BINANCE_FUTURES:btcusdt.high + BINANCE_FUTURES:btcusdt.low + BINANCE_FUTURES:btcusdt.close) / 3 , options.vwmaLength)\r\nvar sumV = sum((BINANCE_FUTURES:btcusdt.vsell + BINANCE_FUTURES:btcusdt.vbuy), options.vwmaLength)\r\n\r\nline(ema(price, options.emaLength))\r\n\r\nline(sumPV / sumV, color = options.vwmaColor)",
          "name": "extra copy 1",
          "priceScaleId": "right",
          "id": "extra-copy-1",
          "options": {
            "priceScaleId": "right",
            "color": "rgba(178,40,51,0.71)",
            "vwma": null,
            "vwmaColor": "rgba(251,192,45,0.64)",
            "visible": false,
            "scaleMargins": {
              "top": 0.33,
              "bottom": 0.4
            },
            "vwmaLength": 50,
            "emaLength": 100
          },
          "optionsDefinitions": {},
          "series": [
            "extra-copy-1",
            "h0igoi44"
          ],
          "displayName": "extra copy 1",
          "unsavedChanges": true,
          "preview": {}
        },
        "_ilwzivhp75r7wuat": {
          "id": "_ilwzivhp75r7wuat",
          "libraryId": "cvd-divs-pivot",
          "name": "CVD Perp",
          "script": "if (pivotsMax === 0) {\r\n  // Source\r\n  quote = option(default=null,type=list,options=[null, \"USD\", \"USDT\", \"TUSD\", \"USDC\"],rebuild=true)\r\n  exchange = option(default=null,type=exchange,rebuild=true)\r\n  type = option(default=perp,type=list,options=[null, \"spot\", \"perp\"],rebuild=true)\r\n  \r\n  // Pivots\r\n  pivotsMax = 20\r\n  phPositions = []\r\n  plPositions = []\r\n  phVals = []\r\n  plVals = []\r\n}\r\n\r\nbuyVolume = source(vbuy, quote=quote,type=type,exchange=exchange)\r\nsellVolume = source(vsell, quote=quote,type=type,exchange=exchange)\r\n\r\ncvd = cum(buyVolume - sellVolume)\r\n\r\nplotline(cvd, title=options.title || \"CVD\", color=options.cvdColor)\r\n\r\nif( options.toggleShowPricePivot ){\r\n  plotline(cvd, color=transparent)\r\n}\r\n\r\nif (options.showDivs) {\r\n  \r\n  // <markers utils>\r\n  if (markersDiv === 0) {\r\n    markersDiv = []\r\n  }\r\n  if (markersPivot === 0) {\r\n    markersPivot = []\r\n  }\r\n  \r\n  if (pendingMarkerDiv && pendingMarkerDiv.time < time) {\r\n    markersDiv.push(pendingMarkerDiv)\r\n    pendingMarkerDiv = null\r\n  }\r\n\r\n  if (pendingMarkerPivot && pendingMarkerPivot.time < time) {\r\n    markersPivot.push(pendingMarkerPivot)\r\n    pendingMarkerPivot = null\r\n  }\r\n  \r\n  var newMarkerDiv = null\r\n  var newMarkerPivot = null\r\n  // </markers utils>\r\n  \r\n  // Check if we get new Pivot High Or Pivot Low\r\n\r\n  // find pivots low (cvd and price)\r\n  plCvd = pivot_low(cvd, options.pivotLeftLength, options.pivotRightLength)\r\n  plPrice = pivot_low($price.low, options.pivotLeftLength, options.pivotRightLength)\r\n\r\n  // find pivots high (cvd and price)\r\n  phCvd = pivot_high(cvd, options.pivotLeftLength, options.pivotRightLength)\r\n  phPrice = pivot_high($price.high, options.pivotLeftLength, options.pivotRightLength)\r\n  \r\n  if( plPrice ){\r\n    plPositions.unshift(bar.length)\r\n    plVals.unshift(plPrice)\r\n    if( plPositions.length > pivotsMax ){\r\n      plPositions.pop();\r\n      plVals.pop()\r\n    }\r\n\r\n    var foundDiv = false\r\n    var startPoint = 0\r\n    cvd[100] // looks like required to load \r\n    for( var i = 0; i < (options.ppCheck || 10); i++ ){ \r\n      if( i > plPositions.length || plPositions[i] == 0){\r\n        break\r\n      }\r\n      var len = bar.length - plPositions[i] + options.pivotRightLength\r\n      if( len > (options.maxbars || 100)){\r\n        break\r\n      }\r\n      \r\n      // Price lower than previous pivot but CVD is higher\r\n      if( len > 5 && plPrice < (plVals[i] || 0) && cvd > cvd[len]){\r\n         console.log('PL', plPositions[i], len, cvd, cvd[len], $price.high, plVals[i])\r\n         foundDiv = true\r\n\r\n         newMarkerDiv = { \r\n          time: time - (options.pivotRightLength-1) * bar.timeframe,\r\n          color: options.DivcolorUp,\r\n          position: 'belowBar',\r\n          //shape: 'arrowDown',\r\n          text: '▲' + (options.togglePivotAgo ? i : '')\r\n        }\r\n        break\r\n      }\r\n    }\r\n\r\n    if( !foundDiv && options.toggleShowPricePivot){\r\n      newMarkerPivot = {\r\n          time: time - (options.pivotRightLength-1) * bar.timeframe,\r\n          color: options.DivcolorUp,\r\n          position: 'belowBar',\r\n          //shape: 'arrowUp',\r\n          text:  'L'\r\n        }\r\n    }\r\n  }\r\n\r\n  if( phPrice ){\r\n \r\n    phPositions.unshift(bar.length)\r\n    phVals.unshift(phPrice)\r\n    if( phPositions.length > pivotsMax ){\r\n      phPositions.pop();\r\n      phVals.pop()\r\n    }\r\n\r\n    var foundDiv = false\r\n    var startPoint = 0\r\n    cvd[100] // looks like required to load \r\n    for( var i = 0; i < (options.ppCheck || 10); i++ ){ \r\n      if( i > phPositions.length || phPositions[i] == 0){\r\n        break\r\n      }\r\n      var len = bar.length - phPositions[i] + options.pivotRightLength\r\n      if( len > (options.maxbars || 100)){\r\n        break\r\n      }\r\n\r\n      // Price greater than previous pivot but CVD lower\r\n      if( len > 5 && phPrice > (phVals[i] || Infinity) && cvd < cvd[len]){\r\n         console.log('PH', phPositions[i], len, cvd, cvd[len], $price.high, phVals[i])\r\n        foundDiv = true\r\n         newMarkerDiv = { \r\n          time: time - (options.pivotRightLength-1) * bar.timeframe,\r\n          color: options.DivcolorDn,\r\n          position: 'aboveBar',\r\n          //shape: 'arrowDown',\r\n          text: '▼' + (options.togglePivotAgo ? i : '')\r\n        }\r\n        break\r\n      }\r\n    }\r\n\r\n    if( !foundDiv  && options.toggleShowPricePivot ){\r\n        newMarkerPivot = { \r\n            time: time - (options.pivotRightLength-1) * bar.timeframe,\r\n            color: options.DivcolorDn,\r\n            position: 'aboveBar',\r\n            //shape: 'arrowDown',\r\n            text: 'H'\r\n          }\r\n    }\r\n  }\r\n  \r\n  // <markers utils>\r\n  if (newMarkerDiv || (pendingMarkerDiv && !newMarkerDiv)) {\r\n      pendingMarkerDiv = newMarkerDiv\r\n    \r\n    if (markersDiv.length > 100) {\r\n        markersDiv.splice(0, 1)\r\n    }\r\n      \r\n    if (series[0].setMarkers) {\r\n      series[0].setMarkers(markersDiv.concat(pendingMarkerDiv))\r\n    }\r\n  }\r\n\r\n  if (newMarkerPivot || (pendingMarkerPivot && !newMarkerPivot)) {\r\n      pendingMarkerPivot = newMarkerPivot\r\n    \r\n    if (markersPivot.length > 100) {\r\n        markersPivot.splice(0, 1)\r\n    }\r\n      \r\n    if (series[1].setMarkers) {\r\n      series[1].setMarkers(markersPivot.concat(pendingMarkerPivot))\r\n    }\r\n  }\r\n\r\n  // </markers utils>\r\n}",
          "createdAt": 1705023113627,
          "updatedAt": 1718761183925,
          "options": {
            "priceScaleId": "_ilwzivhp75r7wuat",
            "scaleMargins": {
              "top": 0.58,
              "bottom": 0.1
            },
            "bodyPercentWatch": null,
            "wickRatioThreshold": null,
            "toggleDebug": null,
            "toggleVolumeWick": null,
            "togglePrintNormalObv": null,
            "toggleRefine": null,
            "showDivs": false,
            "pivotLeftLength": 1,
            "pivotRightLength": 1,
            "ppCheck": 3,
            "maxbars": null,
            "togglePivotAgo": false,
            "toggleShowPricePivot": false,
            "DivcolorUp": "rgb(91,156,246)",
            "DivcolorDn": "rgb(149,117,205)",
            "cvdColor": "rgb(41,98,255)",
            "quote": 0,
            "exchange": null,
            "type": "perp",
            "title": "P",
            "visible": true,
            "lastValueVisible": true,
            "priceFormat": {
              "type": "volume",
              "precision": 2,
              "minMove": 0.01,
              "auto": true
            }
          },
          "optionsDefinitions": {
            "quote": {
              "default": 0,
              "type": "list",
              "options": [
                null,
                "USD",
                "USDT",
                "TUSD",
                "USDC"
              ],
              "rebuild": true
            },
            "exchange": {
              "default": 0,
              "type": "exchange",
              "rebuild": true
            },
            "type": {
              "default": "perp",
              "type": "list",
              "options": [
                null,
                "spot",
                "perp"
              ],
              "rebuild": true
            }
          },
          "series": [
            "cvd-divs-pivot",
            "sar5s3p1"
          ],
          "displayName": "CVD Perp",
          "unsavedChanges": false
        },
        "_v9ix9ggm0looumtf": {
          "id": "_v9ix9ggm0looumtf",
          "libraryId": "cvd-spot",
          "name": "CVD Spot",
          "script": "if (pivotsMax === 0) {\r\n  // Source\r\n  quote = option(default=null,type=list,options=[null, \"USD\", \"USDT\", \"TUSD\", \"USDC\"],rebuild=true)\r\n  exchange = option(default=null,type=exchange,rebuild=true)\r\n  type = option(default=perp,type=list,options=[null, \"spot\", \"perp\"],rebuild=true)\r\n  \r\n  // Pivots\r\n  pivotsMax = 20\r\n  phPositions = []\r\n  plPositions = []\r\n  phVals = []\r\n  plVals = []\r\n}\r\n\r\nbuyVolume = source(vbuy, quote=quote,type=type,exchange=exchange)\r\nsellVolume = source(vsell, quote=quote,type=type,exchange=exchange)\r\n\r\ncvd = cum(buyVolume - sellVolume)\r\n\r\nplotline(cvd, title=options.title || \"CVD\", color=options.cvdColor)\r\n\r\nif( options.toggleShowPricePivot ){\r\n  plotline(cvd, color=transparent)\r\n}\r\n\r\nif (options.showDivs) {\r\n  \r\n  // <markers utils>\r\n  if (markersDiv === 0) {\r\n    markersDiv = []\r\n  }\r\n  if (markersPivot === 0) {\r\n    markersPivot = []\r\n  }\r\n  \r\n  if (pendingMarkerDiv && pendingMarkerDiv.time < time) {\r\n    markersDiv.push(pendingMarkerDiv)\r\n    pendingMarkerDiv = null\r\n  }\r\n\r\n  if (pendingMarkerPivot && pendingMarkerPivot.time < time) {\r\n    markersPivot.push(pendingMarkerPivot)\r\n    pendingMarkerPivot = null\r\n  }\r\n  \r\n  var newMarkerDiv = null\r\n  var newMarkerPivot = null\r\n  // </markers utils>\r\n  \r\n  // Check if we get new Pivot High Or Pivot Low\r\n\r\n  // find pivots low (cvd and price)\r\n  plCvd = pivot_low(cvd, options.pivotLeftLength, options.pivotRightLength)\r\n  plPrice = pivot_low($price.low, options.pivotLeftLength, options.pivotRightLength)\r\n\r\n  // find pivots high (cvd and price)\r\n  phCvd = pivot_high(cvd, options.pivotLeftLength, options.pivotRightLength)\r\n  phPrice = pivot_high($price.high, options.pivotLeftLength, options.pivotRightLength)\r\n  \r\n  if( plPrice ){\r\n    plPositions.unshift(bar.length)\r\n    plVals.unshift(plPrice)\r\n    if( plPositions.length > pivotsMax ){\r\n      plPositions.pop();\r\n      plVals.pop()\r\n    }\r\n\r\n    var foundDiv = false\r\n    var startPoint = 0\r\n    cvd[100] // looks like required to load \r\n    for( var i = 0; i < (options.ppCheck || 10); i++ ){ \r\n      if( i > plPositions.length || plPositions[i] == 0){\r\n        break\r\n      }\r\n      var len = bar.length - plPositions[i] + options.pivotRightLength\r\n      if( len > (options.maxbars || 100)){\r\n        break\r\n      }\r\n      \r\n      // Price lower than previous pivot but CVD is higher\r\n      if( len > 5 && plPrice < (plVals[i] || 0) && cvd > cvd[len]){\r\n         console.log('PL', plPositions[i], len, cvd, cvd[len], $price.high, plVals[i])\r\n         foundDiv = true\r\n\r\n         newMarkerDiv = { \r\n          time: time - (options.pivotRightLength-1) * bar.timeframe,\r\n          color: options.DivcolorUp,\r\n          position: 'belowBar',\r\n          //shape: 'arrowDown',\r\n          text: '▲' + (options.togglePivotAgo ? i : '')\r\n        }\r\n        break\r\n      }\r\n    }\r\n\r\n    if( !foundDiv && options.toggleShowPricePivot){\r\n      newMarkerPivot = {\r\n          time: time - (options.pivotRightLength-1) * bar.timeframe,\r\n          color: options.DivcolorUp,\r\n          position: 'belowBar',\r\n          //shape: 'arrowUp',\r\n          text:  'L'\r\n        }\r\n    }\r\n  }\r\n\r\n  if( phPrice ){\r\n \r\n    phPositions.unshift(bar.length)\r\n    phVals.unshift(phPrice)\r\n    if( phPositions.length > pivotsMax ){\r\n      phPositions.pop();\r\n      phVals.pop()\r\n    }\r\n\r\n    var foundDiv = false\r\n    var startPoint = 0\r\n    cvd[100] // looks like required to load \r\n    for( var i = 0; i < (options.ppCheck || 10); i++ ){ \r\n      if( i > phPositions.length || phPositions[i] == 0){\r\n        break\r\n      }\r\n      var len = bar.length - phPositions[i] + options.pivotRightLength\r\n      if( len > (options.maxbars || 100)){\r\n        break\r\n      }\r\n\r\n      // Price greater than previous pivot but CVD lower\r\n      if( len > 5 && phPrice > (phVals[i] || Infinity) && cvd < cvd[len]){\r\n         console.log('PH', phPositions[i], len, cvd, cvd[len], $price.high, phVals[i])\r\n        foundDiv = true\r\n         newMarkerDiv = { \r\n          time: time - (options.pivotRightLength-1) * bar.timeframe,\r\n          color: options.DivcolorDn,\r\n          position: 'aboveBar',\r\n          //shape: 'arrowDown',\r\n          text: '▼' + (options.togglePivotAgo ? i : '')\r\n        }\r\n        break\r\n      }\r\n    }\r\n\r\n    if( !foundDiv  && options.toggleShowPricePivot ){\r\n        newMarkerPivot = { \r\n            time: time - (options.pivotRightLength-1) * bar.timeframe,\r\n            color: options.DivcolorDn,\r\n            position: 'aboveBar',\r\n            //shape: 'arrowDown',\r\n            text: 'H'\r\n          }\r\n    }\r\n  }\r\n  \r\n  // <markers utils>\r\n  if (newMarkerDiv || (pendingMarkerDiv && !newMarkerDiv)) {\r\n      pendingMarkerDiv = newMarkerDiv\r\n    \r\n    if (markersDiv.length > 100) {\r\n        markersDiv.splice(0, 1)\r\n    }\r\n      \r\n    if (series[0].setMarkers) {\r\n      series[0].setMarkers(markersDiv.concat(pendingMarkerDiv))\r\n    }\r\n  }\r\n\r\n  if (newMarkerPivot || (pendingMarkerPivot && !newMarkerPivot)) {\r\n      pendingMarkerPivot = newMarkerPivot\r\n    \r\n    if (markersPivot.length > 100) {\r\n        markersPivot.splice(0, 1)\r\n    }\r\n      \r\n    if (series[1].setMarkers) {\r\n      series[1].setMarkers(markersPivot.concat(pendingMarkerPivot))\r\n    }\r\n  }\r\n\r\n  // </markers utils>\r\n}",
          "createdAt": 1705024852358,
          "updatedAt": 1718761198154,
          "options": {
            "priceScaleId": "_v9ix9ggm0looumtf",
            "scaleMargins": {
              "top": 0.58,
              "bottom": 0.11
            },
            "bodyPercentWatch": null,
            "wickRatioThreshold": null,
            "toggleDebug": null,
            "toggleVolumeWick": null,
            "togglePrintNormalObv": null,
            "toggleRefine": null,
            "showDivs": false,
            "pivotLeftLength": 1,
            "pivotRightLength": 1,
            "ppCheck": 3,
            "maxbars": null,
            "togglePivotAgo": false,
            "toggleShowPricePivot": false,
            "DivcolorUp": "rgb(255,241,118)",
            "DivcolorDn": "rgb(255,183,77)",
            "cvdColor": "rgb(255,255,255)",
            "quote": 0,
            "exchange": null,
            "type": "spot",
            "title": "S",
            "visible": true,
            "lineStyle": 0
          },
          "optionsDefinitions": {
            "quote": {
              "default": 0,
              "type": "list",
              "options": [
                null,
                "USD",
                "USDT",
                "TUSD",
                "USDC"
              ],
              "rebuild": true
            },
            "exchange": {
              "default": 0,
              "type": "exchange",
              "rebuild": true
            },
            "type": {
              "default": "perp",
              "type": "list",
              "options": [
                null,
                "spot",
                "perp"
              ],
              "rebuild": true
            }
          },
          "series": [
            "cvd-spot",
            "5y8bmu2k"
          ],
          "displayName": "CVD Spot",
          "unsavedChanges": false
        },
        "_nijvmykvl4jj9jau": {
          "id": "_nijvmykvl4jj9jau",
          "libraryId": "oi copy 1",
          "name": "OI",
          "description": null,
          "script": "src = { sources: { \"ORDERBOOK:AGGROI-BTCUSD\":ORDERBOOK:AGGROI-BTCUSD }, localTimestamp: time }\r\n\r\nvar ohlc = options.useHeikinAshi ? avg_heikinashi(src) : options.useGaps ? avg_ohlc_with_gaps(src) : avg_ohlc(src)\r\n\r\nplotcandlestick(ohlc, id=openinterest)",
          "createdAt": 1705463203632,
          "updatedAt": 1717637825175,
          "options": {
            "priceScaleId": "_tdqicpndr092c1gk",
            "priceFormat": {
              "type": "volume",
              "precision": 2,
              "minMove": 0.01,
              "auto": true
            },
            "priceLineVisible": true,
            "lastValueVisible": true,
            "borderVisible": false,
            "upColor": "rgba(255,235,59,0.52)",
            "downColor": "rgba(242,54,69,0.64)",
            "borderUpColor": "rgba(255,245,157,0.66)",
            "borderDownColor": "rgba(178,40,51,0.52)",
            "wickUpColor": "rgb(223,211,144)",
            "wickDownColor": "rgba(239,67,82,0.47)",
            "useGaps": false,
            "useHeikinAshi": false,
            "scaleMargins": {
              "top": 0.23,
              "bottom": 0.67
            },
            "visible": true
          },
          "optionsDefinitions": {},
          "series": [
            "openinterest"
          ],
          "displayName": "OI"
        },
        "_tl62tgqlv8dj96za": {
          "id": "_tl62tgqlv8dj96za",
          "libraryId": "ny-open",
          "name": "NY open",
          "script": "// <STARTUP SCRIPT> \r\nif (!boundaries) {\r\n  // New York options\r\n  nyColor = options.nyColor\r\n  nyStart = option(default=8,type=range,min=0,max=12,step=1)\r\n  nyEnd = option(default=11,type=range,min=0,max=12,step=1)\r\n  \r\n  // London options\r\n  ukColor = options.ukColor\r\n  ukStart = option(default=8,type=range,min=0,max=12,step=1)\r\n  ukEnd = option(default=11,type=range,min=0,max=24,step=1)\r\n  \r\n  // Tokyo options\r\n  asiaColor = options.asiaColor\r\n  asiaStart = option(default=8,type=range,min=0,max=12,step=1)\r\n  asiaEnd = option(default=11,type=range,min=0,max=24,step=1)\r\n\r\n  boundaries = {}\r\n  if (series[0].setExtensionsBoundaries) {\r\n    series[0].setExtensionsBoundaries(boundaries)\r\n  }\r\n\r\n  // Timezone offsets (in minutes)\r\n  nyOffset = -5 * 60    // New York UTC-5\r\n  ukOffset = 0         // London UTC+0\r\n  asiaOffset = 9 * 60  // Tokyo UTC+9\r\n\r\n  const date = new Date();\r\n  const jan = new Date(date.getFullYear(), 0, 1);\r\n  const jul = new Date(date.getFullYear(), 6, 1);\r\n  const stdTimezoneOffset = Math.max(jan.getTimezoneOffset(), jul.getTimezoneOffset());\r\n  isDST = date.getTimezoneOffset() < stdTimezoneOffset;\r\n}\r\n// </STARTUP SCRIPT> \r\n\r\nvar gmtTime = new Date(renderer.timestamp*1000);\r\nvar dayOfWeek = gmtTime.getUTCDay();\r\n\r\n// Check if it's Saturday (6) or Sunday (0) \r\nvar isWeekEnd = dayOfWeek === 6 || dayOfWeek === 0;\r\n\r\nif (isWeekEnd) {\r\n  return\r\n}\r\n\r\n// Calculate local hours for each market\r\nconst dstAdjustment = isDST ? 60 : 0;\r\nconst nyHour = (gmtTime.getUTCHours() + ((nyOffset + dstAdjustment) / 60)) % 24;\r\nconst ukHour = gmtTime.getUTCHours(); // UK is in UTC, no offset needed\r\nconst asiaHour = (gmtTime.getUTCHours() + (asiaOffset / 60)) % 24;\r\n\r\n// Check if markets are in their opening hours\r\nvar isNYOpening = nyHour >= nyStart && nyHour < nyEnd;\r\nvar isUKOpening = ukHour >= ukStart && ukHour < ukEnd;\r\nvar isAsiaOpening = asiaHour >= asiaStart && asiaHour < asiaEnd;\r\n\r\n// Render indicators for each active session\r\nif (isNYOpening || isUKOpening || isAsiaOpening) {\r\n  renderer.indicators[indicatorId].series[0] = {\r\n    time: time,\r\n    lowerValue: 0,\r\n    higherValue: 200000,\r\n    extendRight: false,\r\n    color: isNYOpening ? nyColor :     \r\n           isUKOpening ? ukColor :     \r\n           asiaColor                   \r\n  }\r\n}\r\n\r\nreturn\r\n\r\nbrokenarea()",
          "createdAt": 1722985807107,
          "updatedAt": 1747010871183,
          "options": {
            "priceScaleId": "right",
            "strokeWidth": 1,
            "visible": true,
            "color": "rgba(76,112,175,0.07)",
            "lastValueVisible": false,
            "baseLineVisible": false,
            "priceLineVisible": false,
            "strokeColor": "rgba(26,104,201,0.37)",
            "nyStart": 8,
            "nyEnd": 11,
            "scaleMargins": {
              "top": 0.33,
              "bottom": 0.4
            },
            "ukStart": 8,
            "ukEnd": 11,
            "asiaStart": 9,
            "asiaEnd": 12,
            "nyColor": "rgba(41,98,255,0.09)",
            "ukColor": "rgba(247,124,128,0.09)",
            "asiaColor": "rgba(255,235,59,0.08)"
          },
          "optionsDefinitions": {
            "nyStart": {
              "default": 8,
              "type": "range",
              "min": 0,
              "max": 12,
              "step": 1
            },
            "nyEnd": {
              "default": 11,
              "type": "range",
              "min": 0,
              "max": 12,
              "step": 1
            },
            "ukStart": {
              "default": 8,
              "type": "range",
              "min": 0,
              "max": 12,
              "step": 1
            },
            "ukEnd": {
              "default": 11,
              "type": "range",
              "min": 0,
              "max": 24,
              "step": 1
            },
            "asiaStart": {
              "default": 8,
              "type": "range",
              "min": 0,
              "max": 12,
              "step": 1
            },
            "asiaEnd": {
              "default": 11,
              "type": "range",
              "min": 0,
              "max": 24,
              "step": 1
            }
          },
          "series": [
            "ny-open"
          ],
          "displayName": "NY open",
          "unsavedChanges": true
        },
        "_gguytyxryrnodkdu": {
          "id": "_gguytyxryrnodkdu",
          "libraryId": "spot-bands copy 1",
          "name": "Spot bands copy 1",
          "script": "if (!pendingMarkers) {\r\n    // runs only once\r\n    pendingMarkers = []\r\n\r\n    showType = {\r\n      spot: options.toggleSpot,\r\n      perp: options.togglePerp,\r\n      binance: options.toggleBinance,\r\n      coinbase: options.toggleCoinbase,\r\n      bitmex: options.toggleBitmex\r\n    }\r\n\r\n    toAdd = [\r\n        options.toggleBand1 || false,\r\n        options.toggleBand2 || false,\r\n        options.toggleBand3 || false,\r\n        options.toggleBand4 || false,\r\n    ]\r\n\r\n    highDiffSpot = options.highDiffSpot || 6500\r\n    highDiffPerp = options.highDiffPerp || 24000\r\n\r\n    highDiff = showType.spot ? highDiffSpot : highDiffPerp\r\n}\r\n// </STARTUP SCRIPT> \r\nvar bidsPerp = ORDERBOOK:AGGRPERP-BTCUSD.zbids\r\nvar asksPerp = ORDERBOOK:AGGRPERP-BTCUSD.zasks\r\nvar bidsSpot = ORDERBOOK:AGGRSPOT-BTCUSD.zbids \r\nvar asksSpot = ORDERBOOK:AGGRSPOT-BTCUSD.zasks \r\nvar bidsBinance = renderer.sources['ORDERBOOK:BINANCE-BTCUSDTLEVELS'] && renderer.sources['ORDERBOOK:BINANCE-BTCUSDTLEVELS'].zbids\r\nvar asksBinance = renderer.sources['ORDERBOOK:BINANCE-BTCUSDTLEVELS'] && renderer.sources['ORDERBOOK:BINANCE-BTCUSDTLEVELS'].zasks\r\nvar bidsCoinbase = renderer.sources['ORDERBOOK:COINBASE-BTCUSD'] && renderer.sources['ORDERBOOK:COINBASE-BTCUSD'].zbids\r\nvar asksCoinbase = renderer.sources['ORDERBOOK:COINBASE-BTCUSD'] && renderer.sources['ORDERBOOK:COINBASE-BTCUSD'].zasks\r\nvar bidsBitmex = renderer.sources['ORDERBOOK:BITMEX-XBTUSDLEVELS'] && renderer.sources['ORDERBOOK:BITMEX-XBTUSDLEVELS'].zbids\r\nvar asksBitmex = renderer.sources['ORDERBOOK:BITMEX-XBTUSDLEVELS'] && renderer.sources['ORDERBOOK:BITMEX-XBTUSDLEVELS'].zasks\r\n\r\nvar m = [\r\n    { which: 'perp', bids: bidsPerp || [], asks: asksPerp || [] },\r\n    { which: 'spot', bids: bidsSpot || [], asks: asksSpot || [] },\r\n    { which: 'binance', bids: bidsBinance || [], asks: asksBinance || [] },\r\n    { which: 'coinbase', bids: bidsCoinbase || [], asks: asksCoinbase || [] },\r\n    { which: 'bitmex', bids: bidsBitmex || [], asks: asksBitmex || [] }\r\n];\r\n\r\nvar _bids = 0\r\nvar _asks = 0\r\n\r\nfor(let typeIndex = 0; typeIndex < m.length; typeIndex++){\r\n\r\n    var c = m[typeIndex]\r\n\r\n    if( showType[c.which]  === false ){\r\n      continue\r\n    }\r\n\r\n    for(let i = 0; i < 4; i++){\r\n        if( toAdd[i] === true ){\r\n            _bids += c.bids[i] || 0\r\n            _asks += c.asks[i] || 0\r\n        }\r\n    }\r\n}\r\n\r\nplotcloudarea( _asks, _bids, positiveColor=options.positiveColor,  negativeColor=options.negativeColor,  higherLineColor=options.positiveLineColor, lowerLineColor=options.negativeLineColor)\r\n\r\nif ( Math.abs(_bids - _asks) > highDiff) {\r\n    brokenarea({\r\n      time: time, \r\n      lowerValue: _asks,\r\n      higherValue: _bids,\r\n      extendRight: false,\r\n      color: (_bids - _asks ? options.positiveColor : options.negativeColor)\r\n    })\r\n}",
          "createdAt": 1700698276480,
          "updatedAt": 1730864933067,
          "options": {
            "priceScaleId": "bids-asks-total",
            "scaleMargins": {
              "top": 0.61,
              "bottom": 0.3
            },
            "ratio0Toggle": null,
            "ratio1Toggle": null,
            "ratio2Toggle": null,
            "ratio3Toggle": null,
            "togglePerp": false,
            "toggleRatio0": true,
            "toggleRatio1": true,
            "toggleRatio2": true,
            "toggleRatio3": true,
            "negativeLineColor": "rgba(255,82,82,0.8)",
            "positiveLineColor": "rgba(41,175,47,0.97)",
            "visible": false,
            "toggleSpot": false,
            "toggleBinance": true,
            "toggleCoinbase": true,
            "toggleBitmex": false,
            "toggleBand1": true,
            "toggleBand2": true,
            "toggleBand3": true,
            "toggleBand4": true,
            "lastValueVisible": true,
            "priceFormat": {
              "type": "volume",
              "precision": 2,
              "minMove": 0.01,
              "auto": true
            },
            "highDiff": null,
            "highDiffSpot": 200,
            "highDiffPerp": 200,
            "positiveColor": "rgba(76,175,80,0.74)",
            "color": "rgba(178,181,190,0.57)",
            "toggleDelta": false,
            "negativeColor": "rgba(255,82,82,0.72)",
            "toggleLines": true,
            "toggleRatios": true,
            "topFillColor1": "rgba(38,166,154,0)",
            "topFillColor2": "rgba(149,152,161,0)",
            "bottomFillColor1": "rgba(239,83,80,0)",
            "bottomFillColor2": "rgba(239,83,80,0)",
            "topLineColor": "rgb(178,181,190)"
          },
          "optionsDefinitions": {},
          "series": [
            "spot-bands copy 1",
            "01iwh2c4"
          ],
          "displayName": "Spot bands copy 1",
          "unsavedChanges": false
        },
        "_hhh6qpt1w0qal8o3": {
          "id": "_hhh6qpt1w0qal8o3",
          "libraryId": "_gguytyxryrnodkdu",
          "name": "Spot band",
          "script": "if (!pendingMarkers) {\r\n    // runs only once\r\n    pendingMarkers = []\r\n\r\n    showType = {\r\n      spot: options.toggleSpot,\r\n      perp: options.togglePerp,\r\n      binance: options.toggleBinance,\r\n      coinbase: options.toggleCoinbase,\r\n      bitmex: options.toggleBitmex\r\n    }\r\n\r\n    toAdd = [\r\n        options.toggleBand1 || false,\r\n        options.toggleBand2 || false,\r\n        options.toggleBand3 || false,\r\n        options.toggleBand4 || false,\r\n    ]\r\n\r\n    highDiffSpot = options.highDiffSpot || 6500\r\n    highDiffPerp = options.highDiffPerp || 24000\r\n\r\n    highDiff = showType.spot ? highDiffSpot : highDiffPerp\r\n}\r\n// </STARTUP SCRIPT> \r\nvar bidsPerp = ORDERBOOK:AGGRPERP-BTCUSD.zbids\r\nvar asksPerp = ORDERBOOK:AGGRPERP-BTCUSD.zasks\r\nvar bidsSpot = ORDERBOOK:AGGRSPOT-BTCUSD.zbids \r\nvar asksSpot = ORDERBOOK:AGGRSPOT-BTCUSD.zasks \r\nvar bidsBinance = renderer.sources['ORDERBOOK:BINANCE-BTCUSDT'] && renderer.sources['ORDERBOOK:BINANCE-BTCUSDT'].zbids\r\nvar asksBinance = renderer.sources['ORDERBOOK:BINANCE-BTCUSDT'] && renderer.sources['ORDERBOOK:BINANCE-BTCUSDT'].zasks\r\nvar bidsCoinbase = renderer.sources['ORDERBOOK:COINBASE-BTCUSD'] && renderer.sources['ORDERBOOK:COINBASE-BTCUSD'].zbids\r\nvar asksCoinbase = renderer.sources['ORDERBOOK:COINBASE-BTCUSD'] && renderer.sources['ORDERBOOK:COINBASE-BTCUSD'].zasks\r\nvar bidsBitmex = renderer.sources['ORDERBOOK:BITMEX-XBTUSD'] && renderer.sources['ORDERBOOK:BITMEX-XBTUSD'].zbids\r\nvar asksBitmex = renderer.sources['ORDERBOOK:BITMEX-XBTUSD'] && renderer.sources['ORDERBOOK:BITMEX-XBTUSD'].zasks\r\n\r\nvar m = [\r\n    { which: 'perp', bids: bidsPerp || [], asks: asksPerp || [] },\r\n    { which: 'spot', bids: bidsSpot || [], asks: asksSpot || [] },\r\n    { which: 'binance', bids: bidsBinance || [], asks: asksBinance || [] },\r\n    { which: 'coinbase', bids: bidsCoinbase || [], asks: asksCoinbase || [] },\r\n    { which: 'bitmex', bids: bidsBitmex || [], asks: asksBitmex || [] }\r\n];\r\n\r\nvar _bids = 0\r\nvar _asks = 0\r\n\r\nfor(let typeIndex = 0; typeIndex < m.length; typeIndex++){\r\n\r\n    var c = m[typeIndex]\r\n\r\n    if( showType[c.which]  === false ){\r\n      continue\r\n    }\r\n\r\n    for(let i = 0; i < 4; i++){\r\n        if( toAdd[i] === true ){\r\n            _bids += c.bids[i] || 0\r\n            _asks += c.asks[i] || 0\r\n        }\r\n    }\r\n}\r\n\r\nplotcloudarea( _asks, _bids, positiveColor=options.positiveColor,  negativeColor=options.negativeColor,  higherLineColor=options.positiveLineColor, lowerLineColor=options.negativeLineColor)\r\n\r\nif ( Math.abs(_bids - _asks) > highDiff) {\r\n    brokenarea({\r\n      time: time, \r\n      lowerValue: _asks,\r\n      higherValue: _bids,\r\n      extendRight: false,\r\n      color: (_bids - _asks ? options.positiveColor : options.negativeColor)\r\n    })\r\n}",
          "createdAt": 1730865066204,
          "updatedAt": 1730930986925,
          "options": {
            "priceScaleId": "bids-asks-total",
            "scaleMargins": {
              "top": 0.58,
              "bottom": 0.29
            },
            "ratio0Toggle": null,
            "ratio1Toggle": null,
            "ratio2Toggle": null,
            "ratio3Toggle": null,
            "togglePerp": false,
            "toggleRatio0": true,
            "toggleRatio1": true,
            "toggleRatio2": true,
            "toggleRatio3": true,
            "negativeLineColor": "rgba(255,82,82,0.42)",
            "positiveLineColor": "rgba(76,175,80,0.56)",
            "visible": true,
            "toggleSpot": true,
            "toggleBinance": false,
            "toggleCoinbase": false,
            "toggleBitmex": false,
            "toggleBand1": true,
            "toggleBand2": true,
            "toggleBand3": true,
            "toggleBand4": true,
            "lastValueVisible": false,
            "priceFormat": {
              "type": "volume",
              "precision": 2,
              "minMove": 0.01,
              "auto": true
            },
            "highDiff": null,
            "highDiffSpot": 3000,
            "highDiffPerp": 3000,
            "positiveColor": "rgba(76,175,80,0.1)",
            "color": "rgba(178,181,190,0.57)",
            "toggleDelta": true,
            "negativeColor": "rgba(255,82,82,0.1)"
          },
          "optionsDefinitions": {},
          "series": [
            "_gguytyxryrnodkdu",
            "zkvwxrqc"
          ],
          "displayName": "Spot band",
          "unsavedChanges": true
        },
        "_s5m8wbbdhz2oi1cs": {
          "id": "_s5m8wbbdhz2oi1cs",
          "libraryId": "ls",
          "name": "LS",
          "script": "line(ORDERBOOK:AGGRLS-BTCUSD.open)\r\noptions.toggleShowLegend",
          "createdAt": 1738868421785,
          "updatedAt": 1739581926941,
          "options": {
            "priceScaleId": "_s5m8wbbdhz2oi1cs",
            "scaleMargins": {
              "top": 0.62,
              "bottom": 0.08
            },
            "priceFormat": {
              "type": "volume",
              "precision": 2,
              "minMove": 0.01,
              "auto": true
            },
            "lastValueVisible": true,
            "visible": true,
            "priceLineVisible": false,
            "lineStyle": 4,
            "lineType": 1,
            "baseLineVisible": false,
            "toggleShowLegend": true
          },
          "optionsDefinitions": {},
          "series": [
            "ls"
          ],
          "displayName": "LS",
          "unsavedChanges": true
        }
      },
      "indicatorOrder": [
        "overlays-aggr",
        "volume",
        "cvd-coinbase",
        "cvd-binance-spot",
        "cvd-binance-perps",
        "liquidations",
        "perpvscoinbase",
        "top-bands-spots",
        "spotvsperp",
        "price-coinbase",
        "volume-strength",
        "mondays",
        "top-levels-perps",
        "extra-copy-1",
        "_ilwzivhp75r7wuat",
        "_v9ix9ggm0looumtf",
        "spot-bands copy 1",
        "_nijvmykvl4jj9jau",
        "_tl62tgqlv8dj96za",
        "_gguytyxryrnodkdu",
        "_hhh6qpt1w0qal8o3",
        "perps-bands copy 1",
        "_s5m8wbbdhz2oi1cs"
      ],
      "priceScales": {
        "right": {
          "scaleMargins": {
            "top": 0.33,
            "bottom": 0.4
          },
          "priceFormat": {
            "precision": 1,
            "minMove": 0.1
          },
          "indicators": [
            "Price Coinbase"
          ]
        },
        "cvd": {
          "scaleMargins": {
            "top": 0.84,
            "bottom": 0
          }
        },
        "volume_liquidations": {
          "scaleMargins": {
            "top": 0,
            "bottom": 0.95
          },
          "indicators": [
            "Liquidations"
          ]
        },
        "volume": {
          "scaleMargins": {
            "top": 0.94,
            "bottom": 0
          },
          "indicators": [
            "Volume"
          ]
        },
        "bids-asks-total": {
          "scaleMargins": {
            "top": 0.58,
            "bottom": 0.29
          },
          "indicators": [
            "Spot band"
          ],
          "priceFormat": {
            "type": "volume",
            "precision": 2,
            "minMove": 0.01,
            "auto": true
          }
        },
        "bids-asks-perp": {
          "scaleMargins": {
            "top": 0.71,
            "bottom": 0.16
          },
          "indicators": [
            "Perps bands"
          ]
        },
        "cvd-btc-spot-cb": {
          "scaleMargins": {
            "top": 0.04,
            "bottom": 0.8
          },
          "indicators": [
            "CVD Coinbase"
          ]
        },
        "cvd-binance-spot": {
          "scaleMargins": {
            "top": 0.33,
            "bottom": 0.48
          },
          "indicators": [
            "CVD Binance Spot "
          ]
        },
        "cvd-binance-perp-futures": {
          "scaleMargins": {
            "top": 0.33,
            "bottom": 0.48
          },
          "indicators": [
            "CVD Binance Perps"
          ]
        },
        "perpvscoinbase": {
          "scaleMargins": {
            "top": 0.84,
            "bottom": 0.08
          },
          "indicators": [
            "perpvscoinbase"
          ]
        },
        "perps-premiuum-simple": {
          "scaleMargins": {
            "top": 0.86,
            "bottom": 0.04
          },
          "indicators": [
            "perps premiuum simple"
          ]
        },
        "bands-delta copy 1": {
          "scaleMargins": {
            "top": 0.52,
            "bottom": 0.33
          },
          "indicators": [
            "Bands Delta"
          ]
        },
        "bands-delta copy 2": {
          "scaleMargins": {
            "top": 0,
            "bottom": 0
          },
          "indicators": [
            "Bands Delta"
          ]
        },
        "spotvsperp": {
          "scaleMargins": {
            "top": 0.92,
            "bottom": 0
          },
          "indicators": [
            "SpotVSPerp"
          ]
        },
        "left": {
          "scaleMargins": {
            "top": 0.04,
            "bottom": 0.63
          }
        },
        "ob-speed": {
          "scaleMargins": {
            "top": 0.8,
            "bottom": 0.16
          },
          "indicators": [
            "OB speed"
          ]
        },
        "cvdperp": {
          "scaleMargins": {
            "top": 0,
            "bottom": 0.8
          },
          "indicators": [
            "CVD (BTC PERP)"
          ]
        },
        "cvdspot": {
          "scaleMargins": {
            "top": 0,
            "bottom": 0.8
          },
          "indicators": [
            "CVD (BTC SPOT)"
          ]
        },
        "cvd-div": {
          "scaleMargins": {
            "top": 0,
            "bottom": 0.78
          },
          "indicators": [
            "CVD Div"
          ],
          "priceFormat": {
            "type": "volume",
            "precision": 2,
            "minMove": 0.01,
            "auto": true
          }
        },
        "cvd-d-spot": {
          "scaleMargins": {
            "top": 0,
            "bottom": 0.78
          }
        },
        "_ai7aitvrmca5si9b": {
          "scaleMargins": {
            "top": 0.04,
            "bottom": 0.69
          }
        },
        "_ilwzivhp75r7wuat": {
          "scaleMargins": {
            "top": 0,
            "bottom": 0.77
          },
          "indicators": [
            "CVD Perp"
          ]
        },
        "_v9ix9ggm0looumtf": {
          "scaleMargins": {
            "top": 0,
            "bottom": 0.8
          },
          "indicators": [
            "CVD Spot"
          ]
        },
        "cvd-coinbase": {
          "scaleMargins": {
            "top": 0.04,
            "bottom": 0.8
          }
        },
        "_tdqicpndr092c1gk": {
          "scaleMargins": {
            "top": 0.23,
            "bottom": 0.67
          },
          "indicators": [
            "OI"
          ]
        },
        "_s5m8wbbdhz2oi1cs": {
          "scaleMargins": {
            "top": 0.62,
            "bottom": 0.08
          },
          "priceFormat": {
            "type": "volume",
            "precision": 2,
            "minMove": 0.01,
            "auto": true
          },
          "indicators": [
            "LS"
          ]
        }
      },
      "layouting": false,
      "showIndicators": true,
      "timeframe": "900",
      "refreshRate": 4000,
      "showAlerts": true,
      "showAlertsLabel": true,
      "showLegend": true,
      "fillGapsWithEmpty": false,
      "showHorizontalGridlines": false,
      "horizontalGridlinesColor": "rgba(255,255,255,.1)",
      "showVerticalGridlines": false,
      "verticalGridlinesColor": "rgba(255,255,255,.1)",
      "showWatermark": false,
      "watermarkColor": "rgba(255,255,255,.1)",
      "showBorder": true,
      "borderColor": "rgba(255,255,255,0.17)",
      "textColor": null,
      "showLeftScale": false,
      "showRightScale": true,
      "showTimeScale": true,
      "hiddenMarkets": {},
      "barSpacing": 2.5902649474552524,
      "_id": "chart copy 1",
      "navigationState": {
        "tab": "script",
        "optionsQuery": "",
        "fontSizePx": 12
      }
    },
    "website": {
      "url": "https://s.tradingview.com/widgetembed/?frameElementId=tradingview_e23df&symbol=OANDA%3ASPX500USD&interval=60&symboledit=1&saveimage=1&toolbarbg=f1f3f6&studies=%5B%5D&theme=Light&style=1&timezone=NZT&studies_overrides=%7B%7D&overrides=%7B%7D&enabled_features=%5B%5D&disabled_features=%5B%5D&locale=en&utm_source=www.victorglobaltrading.com&utm_medium=widget_new&utm_campaign=chart&utm_term=OANDA%3ASPX500USD",
      "reloadTimer": 0,
      "interactive": true,
      "invert": false,
      "locked": false,
      "_id": "website"
    },
    "chart copy 4": {
      "indicatorsErrors": {},
      "indicators": {
        "cvd": {
          "enabled": true,
          "name": "CVD",
          "description": "Cumulative Volume Delta",
          "script": "plotline(cum(vbuy - vsell))",
          "options": {
            "priceScaleId": "cvd",
            "priceFormat": {
              "type": "volume"
            },
            "color": "rgba(209,212,220,0.81)",
            "scaleMargins": {
              "top": 0.64,
              "bottom": 0
            },
            "visible": false,
            "lineWidth": 1,
            "priceLineStyle": 1,
            "lineStyle": 1
          },
          "id": "cvd",
          "createdAt": 1700269685372,
          "updatedAt": 1700776986089,
          "series": [
            "cvd"
          ],
          "unsavedChanges": false,
          "preview": {},
          "optionsDefinitions": {}
        },
        "liquidations": {
          "enabled": true,
          "name": "Liquidations",
          "description": "Liquidations by side",
          "script": "plothistogram(lbuy, color=options.upColor)\nplothistogram(-lsell, color=options.downColor)",
          "options": {
            "priceFormat": {
              "type": "volume"
            },
            "priceScaleId": "volume_liquidations",
            "upColor": "rgb(255,76,243)",
            "downColor": "rgb(255,183,77)",
            "scaleMargins": {
              "top": 0,
              "bottom": 0.85
            },
            "visible": true
          },
          "id": "liquidations",
          "createdAt": 1700269685372,
          "updatedAt": 1700815523685,
          "series": [
            "liquidations",
            "tf6u7i4z"
          ],
          "preview": {},
          "unsavedChanges": false,
          "optionsDefinitions": {}
        },
        "price": {
          "enabled": true,
          "name": "Price",
          "script": "src = { sources: { \"BINANCE:btcusdt\":BINANCE:btcusdt }, localTimestamp: time }\r\n\r\nvar ohlc = options.useHeikinAshi ? avg_heikinashi(src) : options.useGaps ? avg_ohlc_with_gaps(src) : avg_ohlc(src)\r\n\r\nplotcandlestick(ohlc, id=price)",
          "options": {
            "priceScaleId": "right",
            "priceFormat": {
              "auto": true,
              "precision": 1,
              "minMove": 0.1
            },
            "priceLineVisible": true,
            "lastValueVisible": true,
            "borderVisible": true,
            "upColor": "rgb(59,202,109)",
            "downColor": "rgb(214,40,40)",
            "borderUpColor": "rgb(59,202,109)",
            "borderDownColor": "rgb(239,67,82)",
            "wickUpColor": "rgb(223,211,144)",
            "wickDownColor": "rgb(239,67,82)",
            "useGaps": false,
            "useHeikinAshi": false,
            "scaleMargins": {
              "top": 0.16,
              "bottom": 0.3
            },
            "visible": true
          },
          "id": "price",
          "createdAt": 1700269685372,
          "updatedAt": 1727910252387,
          "series": [
            "price"
          ],
          "unsavedChanges": true,
          "preview": {},
          "optionsDefinitions": {},
          "libraryId": "price"
        },
        "volume": {
          "enabled": true,
          "name": "Volume",
          "description": "Volume + delta",
          "script": "if (upColor === 0) {\n  if (options.showDelta) {\n    upColor = options.upBgColor\n    downColor = options.downBgColor\n  } else {\n    upColor = options.upColor\n    downColor = options.downColor\n  }\n}\n\nvar _vbuy = source(vbuy, type=perp)\nvar _vsell = source(vsell, type=perp)\n\nif (options.showDelta) {\n  plothistogram({ time: time, value: Math.abs(_vbuy-_vsell), color: _vbuy - _vsell > 0 ? options.upColor : options.downColor})\n}\n\nif (options.showVolume) {\n  plothistogram({ time: time, value: _vbuy + _vsell, color: _vbuy > _vsell ? upColor : downColor })\n}",
          "options": {
            "priceScaleId": "volume",
            "priceFormat": {
              "type": "volume"
            },
            "upColor": "rgb(76,175,80)",
            "downColor": "rgb(242,54,69)",
            "scaleMargins": {
              "top": 0.89,
              "bottom": 0
            },
            "showDelta": false,
            "upBgColor": "rgba(178,181,190,0.33)",
            "downBgColor": "rgba(93,96,107,0.38)",
            "visible": false,
            "lastValueVisible": true,
            "color": "rgba(195,168,122,0.54)",
            "showDeltaOnly": true,
            "showBoth": true,
            "showVolume": true,
            "showAvg": true,
            "showSum": true,
            "sumPeriods": 60,
            "avgPeriods": null
          },
          "id": "volume",
          "createdAt": 1700269685372,
          "updatedAt": 1724105862423,
          "series": [
            "volume",
            "rlz660ds"
          ],
          "unsavedChanges": false,
          "preview": {},
          "optionsDefinitions": {},
          "libraryId": "volume"
        },
        "keltner": {
          "script": "close = BINANCE_FUTURES:btcusdt.close\n\nrange = BINANCE_FUTURES:btcusdt.high - BINANCE_FUTURES:btcusdt.low\naverageRange = sma(range, options.length)\n\nbasis = ema(close, options.length)\ndev = options.mult * averageRange\nupper = basis + dev\nlower = basis - dev\n\nplotline(basis, color=options.basisColor)\nplotcloudarea(lower, upper)",
          "id": "keltner",
          "name": "keltner",
          "options": {
            "priceScaleId": "right",
            "length": 55,
            "mult": 4,
            "positiveColor": "rgba(35,37,35,0.1)",
            "negativeColor": "rgba(192,174,174,0.1)",
            "higherLineColor": "rgba(137,141,138,0.25)",
            "lowerLineColor": "rgba(223,210,210,0.16)",
            "basisColor": "rgba(228,224,218,0.34)",
            "scaleMargins": {
              "top": 0.16,
              "bottom": 0.3
            },
            "lineWidth": 2,
            "lineStyle": 4,
            "higherLineWidth": 2,
            "lowerLineWidth": 2
          },
          "description": null,
          "createdAt": 1666924136794,
          "updatedAt": 1738750079604,
          "unsavedChanges": false,
          "series": [
            "keltner",
            "b3ympos1"
          ],
          "displayName": "keltner",
          "preview": {},
          "optionsDefinitions": {},
          "libraryId": "keltner"
        },
        "relative-volume": {
          "script": "volume = vbuy + vsell\nvolumeAvg = ema(volume, options.volumeAvgPeriod)\nhighVolume = volume > volumeAvg*options.volumeAvgMult\nnotHighVolume = volume < volumeAvg*options.volumeAvgMult\n\nplothistogram({ time: time, value: volume, color: notHighVolume? options.neutralColor : vbuy > vsell ? options.upColor : options.downColor})",
          "id": "relative-volume",
          "name": "Relative Volume",
          "options": {
            "priceScaleId": "volume",
            "priceFormat": {
              "type": "volume"
            },
            "upColor": "rgba(59,202,109,0.62)",
            "downColor": "rgba(235,30,47,0.57)",
            "visible": false,
            "neutralColor": "rgba(135,135,135,0.6)",
            "volumeAvgPeriod": 20,
            "volumeAvgMult": 1.5,
            "scaleMargins": {
              "top": 0.89,
              "bottom": 0
            }
          },
          "description": null,
          "createdAt": 1656411382050,
          "updatedAt": 1701126177682,
          "unsavedChanges": false,
          "series": [
            "relative-volume"
          ],
          "displayName": "Relative Volume",
          "preview": {},
          "optionsDefinitions": {}
        },
        "obv-spots": {
          "script": "if (markers === 0) {\r\n  // first script execution (0 is default values for all persistent variables)\r\n  // Source\r\n  quote = option(default=null,type=list,options=[null, \"USD\", \"USDT\", \"TUSD\", \"USDC\"],rebuild=true)\r\n  exchange = option(default=null,type=exchange,rebuild=true)\r\n  type = option(default=perp,type=list,options=[null, \"spot\", \"perp\"],rebuild=true)\r\n  \r\n  // create a var to store already drawn markers\r\n  markers = []\r\n\r\n  // contain the last marker that can change as the bar update\r\n  repaintableMarker = null\r\n\r\n  // if candle body has a price percent change less than bodyPercentWatch, we start a refinement\r\n  bodyPercentWatch = options.bodyPercentWatch || 0.3\r\n\r\n  // if a wick is x times greater than the other, we might use it to refine change the side\r\n  wickRatioThreshold = options.wickRatioThreshold || 1.5\r\n\r\n  // paint a marker when OBV has been refined (changed of direction)\r\n  toggleDebug = options.toggleDebug || false\r\n\r\n  // when on, we calculate the wick percent difference and keep only that volume to add to OBV \r\n  toggleVolumeWick = options.toggleVolumeWick || false\r\n\r\n  togglePrintNormalObv = options.togglePrintNormalObv || false\r\n\r\n\r\n  // Pivots\r\n  pivotsMax = 20\r\n  phPositions = []\r\n  plPositions = []\r\n  phVals = []\r\n  plVals = []\r\n  plInd  = []\r\n  phInd  = []\r\n}\r\nif ( options.toggleDebug && repaintableMarker && repaintableMarker.time < time) {\r\n  // bar is +1 since active marker was added, lock it in the array\r\n  markers.push(repaintableMarker)\r\n\r\n  // free up active marker\r\n  repaintableMarker = null\r\n}\r\n\r\nvar newMarker = null\r\n\r\nvar _vbuy = source(vbuy, quote=quote,type=type,exchange=exchange)\r\nvar _vsell = source(vsell, quote=quote,type=type,exchange=exchange)\r\nvar _open = $price.open\r\nvar _high = $price.high\r\nvar _low = $price.low\r\nvar _close = $price.close\r\n\r\nvar sign = _close > _open ? 1 : -1\r\nvar volume = _vbuy + _vsell\r\n\r\nvar bodySize = Math.abs(_close - _open);\r\nvar priceChange = (_close - _open) / _open; // Percentage change\r\n\r\nif( togglePrintNormalObv ){\r\n    plotline(cum(sign * volume), title=\"Original\", color=options.originalObvColor)\r\n}\r\n\r\nvar improved = false\r\n\r\n// Check if price change is less than 0.4%\r\nif (options.toggleRefine && Math.abs(priceChange) < bodyPercentWatch/100 ) {\r\n    var upperWickSize = _high - _close;\r\n    var lowerWickSize = _close - _low;\r\n\r\n    // Calculate the thresholds\r\n    var upperWickThreshold = wickRatioThreshold * lowerWickSize;\r\n    var lowerWickThreshold = wickRatioThreshold * upperWickSize;\r\n\r\n    // Check if upper and lower wicks have similar sizes\r\n    if (upperWickSize < upperWickThreshold && lowerWickSize < lowerWickThreshold) {\r\n        // Neutral move, don't add volume\r\n        sign = 0\r\n        improved = true\r\n    }else{\r\n        // Calculate the thresholds\r\n        var upperWickThreshold = wickRatioThreshold * lowerWickSize;\r\n        var lowerWickThreshold = wickRatioThreshold * upperWickSize;\r\n\r\n        // Determine the side based on wick sizes\r\n        // upper: 500, lower 100\r\n        if (upperWickSize > upperWickThreshold) {\r\n            improved = sign !== -1\r\n            // More selling happened, add volume as negative\r\n            sign = -1\r\n            if( toggleVolumeWick ) {\r\n                improved = true\r\n                var percentageDifference = ((upperWickSize - lowerWickSize) / upperWickSize);\r\n                volume = percentageDifference * volume\r\n                \r\n            }\r\n        } else if (lowerWickSize > lowerWickThreshold) {\r\n            improved = sign !== 1\r\n            // More buying happened, add volume as positive\r\n            sign = 1\r\n            if( toggleVolumeWick ) {\r\n                improved = true\r\n                var percentageDifference = ((lowerWickSize - upperWickSize) / lowerWickSize);\r\n                volume = percentageDifference * volume\r\n            }\r\n        }\r\n    }\r\n\r\n    if( improved && toggleDebug){\r\n        if (sign == -1) {\r\n            // newMarker is a temporary variable (not included in the indicator state)\r\n            // to avoid it being treated as persistent variable we wrap it inside parenthesis\r\n            (newMarker) = {\r\n                time: time,\r\n                position: 'aboveBar',\r\n                color: 'red',\r\n                shape: 'arrowDown'\r\n            }\r\n        }\r\n\r\n        if (sign == 1) {\r\n            (newMarker) = {\r\n                time: time,\r\n                position: 'belowBar',\r\n                color: 'lime',\r\n                shape: 'arrowUp'\r\n            }\r\n        } \r\n    }\r\n}\r\n\r\n\r\nif ( options.toggleDebug && (newMarker || (repaintableMarker && !newMarker))) {\r\n  // override persistent variable repaintable marker\r\n  repaintableMarker = newMarker\r\n  \r\n  if (series[0].setMarkers) {\r\n    series[0].setMarkers(markers.concat(repaintableMarker))\r\n    series[1].setMarkers(markers.concat(repaintableMarker))\r\n  }\r\n}\r\n\r\nobv(200) = 0 + cum(sign * volume)\r\nplotline(obv, title=options.title, color=options.refinedObvColor)\r\nif( options.toggleShowPricePivot ){\r\n  plotline(obv, color=transparent)\r\n}\r\n\r\n\r\nif (options.showDivs) {\r\n  \r\n  // <markers utils>\r\n  if (markersDiv === 0) {\r\n    markersDiv = []\r\n  }\r\n  if (markersPivot === 0) {\r\n    markersPivot = []\r\n  }\r\n  \r\n  if (pendingMarkerDiv && pendingMarkerDiv.time < time) {\r\n    markersDiv.push(pendingMarkerDiv)\r\n    pendingMarkerDiv = null\r\n  }\r\n\r\n  if (pendingMarkerPivot && pendingMarkerPivot.time < time) {\r\n    markersPivot.push(pendingMarkerPivot)\r\n    pendingMarkerPivot = null\r\n  }\r\n  \r\n  var newMarkerDiv = null\r\n  var newMarkerPivot = null\r\n  // </markers utils>\r\n  \r\n  // Check if we get new Pivot High Or Pivot Low\r\n\r\n  // find pivots low (cvd and price)\r\n  //plCvd = pivot_low(obv, options.pivotLeftLength, options.pivotRightLength)\r\n  var plPrice = pivot_low($price.low, options.pivotLeftLength, options.pivotRightLength)\r\n\r\n  // find pivots high (cvd and price)\r\n  //phCvd = pivot_high(obv, options.pivotLeftLength, options.pivotRightLength)\r\n  var phPrice = pivot_high($price.high, options.pivotLeftLength, options.pivotRightLength)\r\n  \r\n  if( plPrice ){\r\n    var plObv = obv[options.pivotRightLength - 1]\r\n    plPositions.unshift(bar.length)\r\n    plVals.unshift(plPrice)\r\n    plInd.unshift(plObv)\r\n   \r\n    if( plPositions.length > pivotsMax ){\r\n      plPositions.pop();\r\n      plVals.pop()\r\n      plInd.pop()\r\n    }\r\n\r\n    var foundDiv = false\r\n  \r\n    for( var i = 0; i < (options.ppCheck || 10); i++ ){ \r\n      if( i > plPositions.length || plPositions[i] == 0){\r\n        break\r\n      }\r\n      \r\n      var regular = plPrice < plVals[i] && plObv > plInd[i]\r\n      var hidden = plPrice > plVals[i] && plObv < plInd[i]\r\n\r\n      // Price greater than previous pivot but OBV lower\r\n      if( regular || hidden ){\r\n         foundDiv = true\r\n\r\n         newMarkerDiv = { \r\n          time: time - (options.pivotRightLength-1) * bar.timeframe,\r\n          color: options.refinedObvColor,\r\n          position: 'belowBar',\r\n          //shape: 'arrowDown',\r\n          text: '▲' + (options.togglePivotAgo ? i + 1 : '') + (hidden ? '.' : '')\r\n        }\r\n        break\r\n      }\r\n    }\r\n\r\n    if( !foundDiv && options.toggleShowPricePivot){\r\n      newMarkerPivot = {\r\n          time: time - (options.pivotRightLength-1) * bar.timeframe,\r\n          color: options.refinedObvColor,\r\n          position: 'belowBar',\r\n          //shape: 'arrowUp',\r\n          text:  'L'\r\n        }\r\n    }\r\n  }\r\n\r\n  if( phPrice ){\r\n    var phObv = obv[options.pivotRightLength - 1]\r\n    phPositions.unshift(bar.length)\r\n    phVals.unshift(phPrice)\r\n    phInd.unshift(phObv)\r\n\r\n    if( phPositions.length > pivotsMax ){\r\n      phPositions.pop();\r\n      phVals.pop()\r\n      phInd.pop()\r\n    }\r\n\r\n    var foundDiv = false\r\n\r\n    for( var i = 0; i < (options.ppCheck || 10); i++ ){ \r\n      if( i > phPositions.length || phPositions[i] == 0){\r\n        break\r\n      }\r\n\r\n      var regular = phPrice > (phVals[i] || Infinity) && phObv < phInd[i]\r\n      var hidden = phPrice < phVals[i] && phObv > phInd[i] \r\n\r\n      // Price greater than previous pivot but OBV lower\r\n      if( regular || hidden ){\r\n        foundDiv = true\r\n         newMarkerDiv = { \r\n          time: time - (options.pivotRightLength-1) * bar.timeframe,\r\n          color: options.refinedObvColor,\r\n          position: 'aboveBar',\r\n          //shape: 'arrowDown',\r\n          text: '▼' + (options.togglePivotAgo ? i + 1 : '')  + (hidden ? '.' : '')\r\n        }\r\n        break\r\n      }\r\n    }\r\n\r\n   // console.log(time, $price.high);\r\n    if( !foundDiv  && options.toggleShowPricePivot ){\r\n        newMarkerPivot = { \r\n            time: time - (options.pivotRightLength-1) * bar.timeframe,\r\n            color: options.refinedObvColor,\r\n            position: 'aboveBar',\r\n            //shape: 'arrowDown',\r\n            text: 'H'\r\n          }\r\n    }\r\n  }\r\n  \r\n  // <markers utils>\r\n  if (newMarkerDiv || (pendingMarkerDiv && !newMarkerDiv)) {\r\n      pendingMarkerDiv = newMarkerDiv\r\n    \r\n    if (markersDiv.length > 100) {\r\n        markersDiv.splice(0, 1)\r\n    }\r\n      \r\n    if (series[0].setMarkers) {\r\n      series[0].setMarkers(markersDiv.concat(pendingMarkerDiv))\r\n    }\r\n    if (series[1].setMarkers) {\r\n      series[1].setMarkers(markersDiv.concat(pendingMarkerDiv))\r\n    }\r\n  }\r\n\r\n  if (newMarkerPivot || (pendingMarkerPivot && !newMarkerPivot)) {\r\n      pendingMarkerPivot = newMarkerPivot\r\n    \r\n    if (markersPivot.length > 100) {\r\n        markersPivot.splice(0, 1)\r\n    }\r\n      \r\n    if (options.toggleShowPricePivot && series[2].setMarkers) {\r\n      series[2].setMarkers(markersPivot.concat(pendingMarkerPivot))\r\n    }\r\n  }\r\n\r\n  // </markers utils>\r\n}",
          "id": "obv-spots",
          "name": "OBV spots",
          "options": {
            "priceScaleId": "obv-copy-1",
            "visible": true,
            "scaleMargins": {
              "top": 0.64,
              "bottom": 0
            },
            "lineStyle": 1,
            "color": "rgba(255,235,59,0.81)",
            "bodyPercentWatch": null,
            "wickRatioThreshold": null,
            "toggleDebug": null,
            "toggleVolumeWick": true,
            "togglePrintNormalObv": null,
            "refinedObvColor": "rgb(255,235,59)",
            "refineToggle": null,
            "toggleRefine": true,
            "quote": 0,
            "exchange": 0,
            "type": "spot",
            "title": "S",
            "toggleShowPricePivot": null,
            "showDivs": false,
            "pivotLeftLength": 40,
            "pivotRightLength": 40,
            "ppCheck": 5,
            "maxbars": null,
            "togglePivotAgo": true
          },
          "description": null,
          "createdAt": 1701126053261,
          "updatedAt": 1719301189596,
          "unsavedChanges": true,
          "series": [
            "obv-spots",
            "1av1sljz",
            "ggn0ng3e"
          ],
          "displayName": "OBV spots",
          "preview": {},
          "optionsDefinitions": {
            "quote": {
              "default": 0,
              "type": "list",
              "options": [
                null,
                "USD",
                "USDT",
                "TUSD",
                "USDC"
              ],
              "rebuild": true
            },
            "exchange": {
              "default": 0,
              "type": "exchange",
              "rebuild": true
            },
            "type": {
              "default": "perp",
              "type": "list",
              "options": [
                null,
                "spot",
                "perp"
              ],
              "rebuild": true
            }
          },
          "libraryId": "obv-spots"
        },
        "obv-perps": {
          "script": "if (markers === 0) {\r\n  // first script execution (0 is default values for all persistent variables)\r\n  // Source\r\n  quote = option(default=null,type=list,options=[null, \"USD\", \"USDT\", \"TUSD\", \"USDC\"],rebuild=true)\r\n  exchange = option(default=null,type=exchange,rebuild=true)\r\n  type = option(default=perp,type=list,options=[null, \"spot\", \"perp\"],rebuild=true)\r\n  \r\n  // create a var to store already drawn markers\r\n  markers = []\r\n\r\n  // contain the last marker that can change as the bar update\r\n  repaintableMarker = null\r\n\r\n  // if candle body has a price percent change less than bodyPercentWatch, we start a refinement\r\n  bodyPercentWatch = options.bodyPercentWatch || 0.3\r\n\r\n  // if a wick is x times greater than the other, we might use it to refine change the side\r\n  wickRatioThreshold = options.wickRatioThreshold || 1.5\r\n\r\n  // paint a marker when OBV has been refined (changed of direction)\r\n  toggleDebug = options.toggleDebug || false\r\n\r\n  // when on, we calculate the wick percent difference and keep only that volume to add to OBV \r\n  toggleVolumeWick = options.toggleVolumeWick || false\r\n\r\n  togglePrintNormalObv = options.togglePrintNormalObv || false\r\n\r\n\r\n  // Pivots\r\n  pivotsMax = 20\r\n  phPositions = []\r\n  plPositions = []\r\n  phVals = []\r\n  plVals = []\r\n  plInd  = []\r\n  phInd  = []\r\n}\r\nif ( options.toggleDebug && repaintableMarker && repaintableMarker.time < time) {\r\n  // bar is +1 since active marker was added, lock it in the array\r\n  markers.push(repaintableMarker)\r\n\r\n  // free up active marker\r\n  repaintableMarker = null\r\n}\r\n\r\nvar newMarker = null\r\n\r\nvar _vbuy = source(vbuy, quote=quote,type=type,exchange=exchange)\r\nvar _vsell = source(vsell, quote=quote,type=type,exchange=exchange)\r\nvar _open = $price.open\r\nvar _high = $price.high\r\nvar _low = $price.low\r\nvar _close = $price.close\r\n\r\nvar sign = _close > _open ? 1 : -1\r\nvar volume = _vbuy + _vsell\r\n\r\nvar bodySize = Math.abs(_close - _open);\r\nvar priceChange = (_close - _open) / _open; // Percentage change\r\n\r\nif( togglePrintNormalObv ){\r\n    plotline(cum(sign * volume), title=\"Original\", color=options.originalObvColor)\r\n}\r\n\r\nvar improved = false\r\n\r\n// Check if price change is less than 0.4%\r\nif (options.toggleRefine && Math.abs(priceChange) < bodyPercentWatch/100 ) {\r\n    var upperWickSize = _high - _close;\r\n    var lowerWickSize = _close - _low;\r\n\r\n    // Calculate the thresholds\r\n    var upperWickThreshold = wickRatioThreshold * lowerWickSize;\r\n    var lowerWickThreshold = wickRatioThreshold * upperWickSize;\r\n\r\n    // Check if upper and lower wicks have similar sizes\r\n    if (upperWickSize < upperWickThreshold && lowerWickSize < lowerWickThreshold) {\r\n        // Neutral move, don't add volume\r\n        sign = 0\r\n        improved = true\r\n    }else{\r\n        // Calculate the thresholds\r\n        var upperWickThreshold = wickRatioThreshold * lowerWickSize;\r\n        var lowerWickThreshold = wickRatioThreshold * upperWickSize;\r\n\r\n        // Determine the side based on wick sizes\r\n        // upper: 500, lower 100\r\n        if (upperWickSize > upperWickThreshold) {\r\n            improved = sign !== -1\r\n            // More selling happened, add volume as negative\r\n            sign = -1\r\n            if( toggleVolumeWick ) {\r\n                improved = true\r\n                var percentageDifference = ((upperWickSize - lowerWickSize) / upperWickSize);\r\n                volume = percentageDifference * volume\r\n                \r\n            }\r\n        } else if (lowerWickSize > lowerWickThreshold) {\r\n            improved = sign !== 1\r\n            // More buying happened, add volume as positive\r\n            sign = 1\r\n            if( toggleVolumeWick ) {\r\n                improved = true\r\n                var percentageDifference = ((lowerWickSize - upperWickSize) / lowerWickSize);\r\n                volume = percentageDifference * volume\r\n            }\r\n        }\r\n    }\r\n\r\n    if( improved && toggleDebug){\r\n        if (sign == -1) {\r\n            // newMarker is a temporary variable (not included in the indicator state)\r\n            // to avoid it being treated as persistent variable we wrap it inside parenthesis\r\n            (newMarker) = {\r\n                time: time,\r\n                position: 'aboveBar',\r\n                color: 'red',\r\n                shape: 'arrowDown'\r\n            }\r\n        }\r\n\r\n        if (sign == 1) {\r\n            (newMarker) = {\r\n                time: time,\r\n                position: 'belowBar',\r\n                color: 'lime',\r\n                shape: 'arrowUp'\r\n            }\r\n        } \r\n    }\r\n}\r\n\r\n\r\nif ( options.toggleDebug && (newMarker || (repaintableMarker && !newMarker))) {\r\n  // override persistent variable repaintable marker\r\n  repaintableMarker = newMarker\r\n  \r\n  if (series[0].setMarkers) {\r\n    series[0].setMarkers(markers.concat(repaintableMarker))\r\n    series[1].setMarkers(markers.concat(repaintableMarker))\r\n  }\r\n}\r\n\r\nobv(200) = 0 + cum(sign * volume)\r\nplotline(obv, title=options.title, color=options.refinedObvColor)\r\nif( options.toggleShowPricePivot ){\r\n  plotline(obv, color=transparent)\r\n}\r\n\r\n\r\nif (options.showDivs) {\r\n  \r\n  // <markers utils>\r\n  if (markersDiv === 0) {\r\n    markersDiv = []\r\n  }\r\n  if (markersPivot === 0) {\r\n    markersPivot = []\r\n  }\r\n  \r\n  if (pendingMarkerDiv && pendingMarkerDiv.time < time) {\r\n    markersDiv.push(pendingMarkerDiv)\r\n    pendingMarkerDiv = null\r\n  }\r\n\r\n  if (pendingMarkerPivot && pendingMarkerPivot.time < time) {\r\n    markersPivot.push(pendingMarkerPivot)\r\n    pendingMarkerPivot = null\r\n  }\r\n  \r\n  var newMarkerDiv = null\r\n  var newMarkerPivot = null\r\n  // </markers utils>\r\n  \r\n  // Check if we get new Pivot High Or Pivot Low\r\n\r\n  // find pivots low (cvd and price)\r\n  //plCvd = pivot_low(obv, options.pivotLeftLength, options.pivotRightLength)\r\n  var plPrice = pivot_low($price.low, options.pivotLeftLength, options.pivotRightLength)\r\n\r\n  // find pivots high (cvd and price)\r\n  //phCvd = pivot_high(obv, options.pivotLeftLength, options.pivotRightLength)\r\n  var phPrice = pivot_high($price.high, options.pivotLeftLength, options.pivotRightLength)\r\n  \r\n  if( plPrice ){\r\n    var plObv = obv[options.pivotRightLength - 1]\r\n    plPositions.unshift(bar.length)\r\n    plVals.unshift(plPrice)\r\n    plInd.unshift(plObv)\r\n   \r\n    if( plPositions.length > pivotsMax ){\r\n      plPositions.pop();\r\n      plVals.pop()\r\n      plInd.pop()\r\n    }\r\n\r\n    var foundDiv = false\r\n  \r\n    for( var i = 0; i < (options.ppCheck || 10); i++ ){ \r\n      if( i > plPositions.length || plPositions[i] == 0){\r\n        break\r\n      }\r\n      \r\n      var regular = plPrice < plVals[i] && plObv > plInd[i]\r\n      var hidden = plPrice > plVals[i] && plObv < plInd[i]\r\n\r\n      // Price greater than previous pivot but OBV lower\r\n      if( regular || hidden ){\r\n         foundDiv = true\r\n\r\n         newMarkerDiv = { \r\n          time: time - (options.pivotRightLength-1) * bar.timeframe,\r\n          color: options.refinedObvColor,\r\n          position: 'belowBar',\r\n          //shape: 'arrowDown',\r\n          text: '▲' + (options.togglePivotAgo ? i + 1 : '') + (hidden ? '.' : '')\r\n        }\r\n        break\r\n      }\r\n    }\r\n\r\n    if( !foundDiv && options.toggleShowPricePivot){\r\n      newMarkerPivot = {\r\n          time: time - (options.pivotRightLength-1) * bar.timeframe,\r\n          color: options.refinedObvColor,\r\n          position: 'belowBar',\r\n          //shape: 'arrowUp',\r\n          text:  'L'\r\n        }\r\n    }\r\n  }\r\n\r\n  if( phPrice ){\r\n    var phObv = obv[options.pivotRightLength - 1]\r\n    phPositions.unshift(bar.length)\r\n    phVals.unshift(phPrice)\r\n    phInd.unshift(phObv)\r\n\r\n    if( phPositions.length > pivotsMax ){\r\n      phPositions.pop();\r\n      phVals.pop()\r\n      phInd.pop()\r\n    }\r\n\r\n    var foundDiv = false\r\n\r\n    for( var i = 0; i < (options.ppCheck || 10); i++ ){ \r\n      if( i > phPositions.length || phPositions[i] == 0){\r\n        break\r\n      }\r\n\r\n      var regular = phPrice > (phVals[i] || Infinity) && phObv < phInd[i]\r\n      var hidden = phPrice < phVals[i] && phObv > phInd[i] \r\n\r\n      // Price greater than previous pivot but OBV lower\r\n      if( regular || hidden ){\r\n        foundDiv = true\r\n         newMarkerDiv = { \r\n          time: time - (options.pivotRightLength-1) * bar.timeframe,\r\n          color: options.refinedObvColor,\r\n          position: 'aboveBar',\r\n          //shape: 'arrowDown',\r\n          text: '▼' + (options.togglePivotAgo ? i + 1 : '')  + (hidden ? '.' : '')\r\n        }\r\n        break\r\n      }\r\n    }\r\n\r\n   // console.log(time, $price.high);\r\n    if( !foundDiv  && options.toggleShowPricePivot ){\r\n        newMarkerPivot = { \r\n            time: time - (options.pivotRightLength-1) * bar.timeframe,\r\n            color: options.refinedObvColor,\r\n            position: 'aboveBar',\r\n            //shape: 'arrowDown',\r\n            text: 'H'\r\n          }\r\n    }\r\n  }\r\n  \r\n  // <markers utils>\r\n  if (newMarkerDiv || (pendingMarkerDiv && !newMarkerDiv)) {\r\n      pendingMarkerDiv = newMarkerDiv\r\n    \r\n    if (markersDiv.length > 100) {\r\n        markersDiv.splice(0, 1)\r\n    }\r\n      \r\n    if (series[0].setMarkers) {\r\n      series[0].setMarkers(markersDiv.concat(pendingMarkerDiv))\r\n    }\r\n    if (series[1].setMarkers) {\r\n      series[1].setMarkers(markersDiv.concat(pendingMarkerDiv))\r\n    }\r\n  }\r\n\r\n  if (newMarkerPivot || (pendingMarkerPivot && !newMarkerPivot)) {\r\n      pendingMarkerPivot = newMarkerPivot\r\n    \r\n    if (markersPivot.length > 100) {\r\n        markersPivot.splice(0, 1)\r\n    }\r\n      \r\n    if (options.toggleShowPricePivot && series[2].setMarkers) {\r\n      series[2].setMarkers(markersPivot.concat(pendingMarkerPivot))\r\n    }\r\n  }\r\n\r\n  // </markers utils>\r\n}",
          "id": "obv-perps",
          "name": "OBV perps",
          "options": {
            "priceScaleId": "obv",
            "visible": true,
            "scaleMargins": {
              "top": 0.64,
              "bottom": 0
            },
            "lineStyle": 0,
            "color": "rgb(41,98,255)",
            "lineWidth": 1,
            "bodyPercentWatch": null,
            "wickRatioThreshold": null,
            "toggleDebug": false,
            "toggleVolumeWick": true,
            "togglePrintNormalObv": null,
            "refinedObvColor": "rgb(41,98,255)",
            "toggleRefine": true,
            "quote": 0,
            "exchange": 0,
            "type": "perp",
            "title": "P",
            "toggleShowPricePivot": false,
            "showDivs": false,
            "pivotLeftLength": 40,
            "pivotRightLength": 40,
            "ppCheck": 5,
            "maxbars": null,
            "togglePivotAgo": true
          },
          "description": null,
          "createdAt": 1701126013797,
          "updatedAt": 1724268119348,
          "unsavedChanges": true,
          "series": [
            "obv-perps",
            "lpqrrr7i",
            "wsgrdlaw"
          ],
          "displayName": "OBV perps",
          "optionsDefinitions": {
            "quote": {
              "default": 0,
              "type": "list",
              "options": [
                null,
                "USD",
                "USDT",
                "TUSD",
                "USDC"
              ],
              "rebuild": true
            },
            "exchange": {
              "default": 0,
              "type": "exchange",
              "rebuild": true
            },
            "type": {
              "default": "perp",
              "type": "list",
              "options": [
                null,
                "spot",
                "perp"
              ],
              "rebuild": true
            }
          },
          "libraryId": "obv-perps"
        },
        "mondays": {
          "script": "",
          "name": "Mondays",
          "priceScaleId": "right",
          "id": "mondays",
          "options": {
            "priceScaleId": "right",
            "pivotLength": 14,
            "strokeWidth": 1,
            "visible": true,
            "strokeColor": "rgba(255,255,255,0.6)",
            "scaleMargins": {
              "top": 0.16,
              "bottom": 0.3
            }
          },
          "series": [],
          "displayName": "Mondays",
          "unsavedChanges": false,
          "preview": {},
          "createdAt": 1701224825127,
          "updatedAt": 1701224825127,
          "optionsDefinitions": {}
        },
        "volume copy 1": {
          "script": "if (upColor === 0) {\r\n  if (options.showDelta) {\r\n    upColor = options.upBgColor\r\n    downColor = options.downBgColor\r\n  } else {\r\n    upColor = options.upColor\r\n    downColor = options.downColor\r\n  }\r\n}\r\n\r\nvar _vbuy = source(vbuy, type=perp)\r\nvar _vsell = source(vsell, type=perp)\r\n\r\nif (options.showDelta) {\r\n  plothistogram({ time: time, value: Math.abs(_vbuy-_vsell), color: _vbuy - _vsell > 0 ? options.upColor : options.downColor})\r\n}\r\n\r\nif ( (options.showBoth || false) == true ) {\r\n  plothistogram({ time: time, value: _vbuy + _vsell, color: _vbuy > _vsell ? upColor : downColor })\r\n}",
          "enabled": true,
          "name": "Volume",
          "description": "Volume + delta",
          "options": {
            "priceScaleId": "volume",
            "priceFormat": {
              "type": "volume"
            },
            "upColor": "rgba(76,175,80,0.62)",
            "downColor": "rgba(242,54,69,0.71)",
            "scaleMargins": {
              "top": 0.89,
              "bottom": 0
            },
            "showDelta": true,
            "upBgColor": "rgba(178,181,190,0.33)",
            "downBgColor": "rgba(93,96,107,0.38)",
            "visible": false,
            "lastValueVisible": true,
            "color": "rgba(195,168,122,0.54)",
            "showDeltaOnly": true,
            "showBoth": false
          },
          "id": "volume copy 1",
          "createdAt": 1700269685372,
          "updatedAt": 1701814537965,
          "series": [
            "volume copy 1",
            "huv90onl"
          ],
          "unsavedChanges": true,
          "preview": {},
          "displayName": "Volume",
          "optionsDefinitions": {}
        },
        "mfi": {
          "script": "src = ($price.high + $price.low + $price.close) / 3\r\nvolume=vbuy+vsell\r\nchange=src-src[1]\r\nupper = sum(volume * (change <= 0 ? 0 : src), 14)\r\nlower = sum(volume * (change >= 0 ? 0 : src), 14)\r\nmf = !lower ? null : 100 - (100 / (1 + upper / lower))\r\nplotline(mf, color=#459915)\r\nplotline(80, color=#c0c0c0, lineStyle=3)\r\nplotline(20, color=#c0c0c0, lineStyle=3)",
          "name": "MFI",
          "priceScaleId": "rsi",
          "id": "mfi",
          "options": {
            "priceScaleId": "rsi",
            "scaleMargins": {
              "top": 0.09,
              "bottom": 0.82
            },
            "visible": false
          },
          "optionsDefinitions": {},
          "series": [
            "mfi",
            "0p38vsyu",
            "lbqyex7v"
          ],
          "displayName": "MFI",
          "unsavedChanges": false
        },
        "_e14kz7wny4yuqu09": {
          "id": "_e14kz7wny4yuqu09",
          "libraryId": "bollinger-bands",
          "name": "Bollinger Bands",
          "description": null,
          "script": "var a = sma(Math.pow($price.close,2),options.length)\nvar b = Math.pow(sum($price.close,options.length),2)/Math.pow(options.length,2)\nvar stdev = Math.sqrt(a - b)\nvar src = $price.close\n\nvar basis = sma($price.close, options.length)\nvar dev = options.mult * stdev\nupper = basis + dev\nlower = basis - dev\n\nplotline(basis, color=options.basisColor)\nplotcloudarea(lower, upper)",
          "createdAt": 1683892675452,
          "updatedAt": 1705219432438,
          "options": {
            "priceScaleId": "right",
            "mult": 3,
            "length": 120,
            "lineStyle": 2,
            "basisColor": "rgba(129,199,132,0.5)",
            "positiveColor": "rgba(0,0,0,0.1)",
            "negativeColor": "rgba(0,0,0,0.1)",
            "lowerLineColor": "rgb(129,199,132)",
            "higherLineColor": "rgb(129,199,132)",
            "priceLineVisible": false,
            "lastValueVisible": true,
            "scaleMargins": {
              "top": 0.16,
              "bottom": 0.3
            },
            "visible": false
          },
          "optionsDefinitions": {},
          "series": [
            "bollinger-bands",
            "r0ztfvqw"
          ],
          "displayName": "Bollinger Bands"
        },
        "_9u95s0f9fltltl3j": {
          "id": "_9u95s0f9fltltl3j",
          "libraryId": "my-levels",
          "name": "my levels",
          "script": "if( !fetchOnce ){\r\n  lastIndex = null\r\n  fetchOnce = 1\r\n\r\n  if (bar.length === 1 && lastIndex === null ) {\r\n    myFetch = globalThis.fetch.bind(globalThis) \r\n    myFetch(\"http:\\/\\/localhost:3000/api/trader/state\")\r\n      .then(res => res.json())\r\n      .then(data => {\r\n        console.log('store', data)\r\n        localStorage.lastData = JSON.stringify(data)  \r\n      })\r\n  }\r\n\r\n}\r\n\r\n\r\n// process only first candle\r\n// bar.length at the start of each chunk\r\n/*if (bar.length !== 1 ) {\r\n   return\r\n}*/\r\n\r\nif (bar.length < lastIndex) {\r\n  //return\r\n}\r\n\r\n// avoid too many changes\r\nif( new Date().getTime() >= (renderer.timestamp + renderer.timeframe)*1000 ){\r\n  return\r\n} \r\n\r\n\r\nlastData = JSON.parse(localStorage?.lastData || '{}')\r\n\r\nif( lastIndex === null && lastData.buyOn && lastData.buyUnder && !lastData.inLong){\r\n  renderer.indicators[indicatorId].series[0] ={\r\n      //id:  Math.random().toString(),\r\n      time: time,\r\n      lowerValue: 0,\r\n      higherValue: lastData.buyUnder,\r\n      extendRight: true,\r\n      color: options.buyUnderColor\r\n    }\r\n}\r\n\r\nif( lastIndex === null && lastData.sellOn && lastData.sellAbove && !lastData.inShort){\r\n  renderer.indicators[indicatorId].series[1] ={\r\n      //id:  Math.random().toString(),\r\n      time: time,\r\n      lowerValue: lastData.sellAbove,\r\n      higherValue: 200000,\r\n      extendRight: true,\r\n      color: options.sellAboveColor\r\n    }\r\n}\r\n\r\n/*if( lastData && lastData.buyOn ){\r\n  for( var i = 0; i < lastData.buyLevels.length; i++ ){\r\n    renderer.indicators[indicatorId].series[2+i] ={\r\n      id:  Math.random().toString(),\r\n      time: time,\r\n      lowerValue: lastData.buyLevels[i].bottom,\r\n      higherValue: lastData.buyLevels[i].top,\r\n      extendRight: true,\r\n      color: options.buyColor\r\n    }\r\n  }\r\n}\r\nif( lastData && lastData.sellOn ){\r\n  for( var i = 0; i < lastData.sellLevels.length; i++ ){\r\n    renderer.indicators[indicatorId].series[4+i] ={\r\n      id:  Math.random().toString(),\r\n      time: time,\r\n      lowerValue: lastData.sellLevels[i].bottom,\r\n      higherValue: lastData.sellLevels[i].top,\r\n      extendRight: true,\r\n      color: options.sellColor\r\n    }\r\n  }\r\n\r\n}*/\r\n\r\n// set reference to bar index : avoid process next tick\r\n//lastIndex = bar.length\r\n\r\nbrokenarea(renderer.indicators[indicatorId].series[0] || { time: time }, \r\n    strokeColor=options.strokeColor, strokeWidth=options.strokeWidth)\r\n\r\nbrokenarea(renderer.indicators[indicatorId].series[1] || { time: time }, \r\n    strokeColor=options.strokeColor, strokeWidth=options.strokeWidth)\r\n\r\nbrokenarea(renderer.indicators[indicatorId].series[2] || { time: time }, \r\n    strokeColor=options.strokeColor, strokeWidth=options.strokeWidth)\r\n\r\nbrokenarea(renderer.indicators[indicatorId].series[3] || { time: time }, \r\n    strokeColor=options.strokeColor, strokeWidth=options.strokeWidth)\r\n\r\nbrokenarea(renderer.indicators[indicatorId].series[4] || { time: time }, \r\n    strokeColor=options.strokeColor, strokeWidth=options.strokeWidth)\r\n\r\nbrokenarea(renderer.indicators[indicatorId].series[5] || { time: time }, \r\n    strokeColor=options.strokeColor, strokeWidth=options.strokeWidth)\r\n\r\nbrokenarea(renderer.indicators[indicatorId].series[6] || { time: time }, \r\n    strokeColor=options.strokeColor, strokeWidth=options.strokeWidth)",
          "createdAt": 1723763191607,
          "updatedAt": 1740517200486,
          "options": {
            "priceScaleId": "right",
            "stepValue": "",
            "urlValue": "\"http:\r\nif( !drawOnce ){\r\n  \r\n  drawOnce = 1\r\n\r\n  test = globalThis.fetch.bind(globalThis) \r\n  test(options.urlValue).then(res => {\r\n    console.log(res) \r\n  }) \r\n  bottom = 50000\r\n  top = 53000\r\n}\r\n\r\n\r\nline(bottom)\r\nline(top",
            "strokeWidth": 1,
            "color": "rgba(76,175,80,0.59)",
            "visible": true,
            "scaleMargins": {
              "top": 0.16,
              "bottom": 0.3
            },
            "buyUnderColor": "rgba(76,175,80,0.17)",
            "sellAboveColor": "rgba(247,124,128,0.27)"
          },
          "optionsDefinitions": {},
          "series": [
            "my-levels",
            "tct0hr3c",
            "oxj0ncs5",
            "5y2vjrtu",
            "l6nluzfc",
            "g3wo24r8",
            "thl8kvb7"
          ],
          "displayName": "my levels",
          "unsavedChanges": true
        },
        "_ietvtz0wr7ugt4yc": {
          "id": "_ietvtz0wr7ugt4yc",
          "libraryId": "top-bands-spot",
          "name": "Top Bands Spot",
          "script": "if (!pendingMarkers) {\r\n    // runs only once\r\n    pendingMarkers = [] \r\n\r\n    togglePerp = options.togglePerp || false\r\n    \r\n    moveTo = options.togglePerp ? 10 : -10\r\n    bandSize = options.bandSize || 15\r\n\r\n    maxVolume = options.maxVolume || (togglePerp ? 4000 : 1500)\r\n    minVolume = options.minVolume || (togglePerp ? 500 : 200)\r\n\r\n    level0 = options.level0 || (togglePerp ? 2000 : 800)\r\n    level1 = options.level1 || (togglePerp ? 1000 : 400)\r\n\r\n    startOpacity = options.startOpacity || 0.1\r\n\r\n    colorLevel0 = options.colorLevel0.match(/\\(([\\d.]+),([\\d.]+),([\\d.]+),?([\\d.]+)?\\)$/).slice(1,5).map(a => +a)\r\n    colorLevel1 = options.colorLevel1.match(/\\(([\\d.]+),([\\d.]+),([\\d.]+),?([\\d.]+)?\\)$/).slice(1,5).map(a => +a)\r\n    colorLevel = options.colorLevel.match(/\\(([\\d.]+),([\\d.]+),([\\d.]+),?([\\d.]+)?\\)$/).slice(1,5).map(a => +a)\r\n\r\n    colorOpacity0 = colorLevel0.pop()\r\n    colorOpacity1 = colorLevel1.pop()\r\n    colorOpacity2 = colorLevel.pop()\r\n\r\n}\r\n\r\nvar levels = togglePerp ? ORDERBOOK:AGGRPERP-BTCUSD.zlevels : ORDERBOOK:AGGRSPOT-BTCUSD.zlevels\r\n\r\nif( !levels || levels.bids.length < 5 || levels.asks.length < 5  ){\r\n    return\r\n} \r\n\r\nvar alpha1 = startOpacity + (1 - startOpacity) * ((levels.bids[0][1] - minVolume) / (maxVolume - minVolume))\r\nvar alpha1Rounded = Math.round(alpha1 * 100) / 100 \r\nvar color1base = levels.bids[0][1] > level0 ? colorLevel0 : levels.bids[0][1] > level1 ? colorLevel1 : colorLevel\r\nvar color1 = 'rgba(' + color1base.join(',') + ',' + alpha1Rounded + ')'\r\n\r\nvar alpha2 = startOpacity + (1 - startOpacity) * ((levels.bids[1][1] - minVolume) / (maxVolume - minVolume))\r\nvar alpha2Rounded = Math.round(alpha1 * 100) / 100 \r\nvar color2base = levels.bids[1][1] > level0 ? colorLevel0 : levels.bids[1][1] > level1 ? colorLevel1 : colorLevel\r\nvar color2 = 'rgba(' + color2base.join(',') + ',' + alpha2Rounded + ')'\r\n\r\nvar alpha3 = startOpacity + (1 - startOpacity) * ((levels.bids[2][1] - minVolume) / (maxVolume - minVolume))\r\nvar alpha3Rounded = Math.round(alpha1 * 100) / 100 \r\nvar color3base = levels.bids[2][1] > level0 ? colorLevel0 : levels.bids[2][1] > level1 ? colorLevel1 : colorLevel\r\nvar color3 = 'rgba(' + color3base.join(',') + ',' + alpha3Rounded + ')'\r\n\r\nvar alpha4 = startOpacity + (1 - startOpacity) * ((levels.bids[3][1] - minVolume) / (maxVolume - minVolume))\r\nvar alpha4Rounded = Math.round(alpha1 * 100) / 100 \r\nvar color4base = levels.bids[3][1] > level0 ? colorLevel0 : levels.bids[3][1] > level1 ? colorLevel1 : colorLevel\r\nvar color4 = 'rgba(' + color4base.join(',') + ',' + alpha4Rounded + ')'\r\n\r\nvar alpha5 = startOpacity + (1 - startOpacity) * ((levels.bids[4][1] - minVolume) / (maxVolume - minVolume))\r\nvar alpha5Rounded = Math.round(alpha1 * 100) / 100 \r\nvar color5base = levels.bids[4][1] > level0 ? colorLevel0 : levels.bids[4][1] > level1 ? colorLevel1 : colorLevel\r\nvar color5 = 'rgba(' + color5base.join(',') + ',' + alpha5Rounded + ')'\r\n\r\n//line(levels.bids[0][0])line(levels.bids[1][0])\r\nplotbrokenarea({ time: time, id: levels.bids[0][0], lowerValue: levels.bids[0][0] + moveTo, higherValue: levels.bids[0][0] + bandSize + moveTo, color: color1 } )\r\nplotbrokenarea({ time: time, id: levels.bids[1][0], lowerValue: levels.bids[1][0] + moveTo, higherValue: levels.bids[1][0] + bandSize + moveTo, color: color2 } )\r\nplotbrokenarea({ time: time, lowerValue: levels.bids[2][0] + moveTo, higherValue: levels.bids[2][0] + bandSize + moveTo, color: color3 } )\r\nplotbrokenarea({ time: time, lowerValue: levels.bids[3][0] + moveTo, higherValue: levels.bids[3][0] + bandSize + moveTo, color: color4 } )\r\nplotbrokenarea({ time: time, lowerValue: levels.bids[4][0] + moveTo, higherValue: levels.bids[4][0] + bandSize + moveTo, color: color5 } )\r\n\r\nvar alphaAsks1 = startOpacity + (1 - startOpacity) * ((levels.asks[0][1] - minVolume) / (maxVolume - minVolume))\r\nvar alphaAsks1Rounded = Math.round(alphaAsks1 * 100) / 100 \r\nvar colorAsks1base = levels.asks[0][1] > level0 ? colorLevel0 : levels.asks[0][1] > level1 ? colorLevel1 : colorLevel\r\nvar colorAsks1 = 'rgba(' + colorAsks1base.join(',') + ',' + alphaAsks1Rounded + ')'\r\n\r\nvar alphaAsks2 = startOpacity + (1 - startOpacity) * ((levels.asks[1][1] - minVolume) / (maxVolume - minVolume))\r\nvar alphaAsks2Rounded = Math.round(alphaAsks1 * 100) / 100 \r\nvar colorAsks2base = levels.asks[1][1] > level0 ? colorLevel0 : levels.asks[1][1] > level1 ? colorLevel1 : colorLevel\r\nvar colorAsks2 = 'rgba(' + colorAsks2base.join(',') + ',' + alphaAsks2Rounded + ')'\r\n\r\nvar alphaAsks3 = startOpacity + (1 - startOpacity) * ((levels.asks[2][1] - minVolume) / (maxVolume - minVolume))\r\nvar alphaAsks3Rounded = Math.round(alphaAsks1 * 100) / 100 \r\nvar colorAsks3base = levels.asks[2][1] > level0 ? colorLevel0 : levels.asks[2][1] > level1 ? colorLevel1 : colorLevel\r\nvar colorAsks3 = 'rgba(' + colorAsks3base.join(',') + ',' + alphaAsks3Rounded + ')'\r\n\r\nvar alphaAsks4 = startOpacity + (1 - startOpacity) * ((levels.asks[3][1] - minVolume) / (maxVolume - minVolume))\r\nvar alphaAsks4Rounded = Math.round(alphaAsks1 * 100) / 100 \r\nvar colorAsks4base = levels.asks[3][1] > level0 ? colorLevel0 : levels.asks[3][1] > level1 ? colorLevel1 : colorLevel\r\nvar colorAsks4 = 'rgba(' + colorAsks4base.join(',') + ',' + alphaAsks4Rounded + ')'\r\n\r\nvar alphaAsks5 = startOpacity + (1 - startOpacity) * ((levels.asks[4][1] - minVolume) / (maxVolume - minVolume))\r\nvar alphaAsks5Rounded = Math.round(alphaAsks1 * 100) / 100 \r\nvar colorAsks5base = levels.asks[4][1] > level0 ? colorLevel0 : levels.asks[4][1] > level1 ? colorLevel1 : colorLevel\r\nvar colorAsks5 = 'rgba(' + colorAsks5base.join(',') + ',' + alphaAsks5Rounded + ')'\r\n\r\nplotbrokenarea({ time: time, lowerValue: levels.asks[0][0] + moveTo, higherValue: levels.asks[0][0] + bandSize + moveTo, color: colorAsks1 } )\r\nplotbrokenarea({ time: time, lowerValue: levels.asks[1][0] + moveTo, higherValue: levels.asks[1][0] + bandSize + moveTo, color: colorAsks2 } )\r\nplotbrokenarea({ time: time, lowerValue: levels.asks[2][0] + moveTo, higherValue: levels.asks[2][0] + bandSize + moveTo, color: colorAsks3 } )\r\nplotbrokenarea({ time: time, lowerValue: levels.asks[3][0] + moveTo, higherValue: levels.asks[3][0] + bandSize + moveTo, color: colorAsks4 } )\r\nplotbrokenarea({ time: time, lowerValue: levels.asks[4][0] + moveTo, higherValue: levels.asks[4][0] + bandSize + moveTo, color: colorAsks5 } )",
          "createdAt": 1732403606484,
          "updatedAt": 1739923978560,
          "options": {
            "priceScaleId": "right",
            "togglePerp": false,
            "bandSize": 80,
            "maxVolume": 1200,
            "minVolume": 300,
            "level0": 800,
            "level1": 400,
            "startOpacity": 0.3,
            "colorLevel0": "rgb(255,235,59)",
            "colorLevel1": "rgb(245,124,0)",
            "colorLevel": "rgb(34,171,148)",
            "visible": true,
            "scaleMargins": {
              "top": 0.16,
              "bottom": 0.3
            },
            "lineType": 0,
            "lineStyle": 0
          },
          "optionsDefinitions": {},
          "series": [
            "top-bands-spot",
            "t074ssk0",
            "mgk2a5kg",
            "ikgqdi0e",
            "wcj4nnjl",
            "lnuayojj",
            "8fjfe22u",
            "rk40oas8",
            "q6v7jm9f",
            "l69u8hqa"
          ],
          "displayName": "Top Bands Spot",
          "unsavedChanges": false
        },
        "_txskehbisifj8ugu": {
          "id": "_txskehbisifj8ugu",
          "libraryId": "_ietvtz0wr7ugt4yc",
          "name": "Top Bands Perp",
          "script": "if (!pendingMarkers) {\r\n    // runs only once\r\n    pendingMarkers = [] \r\n\r\n    togglePerp = options.togglePerp || false\r\n    \r\n    moveTo = options.togglePerp ? 10 : -10\r\n    bandSize = options.bandSize || 15\r\n\r\n    maxVolume = options.maxVolume || (togglePerp ? 4000 : 1500)\r\n    minVolume = options.minVolume || (togglePerp ? 500 : 200)\r\n\r\n    level0 = options.level0 || (togglePerp ? 2000 : 800)\r\n    level1 = options.level1 || (togglePerp ? 1000 : 400)\r\n\r\n    startOpacity = options.startOpacity || 0.1\r\n\r\n    colorLevel0 = options.colorLevel0.match(/\\(([\\d.]+),([\\d.]+),([\\d.]+),?([\\d.]+)?\\)$/).slice(1,5).map(a => +a)\r\n    colorLevel1 = options.colorLevel1.match(/\\(([\\d.]+),([\\d.]+),([\\d.]+),?([\\d.]+)?\\)$/).slice(1,5).map(a => +a)\r\n    colorLevel = options.colorLevel.match(/\\(([\\d.]+),([\\d.]+),([\\d.]+),?([\\d.]+)?\\)$/).slice(1,5).map(a => +a)\r\n\r\n    colorOpacity0 = colorLevel0.pop()\r\n    colorOpacity1 = colorLevel1.pop()\r\n    colorOpacity2 = colorLevel.pop()\r\n\r\n}\r\n\r\nvar levels = togglePerp ? ORDERBOOK:AGGRPERP-BTCUSD.zlevels : ORDERBOOK:AGGRSPOT-BTCUSD.zlevels\r\n\r\nif( !levels || levels.bids.length < 5 || levels.asks.length < 5  ){\r\n    return\r\n} \r\n\r\nvar alpha1 = startOpacity + (1 - startOpacity) * ((levels.bids[0][1] - minVolume) / (maxVolume - minVolume))\r\nvar alpha1Rounded = Math.round(alpha1 * 100) / 100 \r\nvar color1base = levels.bids[0][1] > level0 ? colorLevel0 : levels.bids[0][1] > level1 ? colorLevel1 : colorLevel\r\nvar color1 = 'rgba(' + color1base.join(',') + ',' + alpha1Rounded + ')'\r\n\r\nvar alpha2 = startOpacity + (1 - startOpacity) * ((levels.bids[1][1] - minVolume) / (maxVolume - minVolume))\r\nvar alpha2Rounded = Math.round(alpha1 * 100) / 100 \r\nvar color2base = levels.bids[1][1] > level0 ? colorLevel0 : levels.bids[1][1] > level1 ? colorLevel1 : colorLevel\r\nvar color2 = 'rgba(' + color2base.join(',') + ',' + alpha2Rounded + ')'\r\n\r\nvar alpha3 = startOpacity + (1 - startOpacity) * ((levels.bids[2][1] - minVolume) / (maxVolume - minVolume))\r\nvar alpha3Rounded = Math.round(alpha1 * 100) / 100 \r\nvar color3base = levels.bids[2][1] > level0 ? colorLevel0 : levels.bids[2][1] > level1 ? colorLevel1 : colorLevel\r\nvar color3 = 'rgba(' + color3base.join(',') + ',' + alpha3Rounded + ')'\r\n\r\nvar alpha4 = startOpacity + (1 - startOpacity) * ((levels.bids[3][1] - minVolume) / (maxVolume - minVolume))\r\nvar alpha4Rounded = Math.round(alpha1 * 100) / 100 \r\nvar color4base = levels.bids[3][1] > level0 ? colorLevel0 : levels.bids[3][1] > level1 ? colorLevel1 : colorLevel\r\nvar color4 = 'rgba(' + color4base.join(',') + ',' + alpha4Rounded + ')'\r\n\r\nvar alpha5 = startOpacity + (1 - startOpacity) * ((levels.bids[4][1] - minVolume) / (maxVolume - minVolume))\r\nvar alpha5Rounded = Math.round(alpha1 * 100) / 100 \r\nvar color5base = levels.bids[4][1] > level0 ? colorLevel0 : levels.bids[4][1] > level1 ? colorLevel1 : colorLevel\r\nvar color5 = 'rgba(' + color5base.join(',') + ',' + alpha5Rounded + ')'\r\n\r\nplotbrokenarea({ time: time, id: levels.bids[0][0], lowerValue: levels.bids[0][0] + moveTo, higherValue: levels.bids[0][0] + bandSize + moveTo, color: color1 } )\r\nplotbrokenarea({ time: time, id: levels.bids[1][0], lowerValue: levels.bids[1][0] + moveTo, higherValue: levels.bids[1][0] + bandSize + moveTo, color: color2 } )\r\nplotbrokenarea({ time: time, lowerValue: levels.bids[2][0] + moveTo, higherValue: levels.bids[2][0] + bandSize + moveTo, color: color3 } )\r\nplotbrokenarea({ time: time, lowerValue: levels.bids[3][0] + moveTo, higherValue: levels.bids[3][0] + bandSize + moveTo, color: color4 } )\r\nplotbrokenarea({ time: time, lowerValue: levels.bids[4][0] + moveTo, higherValue: levels.bids[4][0] + bandSize + moveTo, color: color5 } )\r\n\r\n\r\nvar alphaAsks1 = startOpacity + (1 - startOpacity) * ((levels.asks[0][1] - minVolume) / (maxVolume - minVolume))\r\nvar alphaAsks1Rounded = Math.round(alphaAsks1 * 100) / 100 \r\nvar colorAsks1base = levels.asks[0][1] > level0 ? colorLevel0 : levels.asks[0][1] > level1 ? colorLevel1 : colorLevel\r\nvar colorAsks1 = 'rgba(' + colorAsks1base.join(',') + ',' + alphaAsks1Rounded + ')'\r\n\r\nvar alphaAsks2 = startOpacity + (1 - startOpacity) * ((levels.asks[1][1] - minVolume) / (maxVolume - minVolume))\r\nvar alphaAsks2Rounded = Math.round(alphaAsks1 * 100) / 100 \r\nvar colorAsks2base = levels.asks[1][1] > level0 ? colorLevel0 : levels.asks[1][1] > level1 ? colorLevel1 : colorLevel\r\nvar colorAsks2 = 'rgba(' + colorAsks2base.join(',') + ',' + alphaAsks2Rounded + ')'\r\n\r\nvar alphaAsks3 = startOpacity + (1 - startOpacity) * ((levels.asks[2][1] - minVolume) / (maxVolume - minVolume))\r\nvar alphaAsks3Rounded = Math.round(alphaAsks1 * 100) / 100 \r\nvar colorAsks3base = levels.asks[2][1] > level0 ? colorLevel0 : levels.asks[2][1] > level1 ? colorLevel1 : colorLevel\r\nvar colorAsks3 = 'rgba(' + colorAsks3base.join(',') + ',' + alphaAsks3Rounded + ')'\r\n\r\nvar alphaAsks4 = startOpacity + (1 - startOpacity) * ((levels.asks[3][1] - minVolume) / (maxVolume - minVolume))\r\nvar alphaAsks4Rounded = Math.round(alphaAsks1 * 100) / 100 \r\nvar colorAsks4base = levels.asks[3][1] > level0 ? colorLevel0 : levels.asks[3][1] > level1 ? colorLevel1 : colorLevel\r\nvar colorAsks4 = 'rgba(' + colorAsks4base.join(',') + ',' + alphaAsks4Rounded + ')'\r\n\r\nvar alphaAsks5 = startOpacity + (1 - startOpacity) * ((levels.asks[4][1] - minVolume) / (maxVolume - minVolume))\r\nvar alphaAsks5Rounded = Math.round(alphaAsks1 * 100) / 100 \r\nvar colorAsks5base = levels.asks[4][1] > level0 ? colorLevel0 : levels.asks[4][1] > level1 ? colorLevel1 : colorLevel\r\nvar colorAsks5 = 'rgba(' + colorAsks5base.join(',') + ',' + alphaAsks5Rounded + ')'\r\n\r\nplotbrokenarea({ time: time, lowerValue: levels.asks[0][0] + moveTo, higherValue: levels.asks[0][0] + bandSize + moveTo, color: colorAsks1 } )\r\nplotbrokenarea({ time: time, lowerValue: levels.asks[1][0] + moveTo, higherValue: levels.asks[1][0] + bandSize + moveTo, color: colorAsks2 } )\r\nplotbrokenarea({ time: time, lowerValue: levels.asks[2][0] + moveTo, higherValue: levels.asks[2][0] + bandSize + moveTo, color: colorAsks3 } )\r\nplotbrokenarea({ time: time, lowerValue: levels.asks[3][0] + moveTo, higherValue: levels.asks[3][0] + bandSize + moveTo, color: colorAsks4 } )\r\nplotbrokenarea({ time: time, lowerValue: levels.asks[4][0] + moveTo, higherValue: levels.asks[4][0] + bandSize + moveTo, color: colorAsks5 } )",
          "createdAt": 1738750182919,
          "updatedAt": 1738796244130,
          "options": {
            "priceScaleId": "right",
            "togglePerp": true,
            "bandSize": 100,
            "maxVolume": 1000,
            "minVolume": 300,
            "level0": 700,
            "level1": 500,
            "startOpacity": 0.3,
            "colorLevel0": "rgb(255,235,59)",
            "colorLevel1": "rgb(156,39,176)",
            "colorLevel": "rgb(103,58,183)",
            "visible": false,
            "scaleMargins": {
              "top": 0.16,
              "bottom": 0.3
            }
          },
          "optionsDefinitions": {},
          "series": [
            "_ietvtz0wr7ugt4yc",
            "gbc2ghoa",
            "l5n7lxb7",
            "k2qfwpwb",
            "tv9yb3ro",
            "jg6pq3o8",
            "nuspqceu",
            "2qhmzi7i",
            "l7aab9yr",
            "6lxrs7f3"
          ],
          "displayName": "Top Bands Perp",
          "unsavedChanges": false
        }
      },
      "indicatorOrder": [
        "cvd",
        "liquidations",
        "price",
        "volume",
        "keltner",
        "relative-volume",
        "obv-perps",
        "volume copy 1",
        "mondays",
        "obv-spots",
        "mfi",
        "_e14kz7wny4yuqu09",
        "_9u95s0f9fltltl3j",
        "_ietvtz0wr7ugt4yc",
        "_txskehbisifj8ugu"
      ],
      "priceScales": {
        "right": {
          "scaleMargins": {
            "top": 0.16,
            "bottom": 0.3
          },
          "priceFormat": {
            "precision": 1,
            "minMove": 0.1
          },
          "indicators": [
            "Price"
          ]
        },
        "cvd": {
          "scaleMargins": {
            "top": 0.64,
            "bottom": 0
          },
          "indicators": [
            "CVD"
          ]
        },
        "volume_liquidations": {
          "scaleMargins": {
            "top": 0,
            "bottom": 0.85
          },
          "indicators": [
            "Liquidations"
          ]
        },
        "volume": {
          "scaleMargins": {
            "top": 0.89,
            "bottom": 0
          },
          "indicators": [
            "Volume"
          ]
        },
        "left": {
          "scaleMargins": {
            "top": 0.04,
            "bottom": 0.22
          },
          "indicators": [
            "Price"
          ]
        },
        "obv": {
          "scaleMargins": {
            "top": 0.64,
            "bottom": 0
          },
          "indicators": [
            "obv"
          ]
        },
        "obv-copy-1": {
          "scaleMargins": {
            "top": 0.64,
            "bottom": 0
          },
          "indicators": [
            "OBV perps"
          ]
        },
        "rsi": {
          "scaleMargins": {
            "top": 0.09,
            "bottom": 0.82
          },
          "indicators": [
            "MFI"
          ]
        }
      },
      "layouting": false,
      "showIndicators": true,
      "timeframe": "3600",
      "refreshRate": 10000,
      "showAlerts": true,
      "showAlertsLabel": true,
      "showLegend": false,
      "fillGapsWithEmpty": true,
      "showHorizontalGridlines": false,
      "horizontalGridlinesColor": "rgba(255,255,255,.1)",
      "showVerticalGridlines": false,
      "verticalGridlinesColor": "rgba(255,255,255,.1)",
      "showWatermark": false,
      "watermarkColor": "rgba(255,255,255,.1)",
      "showBorder": true,
      "borderColor": null,
      "textColor": null,
      "showLeftScale": false,
      "showRightScale": true,
      "showTimeScale": true,
      "hiddenMarkets": {},
      "barSpacing": 3.769148666186744,
      "_id": "chart copy 4",
      "navigationState": {
        "tab": "script",
        "optionsQuery": "",
        "fontSizePx": 14
      }
    },
    "chart copy 3": {
      "indicatorsErrors": {},
      "indicators": {
        "cvd": {
          "enabled": true,
          "name": "CVD",
          "description": "Cumulative Volume Delta",
          "script": "plotline(cum(vbuy - vsell))",
          "options": {
            "priceScaleId": "cvd",
            "priceFormat": {
              "type": "volume"
            },
            "color": "rgba(209,212,220,0.81)",
            "scaleMargins": {
              "top": 0.07,
              "bottom": 0.51
            },
            "visible": false,
            "lineWidth": 1,
            "priceLineStyle": 1,
            "lineStyle": 1
          },
          "id": "cvd",
          "createdAt": 1700269685372,
          "updatedAt": 1701487751241,
          "series": [
            "cvd"
          ],
          "unsavedChanges": false,
          "preview": {},
          "optionsDefinitions": {}
        },
        "liquidations": {
          "enabled": true,
          "name": "Liquidations",
          "description": "Liquidations by side",
          "script": "plothistogram(lbuy, color=options.upColor)\nplothistogram(-lsell, color=options.downColor)",
          "options": {
            "priceFormat": {
              "type": "volume"
            },
            "priceScaleId": "volume_liquidations",
            "upColor": "rgb(255,76,243)",
            "downColor": "rgb(255,183,77)",
            "scaleMargins": {
              "top": 0,
              "bottom": 0.96
            },
            "visible": true
          },
          "id": "liquidations",
          "createdAt": 1700269685372,
          "updatedAt": 1700815523685,
          "series": [
            "liquidations",
            "2s9xnxd6"
          ],
          "preview": {},
          "unsavedChanges": false,
          "optionsDefinitions": {}
        },
        "price": {
          "enabled": true,
          "name": "Price",
          "script": "src = { sources: { \"BINANCE_FUTURES:btcusdt\":BINANCE_FUTURES:btcusdt }, localTimestamp: time }\r\n\r\nvar ohlc = options.useHeikinAshi ? avg_heikinashi(src) : options.useGaps ? avg_ohlc_with_gaps(src) : avg_ohlc(src)\r\n\r\nplotcandlestick(ohlc, id=price)",
          "options": {
            "priceScaleId": "right",
            "priceFormat": {
              "auto": true,
              "precision": 1,
              "minMove": 0.1
            },
            "priceLineVisible": true,
            "lastValueVisible": true,
            "borderVisible": false,
            "upColor": "rgba(255,235,59,0.52)",
            "downColor": "rgba(242,54,69,0.64)",
            "borderUpColor": "rgba(255,245,157,0.66)",
            "borderDownColor": "rgba(178,40,51,0.52)",
            "wickUpColor": "rgb(223,211,144)",
            "wickDownColor": "rgba(239,67,82,0.47)",
            "useGaps": false,
            "useHeikinAshi": false,
            "scaleMargins": {
              "top": 0.12,
              "bottom": 0.43
            },
            "visible": true
          },
          "id": "price",
          "createdAt": 1700269685372,
          "updatedAt": 1705463169746,
          "series": [
            "price"
          ],
          "unsavedChanges": true,
          "preview": {},
          "optionsDefinitions": {},
          "libraryId": "price"
        },
        "volume": {
          "script": "if (upColor === 0) {\r\n  if (options.showDelta) {\r\n    upColor = options.upBgColor\r\n    downColor = options.downBgColor\r\n  } else {\r\n    upColor = options.upColor\r\n    downColor = options.downColor\r\n  }\r\n}\r\n\r\nvar _vbuy = source(vbuy, type=perp)\r\nvar _vsell = source(vsell, type=perp)\r\n\r\nif (options.showDelta) {\r\n  plothistogram({ time: time, value: Math.abs(_vbuy-_vsell), color: _vbuy - _vsell > 0 ? options.upColor : options.downColor})\r\n}\r\n\r\nif ( (options.showBoth || false) == true ) {\r\n  plothistogram({ time: time, value: _vbuy + _vsell, color: _vbuy > _vsell ? upColor : downColor })\r\n}",
          "enabled": true,
          "name": "Volume",
          "description": "Volume + delta",
          "options": {
            "priceScaleId": "volume",
            "priceFormat": {
              "type": "volume"
            },
            "upColor": "rgba(76,175,80,0.62)",
            "downColor": "rgba(242,54,69,0.71)",
            "scaleMargins": {
              "top": 0.67,
              "bottom": 0
            },
            "showDelta": true,
            "upBgColor": "rgba(178,181,190,0.33)",
            "downBgColor": "rgba(93,96,107,0.38)",
            "visible": false,
            "lastValueVisible": true,
            "color": "rgba(195,168,122,0.54)",
            "showDeltaOnly": true,
            "showBoth": true
          },
          "id": "volume",
          "createdAt": 1700269685372,
          "updatedAt": 1701730048341,
          "series": [
            "volume",
            "92slrm93"
          ],
          "unsavedChanges": true,
          "preview": {},
          "displayName": "Volume",
          "optionsDefinitions": {}
        },
        "volume-copy-1": {
          "script": "if (upColor === 0) {\r\n  if (options.showDelta) {\r\n    upColor = options.upBgColor\r\n    downColor = options.downBgColor\r\n  } else {\r\n    upColor = options.upColor\r\n    downColor = options.downColor\r\n  }\r\n}\r\n\r\nvar _vbuy = source(vbuy, type=perp)\r\nvar _vsell = source(vsell, type=perp)\r\nvar _vbuys = source(vbuy, type=spot)\r\nvar _vsells = source(vsell, type=spot)\r\n\r\nif ( (options.showBoth || false) == true ) {\r\n  plothistogram({ time: time, value: _vbuy + _vsell + _vbuys + _vsells , color: _vbuy > _vsell ? upColor : downColor })\r\n}else{\r\n plothistogram({ time: time, value: _vbuy + _vsell, color: _vbuy > _vsell ? upColor : downColor })\r\n}\r\n\r\n// plothistogram({ time: time, value: Math.abs(_vbuy), color: options.upColor})\r\n\r\nif (options.showDelta) {\r\n  plothistogram({ time: time, value: Math.abs(_vbuy-_vsell), color: _vbuy - _vsell > 0 ? options.upColor : options.downColor})\r\n}",
          "name": "Volume copy 1",
          "description": "Volume + delta",
          "options": {
            "priceScaleId": "volume",
            "priceFormat": {
              "type": "volume"
            },
            "upColor": "rgba(76,175,80,0.62)",
            "downColor": "rgba(242,54,69,0.71)",
            "scaleMargins": {
              "top": 0.67,
              "bottom": 0
            },
            "showDelta": true,
            "upBgColor": "rgba(178,181,190,0.33)",
            "downBgColor": "rgba(93,96,107,0.38)",
            "visible": true,
            "lastValueVisible": true,
            "color": "rgba(195,168,122,0.54)",
            "showDeltaOnly": true,
            "showBoth": true
          },
          "id": "volume-copy-1",
          "series": [
            "volume-copy-1",
            "sjmbev23",
            "msg2irwz"
          ],
          "unsavedChanges": false,
          "preview": {},
          "displayName": "Volume copy 1",
          "optionsDefinitions": {},
          "libraryId": "volume-copy-1",
          "createdAt": 1702261544940,
          "updatedAt": 1722816147269
        },
        "ob-speed": {
          "script": "obUpdates = ORDERBOOK:AGGRSPOT-BTCUSD.zupdates + ORDERBOOK:AGGRPERP-BTCUSD.zupdates\r\n\r\nplothistogram(obUpdates)\r\nline(ema(obUpdates, 21))",
          "name": "OB speed",
          "priceScaleId": "ob-speed",
          "id": "ob-speed",
          "options": {
            "priceScaleId": "ob-speed",
            "scaleMargins": {
              "top": 0.83,
              "bottom": 0
            },
            "visible": false,
            "togglePerp": true,
            "toggleSpot": true,
            "priceFormat": {
              "type": "volume",
              "precision": 2,
              "minMove": 0.01,
              "auto": true
            }
          },
          "series": [
            "ob-speed",
            "j324q3vs"
          ],
          "displayName": "OB speed",
          "unsavedChanges": false,
          "preview": {},
          "createdAt": 1701126916031,
          "updatedAt": 1701424475987,
          "optionsDefinitions": {}
        },
        "single-bar-delta-divergence": {
          "script": "//Prev abstractions\ngreenCandle = $price.close > $price.open\nredCandle = $price.close < $price.open \ndelta = vbuy - vsell\n\n//Find delta divergence\nbullDiv = delta<0 && greenCandle\nbearDiv = delta>0 && redCandle\n\n//High Volume Filter\nbuyAvg = ema(vbuy, options.volumeAvgPeriod)\nsellAvg = ema(vsell, options.volumeAvgPeriod)\n\n//volumeAvg = ema(delta, options.volumeAvgPeriod)\n// highDelta = delta > volumeAvg*options.volumeAvgMult\n\nhighDelta = vbuy > buyAvg *options.volumeAvgMult || vbuy > vsell *options.volumeAvgMult \n\n//Filtered delta divs\nbullDivHV = bullDiv && highDelta\nbearDivHV = bearDiv && highDelta \n\n//Plot\nplothistogram(bullDivHV ? { time: time, value: 1, color: options.bullDivColor } : bearDivHV ? { time: time, value: 1, color: options.bearDivColor } : { time: time, value: 1, color: options.noDivColor })\n\n//plothistogram({ time: time, value: 1, color: options.bullDivColor })",
          "id": "single-bar-delta-divergence",
          "name": "Single Bar Delta Divergence",
          "options": {
            "priceScaleId": "single-bar-delta-divergence",
            "priceFormat": {
              "type": "percent",
              "precision": 2,
              "minMove": 0.01,
              "auto": false
            },
            "visible": false,
            "priceLineVisible": false,
            "bullDivColor": "rgba(62,248,186,0.25)",
            "bearDivColor": "rgba(248,62,62,0.24)",
            "noDivColor": "rgba(117,117,117,0)",
            "volumeAvgPeriod": 10,
            "volumeAvgMult": 2,
            "lastValueVisible": false
          },
          "description": null,
          "createdAt": 1635240470496,
          "updatedAt": 1664426154419,
          "unsavedChanges": false,
          "optionsDefinitions": {},
          "displayName": "Single Bar Delta Divergence",
          "series": [
            "single-bar-delta-divergence"
          ]
        },
        "_yxlh1nkvavyg5sv3": {
          "id": "_yxlh1nkvavyg5sv3",
          "libraryId": "trades",
          "name": "trades",
          "description": null,
          "script": "histogram(cbuy+csell)",
          "createdAt": 1700861665246,
          "updatedAt": 1705274627966,
          "options": {
            "priceScaleId": "trades",
            "scaleMargins": {
              "top": 0.67,
              "bottom": 0.29
            },
            "color": "rgba(255,255,255,0.43)",
            "visible": true,
            "lineType": 1
          },
          "optionsDefinitions": {},
          "series": [
            "trades"
          ],
          "displayName": "trades",
          "unsavedChanges": false
        },
        "_c18azdwcxihp6302": {
          "id": "_c18azdwcxihp6302",
          "libraryId": "cvd-spot",
          "name": "CVD Spot",
          "script": "if (pivotsMax === 0) {\r\n  // Source\r\n  quote = option(default=null,type=list,options=[null, \"USD\", \"USDT\", \"TUSD\", \"USDC\"],rebuild=true)\r\n  exchange = option(default=null,type=exchange,rebuild=true)\r\n  type = option(default=perp,type=list,options=[null, \"spot\", \"perp\"],rebuild=true)\r\n  \r\n  // Pivots\r\n  pivotsMax = 20\r\n  phPositions = []\r\n  plPositions = []\r\n  phVals = []\r\n  plVals = []\r\n}\r\n\r\nbuyVolume = source(vbuy, quote=quote,type=type,exchange=exchange)\r\nsellVolume = source(vsell, quote=quote,type=type,exchange=exchange)\r\n\r\ncvd = cum(buyVolume - sellVolume)\r\n\r\nplotline(cvd, title=options.title || \"CVD\", color=options.cvdColor)\r\n\r\nif( options.toggleShowPricePivot ){\r\n  plotline(cvd, color=transparent)\r\n}\r\n\r\nif (options.showDivs) {\r\n  \r\n  // <markers utils>\r\n  if (markersDiv === 0) {\r\n    markersDiv = []\r\n  }\r\n  if (markersPivot === 0) {\r\n    markersPivot = []\r\n  }\r\n  \r\n  if (pendingMarkerDiv && pendingMarkerDiv.time < time) {\r\n    markersDiv.push(pendingMarkerDiv)\r\n    pendingMarkerDiv = null\r\n  }\r\n\r\n  if (pendingMarkerPivot && pendingMarkerPivot.time < time) {\r\n    markersPivot.push(pendingMarkerPivot)\r\n    pendingMarkerPivot = null\r\n  }\r\n  \r\n  var newMarkerDiv = null\r\n  var newMarkerPivot = null\r\n  // </markers utils>\r\n  \r\n  // Check if we get new Pivot High Or Pivot Low\r\n\r\n  // find pivots low (cvd and price)\r\n  plCvd = pivot_low(cvd, options.pivotLeftLength, options.pivotRightLength)\r\n  plPrice = pivot_low($price.low, options.pivotLeftLength, options.pivotRightLength)\r\n\r\n  // find pivots high (cvd and price)\r\n  phCvd = pivot_high(cvd, options.pivotLeftLength, options.pivotRightLength)\r\n  phPrice = pivot_high($price.high, options.pivotLeftLength, options.pivotRightLength)\r\n  \r\n  if( plPrice ){\r\n    plPositions.unshift(bar.length)\r\n    plVals.unshift(plPrice)\r\n    if( plPositions.length > pivotsMax ){\r\n      plPositions.pop();\r\n      plVals.pop()\r\n    }\r\n\r\n    var foundDiv = false\r\n    var startPoint = 0\r\n    cvd[100] // looks like required to load \r\n    for( var i = 0; i < (options.ppCheck || 10); i++ ){ \r\n      if( i > plPositions.length || plPositions[i] == 0){\r\n        break\r\n      }\r\n      var len = bar.length - plPositions[i] + options.pivotRightLength\r\n      if( len > (options.maxbars || 100)){\r\n        break\r\n      }\r\n      \r\n      // Price lower than previous pivot but CVD is higher\r\n      if( len > 5 && plPrice < (plVals[i] || 0) && cvd > cvd[len]){\r\n         console.log('PL', plPositions[i], len, cvd, cvd[len], $price.high, plVals[i])\r\n         foundDiv = true\r\n\r\n         newMarkerDiv = { \r\n          time: time - (options.pivotRightLength-1) * bar.timeframe,\r\n          color: options.DivcolorUp,\r\n          position: 'belowBar',\r\n          //shape: 'arrowDown',\r\n          text: '▲' + (options.togglePivotAgo ? i : '')\r\n        }\r\n        break\r\n      }\r\n    }\r\n\r\n    if( !foundDiv && options.toggleShowPricePivot){\r\n      newMarkerPivot = {\r\n          time: time - (options.pivotRightLength-1) * bar.timeframe,\r\n          color: options.DivcolorUp,\r\n          position: 'belowBar',\r\n          //shape: 'arrowUp',\r\n          text:  'L'\r\n        }\r\n    }\r\n  }\r\n\r\n  if( phPrice ){\r\n \r\n    phPositions.unshift(bar.length)\r\n    phVals.unshift(phPrice)\r\n    if( phPositions.length > pivotsMax ){\r\n      phPositions.pop();\r\n      phVals.pop()\r\n    }\r\n\r\n    var foundDiv = false\r\n    var startPoint = 0\r\n    cvd[100] // looks like required to load \r\n    for( var i = 0; i < (options.ppCheck || 10); i++ ){ \r\n      if( i > phPositions.length || phPositions[i] == 0){\r\n        break\r\n      }\r\n      var len = bar.length - phPositions[i] + options.pivotRightLength\r\n      if( len > (options.maxbars || 100)){\r\n        break\r\n      }\r\n\r\n      // Price greater than previous pivot but CVD lower\r\n      if( len > 5 && phPrice > (phVals[i] || Infinity) && cvd < cvd[len]){\r\n         console.log('PH', phPositions[i], len, cvd, cvd[len], $price.high, phVals[i])\r\n        foundDiv = true\r\n         newMarkerDiv = { \r\n          time: time - (options.pivotRightLength-1) * bar.timeframe,\r\n          color: options.DivcolorDn,\r\n          position: 'aboveBar',\r\n          //shape: 'arrowDown',\r\n          text: '▼' + (options.togglePivotAgo ? i : '')\r\n        }\r\n        break\r\n      }\r\n    }\r\n\r\n    if( !foundDiv  && options.toggleShowPricePivot ){\r\n        newMarkerPivot = { \r\n            time: time - (options.pivotRightLength-1) * bar.timeframe,\r\n            color: options.DivcolorDn,\r\n            position: 'aboveBar',\r\n            //shape: 'arrowDown',\r\n            text: 'H'\r\n          }\r\n    }\r\n  }\r\n  \r\n  // <markers utils>\r\n  if (newMarkerDiv || (pendingMarkerDiv && !newMarkerDiv)) {\r\n      pendingMarkerDiv = newMarkerDiv\r\n    \r\n    if (markersDiv.length > 100) {\r\n        markersDiv.splice(0, 1)\r\n    }\r\n      \r\n    if (series[0].setMarkers) {\r\n      series[0].setMarkers(markersDiv.concat(pendingMarkerDiv))\r\n    }\r\n  }\r\n\r\n  if (newMarkerPivot || (pendingMarkerPivot && !newMarkerPivot)) {\r\n      pendingMarkerPivot = newMarkerPivot\r\n    \r\n    if (markersPivot.length > 100) {\r\n        markersPivot.splice(0, 1)\r\n    }\r\n      \r\n    if (series[1].setMarkers) {\r\n      series[1].setMarkers(markersPivot.concat(pendingMarkerPivot))\r\n    }\r\n  }\r\n\r\n  // </markers utils>\r\n}",
          "createdAt": 1705024852358,
          "updatedAt": 1718761221091,
          "options": {
            "priceScaleId": "_v9ix9ggm0looumtf",
            "scaleMargins": {
              "top": 0.58,
              "bottom": 0.11
            },
            "bodyPercentWatch": null,
            "wickRatioThreshold": null,
            "toggleDebug": null,
            "toggleVolumeWick": null,
            "togglePrintNormalObv": null,
            "toggleRefine": null,
            "showDivs": false,
            "pivotLeftLength": 1,
            "pivotRightLength": 1,
            "ppCheck": 3,
            "maxbars": null,
            "togglePivotAgo": false,
            "toggleShowPricePivot": false,
            "DivcolorUp": "rgb(255,241,118)",
            "DivcolorDn": "rgb(255,183,77)",
            "cvdColor": "rgb(255,255,255)",
            "quote": 0,
            "exchange": null,
            "type": "spot",
            "title": "S",
            "visible": true,
            "lineStyle": 0
          },
          "optionsDefinitions": {
            "quote": {
              "default": 0,
              "type": "list",
              "options": [
                null,
                "USD",
                "USDT",
                "TUSD",
                "USDC"
              ],
              "rebuild": true
            },
            "exchange": {
              "default": 0,
              "type": "exchange",
              "rebuild": true
            },
            "type": {
              "default": "perp",
              "type": "list",
              "options": [
                null,
                "spot",
                "perp"
              ],
              "rebuild": true
            }
          },
          "series": [
            "cvd-spot",
            "jeuxhsc2"
          ],
          "displayName": "CVD Spot",
          "unsavedChanges": false
        },
        "_2igv6pxoyngd7bcp": {
          "id": "_2igv6pxoyngd7bcp",
          "libraryId": "cvd-divs-pivot",
          "name": "CVD Perp",
          "script": "if (pivotsMax === 0) {\r\n  // Source\r\n  quote = option(default=null,type=list,options=[null, \"USD\", \"USDT\", \"TUSD\", \"USDC\"],rebuild=true)\r\n  exchange = option(default=null,type=exchange,rebuild=true)\r\n  type = option(default=perp,type=list,options=[null, \"spot\", \"perp\"],rebuild=true)\r\n  \r\n  // Pivots\r\n  pivotsMax = 20\r\n  phPositions = []\r\n  plPositions = []\r\n  phVals = []\r\n  plVals = []\r\n}\r\n\r\nbuyVolume = source(vbuy, quote=quote,type=type,exchange=exchange)\r\nsellVolume = source(vsell, quote=quote,type=type,exchange=exchange)\r\n\r\ncvd = cum(buyVolume - sellVolume)\r\n\r\nplotline(cvd, title=options.title || \"CVD\", color=options.cvdColor)\r\n\r\nif( options.toggleShowPricePivot ){\r\n  plotline(cvd, color=transparent)\r\n}\r\n\r\nif (options.showDivs) {\r\n  \r\n  // <markers utils>\r\n  if (markersDiv === 0) {\r\n    markersDiv = []\r\n  }\r\n  if (markersPivot === 0) {\r\n    markersPivot = []\r\n  }\r\n  \r\n  if (pendingMarkerDiv && pendingMarkerDiv.time < time) {\r\n    markersDiv.push(pendingMarkerDiv)\r\n    pendingMarkerDiv = null\r\n  }\r\n\r\n  if (pendingMarkerPivot && pendingMarkerPivot.time < time) {\r\n    markersPivot.push(pendingMarkerPivot)\r\n    pendingMarkerPivot = null\r\n  }\r\n  \r\n  var newMarkerDiv = null\r\n  var newMarkerPivot = null\r\n  // </markers utils>\r\n  \r\n  // Check if we get new Pivot High Or Pivot Low\r\n\r\n  // find pivots low (cvd and price)\r\n  plCvd = pivot_low(cvd, options.pivotLeftLength, options.pivotRightLength)\r\n  plPrice = pivot_low($price.low, options.pivotLeftLength, options.pivotRightLength)\r\n\r\n  // find pivots high (cvd and price)\r\n  phCvd = pivot_high(cvd, options.pivotLeftLength, options.pivotRightLength)\r\n  phPrice = pivot_high($price.high, options.pivotLeftLength, options.pivotRightLength)\r\n  \r\n  if( plPrice ){\r\n    plPositions.unshift(bar.length)\r\n    plVals.unshift(plPrice)\r\n    if( plPositions.length > pivotsMax ){\r\n      plPositions.pop();\r\n      plVals.pop()\r\n    }\r\n\r\n    var foundDiv = false\r\n    var startPoint = 0\r\n    cvd[100] // looks like required to load \r\n    for( var i = 0; i < (options.ppCheck || 10); i++ ){ \r\n      if( i > plPositions.length || plPositions[i] == 0){\r\n        break\r\n      }\r\n      var len = bar.length - plPositions[i] + options.pivotRightLength\r\n      if( len > (options.maxbars || 100)){\r\n        break\r\n      }\r\n      \r\n      // Price lower than previous pivot but CVD is higher\r\n      if( len > 5 && plPrice < (plVals[i] || 0) && cvd > cvd[len]){\r\n         console.log('PL', plPositions[i], len, cvd, cvd[len], $price.high, plVals[i])\r\n         foundDiv = true\r\n\r\n         newMarkerDiv = { \r\n          time: time - (options.pivotRightLength-1) * bar.timeframe,\r\n          color: options.DivcolorUp,\r\n          position: 'belowBar',\r\n          //shape: 'arrowDown',\r\n          text: '▲' + (options.togglePivotAgo ? i : '')\r\n        }\r\n        break\r\n      }\r\n    }\r\n\r\n    if( !foundDiv && options.toggleShowPricePivot){\r\n      newMarkerPivot = {\r\n          time: time - (options.pivotRightLength-1) * bar.timeframe,\r\n          color: options.DivcolorUp,\r\n          position: 'belowBar',\r\n          //shape: 'arrowUp',\r\n          text:  'L'\r\n        }\r\n    }\r\n  }\r\n\r\n  if( phPrice ){\r\n \r\n    phPositions.unshift(bar.length)\r\n    phVals.unshift(phPrice)\r\n    if( phPositions.length > pivotsMax ){\r\n      phPositions.pop();\r\n      phVals.pop()\r\n    }\r\n\r\n    var foundDiv = false\r\n    var startPoint = 0\r\n    cvd[100] // looks like required to load \r\n    for( var i = 0; i < (options.ppCheck || 10); i++ ){ \r\n      if( i > phPositions.length || phPositions[i] == 0){\r\n        break\r\n      }\r\n      var len = bar.length - phPositions[i] + options.pivotRightLength\r\n      if( len > (options.maxbars || 100)){\r\n        break\r\n      }\r\n\r\n      // Price greater than previous pivot but CVD lower\r\n      if( len > 5 && phPrice > (phVals[i] || Infinity) && cvd < cvd[len]){\r\n         console.log('PH', phPositions[i], len, cvd, cvd[len], $price.high, phVals[i])\r\n        foundDiv = true\r\n         newMarkerDiv = { \r\n          time: time - (options.pivotRightLength-1) * bar.timeframe,\r\n          color: options.DivcolorDn,\r\n          position: 'aboveBar',\r\n          //shape: 'arrowDown',\r\n          text: '▼' + (options.togglePivotAgo ? i : '')\r\n        }\r\n        break\r\n      }\r\n    }\r\n\r\n    if( !foundDiv  && options.toggleShowPricePivot ){\r\n        newMarkerPivot = { \r\n            time: time - (options.pivotRightLength-1) * bar.timeframe,\r\n            color: options.DivcolorDn,\r\n            position: 'aboveBar',\r\n            //shape: 'arrowDown',\r\n            text: 'H'\r\n          }\r\n    }\r\n  }\r\n  \r\n  // <markers utils>\r\n  if (newMarkerDiv || (pendingMarkerDiv && !newMarkerDiv)) {\r\n      pendingMarkerDiv = newMarkerDiv\r\n    \r\n    if (markersDiv.length > 100) {\r\n        markersDiv.splice(0, 1)\r\n    }\r\n      \r\n    if (series[0].setMarkers) {\r\n      series[0].setMarkers(markersDiv.concat(pendingMarkerDiv))\r\n    }\r\n  }\r\n\r\n  if (newMarkerPivot || (pendingMarkerPivot && !newMarkerPivot)) {\r\n      pendingMarkerPivot = newMarkerPivot\r\n    \r\n    if (markersPivot.length > 100) {\r\n        markersPivot.splice(0, 1)\r\n    }\r\n      \r\n    if (series[1].setMarkers) {\r\n      series[1].setMarkers(markersPivot.concat(pendingMarkerPivot))\r\n    }\r\n  }\r\n\r\n  // </markers utils>\r\n}",
          "createdAt": 1705023113627,
          "updatedAt": 1718761240539,
          "options": {
            "priceScaleId": "_ilwzivhp75r7wuat",
            "scaleMargins": {
              "top": 0.58,
              "bottom": 0.1
            },
            "bodyPercentWatch": null,
            "wickRatioThreshold": null,
            "toggleDebug": null,
            "toggleVolumeWick": null,
            "togglePrintNormalObv": null,
            "toggleRefine": null,
            "showDivs": false,
            "pivotLeftLength": 1,
            "pivotRightLength": 1,
            "ppCheck": 3,
            "maxbars": null,
            "togglePivotAgo": false,
            "toggleShowPricePivot": false,
            "DivcolorUp": "rgb(91,156,246)",
            "DivcolorDn": "rgb(149,117,205)",
            "cvdColor": "rgb(41,98,255)",
            "quote": 0,
            "exchange": null,
            "type": "perp",
            "title": "P",
            "visible": true,
            "lastValueVisible": true,
            "priceFormat": {
              "type": "volume",
              "precision": 2,
              "minMove": 0.01,
              "auto": true
            }
          },
          "optionsDefinitions": {
            "quote": {
              "default": 0,
              "type": "list",
              "options": [
                null,
                "USD",
                "USDT",
                "TUSD",
                "USDC"
              ],
              "rebuild": true
            },
            "exchange": {
              "default": 0,
              "type": "exchange",
              "rebuild": true
            },
            "type": {
              "default": "perp",
              "type": "list",
              "options": [
                null,
                "spot",
                "perp"
              ],
              "rebuild": true
            }
          },
          "series": [
            "cvd-divs-pivot",
            "cgm9cztz"
          ],
          "displayName": "CVD Perp",
          "unsavedChanges": false
        },
        "_djy96lh1n2lgbq2p": {
          "id": "_djy96lh1n2lgbq2p",
          "libraryId": "volume-s",
          "name": "Volume S",
          "description": "Volume + delta",
          "script": "if (upColor === 0) {\r\n  if (options.showDelta) {\r\n    upColor = options.upBgColor\r\n    downColor = options.downBgColor\r\n  } else {\r\n    upColor = options.upColor\r\n    downColor = options.downColor\r\n  }\r\n}\r\n\r\nvar _vbuy = source(vbuy, type=spot)\r\nvar _vsell = source(vsell, type=spot)\r\n\r\nif (options.showDelta) {\r\n  plothistogram({ time: time, value: Math.abs(_vbuy-_vsell), color: _vbuy - _vsell > 0 ? options.upColor : options.downColor})\r\n}\r\n\r\nif ( (options.showBoth || false) == true ) {\r\n  plothistogram({ time: time, value: _vbuy + _vsell, color: _vbuy > _vsell ? upColor : downColor })\r\n}",
          "createdAt": 1705358637875,
          "updatedAt": 1705358769754,
          "options": {
            "priceScaleId": "_djy96lh1n2lgbq2p",
            "priceFormat": {
              "type": "volume"
            },
            "upColor": "rgb(76,175,80)",
            "downColor": "rgb(242,54,69)",
            "scaleMargins": {
              "top": 0.73,
              "bottom": 0.15
            },
            "showDelta": true,
            "upBgColor": "rgba(178,181,190,0.33)",
            "downBgColor": "rgba(93,96,107,0.38)",
            "visible": false,
            "lastValueVisible": true,
            "color": "rgba(195,168,122,0.54)",
            "showDeltaOnly": true,
            "showBoth": false
          },
          "optionsDefinitions": {},
          "series": [
            "volume-s",
            "wxyyqcjg"
          ],
          "displayName": "Volume S",
          "unsavedChanges": true
        },
        "_6m86thjnc4nkz9c4": {
          "id": "_6m86thjnc4nkz9c4",
          "libraryId": "rsi1",
          "name": "RSI",
          "script": "src = ($price.high + $price.low + $price.close) / 3\r\nvolume=vbuy+vsell\r\nchange=src-src[1]\r\nupper = sum(vbuy * (change <= 0 ? 0 : src), 14)\r\nlower = sum(vsell * (change >= 0 ? 0 : src), 14)\r\nmf = !lower ? null : 100 - (100 / (1 + upper / lower))\r\nplotline(mf, color=#459915)\r\nplotline(80, color=#c0c0c0, lineStyle=3)\r\nplotline(20, color=#c0c0c0, lineStyle=3)",
          "createdAt": 1703905877742,
          "updatedAt": 1705375116020,
          "options": {
            "priceScaleId": "rsi",
            "scaleMargins": {
              "top": 0.86,
              "bottom": 0.06
            },
            "visible": false
          },
          "optionsDefinitions": {},
          "series": [
            "rsi1",
            "7gmvcbtd",
            "ghl75yur"
          ],
          "displayName": "RSI",
          "unsavedChanges": false
        },
        "_tdqicpndr092c1gk": {
          "id": "_tdqicpndr092c1gk",
          "libraryId": "oi",
          "name": "OI",
          "script": "src = { sources: { \"ORDERBOOK:AGGROI-BTCUSD\":ORDERBOOK:AGGROI-BTCUSD }, localTimestamp: time }\r\n\r\nvar ohlc = options.useHeikinAshi ? avg_heikinashi(src) : options.useGaps ? avg_ohlc_with_gaps(src) : avg_ohlc(src)\r\n\r\nplotcandlestick(ohlc, id=price)",
          "createdAt": 1705463203632,
          "updatedAt": 1705463344481,
          "options": {
            "priceScaleId": "_tdqicpndr092c1gk",
            "priceFormat": {
              "type": "volume",
              "precision": 2,
              "minMove": 0.01,
              "auto": true
            },
            "priceLineVisible": false,
            "lastValueVisible": false,
            "borderVisible": false,
            "upColor": "rgba(255,235,59,0.52)",
            "downColor": "rgba(242,54,69,0.64)",
            "borderUpColor": "rgba(255,245,157,0.66)",
            "borderDownColor": "rgba(178,40,51,0.52)",
            "wickUpColor": "rgb(223,211,144)",
            "wickDownColor": "rgba(239,67,82,0.47)",
            "useGaps": false,
            "useHeikinAshi": false,
            "scaleMargins": {
              "top": 0.02,
              "bottom": 0.88
            },
            "visible": true
          },
          "optionsDefinitions": {},
          "series": [
            "price2"
          ],
          "displayName": "OI",
          "unsavedChanges": false
        },
        "_ahi4uciufxckpxg0": {
          "id": "_ahi4uciufxckpxg0",
          "libraryId": "bids-asks-p",
          "name": "Bids Asks P",
          "description": null,
          "script": "if (!pendingMarkers) {\r\n    // runs only once\r\n    pendingMarkers = []\r\n\r\n    showType = {\r\n      spot: options.toggleSpot,\r\n      perp: options.togglePerp,\r\n      binance: options.toggleBinance,\r\n      coinbase: options.toggleCoinbase,\r\n      bitmex: options.toggleBitmex,\r\n      binancefuture: options.toggleBinanceFuture\r\n    }\r\n\r\n    toAdd = [\r\n        options.toggleBand1 || false,\r\n        options.toggleBand2 || false,\r\n        options.toggleBand3 || false,\r\n        options.toggleBand4 || false,\r\n    ]\r\n}\r\n// </STARTUP SCRIPT> \r\nvar bidsPerp = ORDERBOOK:AGGRPERP-BTCUSD.zbids\r\nvar asksPerp = ORDERBOOK:AGGRPERP-BTCUSD.zasks\r\nvar bidsSpot = ORDERBOOK:AGGRSPOT-BTCUSD.zbids \r\nvar asksSpot = ORDERBOOK:AGGRSPOT-BTCUSD.zasks \r\nvar bidsBinance = renderer.sources['ORDERBOOK:BINANCE-BTCUSDT'] && renderer.sources['ORDERBOOK:BINANCE-BTCUSDT'].zbids\r\nvar asksBinance = renderer.sources['ORDERBOOK:BINANCE-BTCUSDT'] && renderer.sources['ORDERBOOK:BINANCE-BTCUSDT'].zasks\r\nvar bidsCoinbase = renderer.sources['ORDERBOOK:COINBASE-BTCUSD'] && renderer.sources['ORDERBOOK:COINBASE-BTCUSD'].zbids\r\nvar asksCoinbase = renderer.sources['ORDERBOOK:COINBASE-BTCUSD'] && renderer.sources['ORDERBOOK:COINBASE-BTCUSD'].zasks\r\nvar bidsBitmex = renderer.sources['ORDERBOOK:BITMEX-XBTUSD'] && renderer.sources['ORDERBOOK:BITMEX-XBTUSD'].zbids\r\nvar asksBitmex = renderer.sources['ORDERBOOK:BITMEX-XBTUSD'] && renderer.sources['ORDERBOOK:BITMEX-XBTUSD'].zasks\r\nvar bidsBf = renderer.sources['ORDERBOOK:BINANCEFUTURES-BTCUSDT'] && renderer.sources['ORDERBOOK:BINANCEFUTURES-BTCUSDT'].zbids\r\nvar asksBf = renderer.sources['ORDERBOOK:BINANCEFUTURES-BTCUSDT'] && renderer.sources['ORDERBOOK:BINANCEFUTURES-BTCUSDT'].zasks\r\n\r\nvar m = [\r\n    { which: 'perp', bids: bidsPerp || [], asks: asksPerp || [] },\r\n    { which: 'spot', bids: bidsSpot || [], asks: asksSpot || [] },\r\n    { which: 'binance', bids: bidsBinance || [], asks: asksBinance || [] },\r\n    { which: 'coinbase', bids: bidsCoinbase || [], asks: asksCoinbase || [] },\r\n    { which: 'bitmex', bids: bidsBitmex || [], asks: asksBitmex || [] },\r\n     { which: 'binancefuture', bids: bidsBf || [], asks: asksBf || [] }\r\n];\r\n\r\nvar _bids = 0\r\nvar _asks = 0\r\n\r\nfor(let typeIndex = 0; typeIndex < m.length; typeIndex++){\r\n\r\n    var c = m[typeIndex]\r\n\r\n    if( showType[c.which]  === false ){\r\n      continue\r\n    }\r\n\r\n    for(let i = 0; i < 4; i++){\r\n        if( toAdd[i] === true ){\r\n            _bids += c.bids[i] || 0\r\n            _asks += c.asks[i] || 0\r\n        }\r\n    }\r\n}\r\n// cloudarea(lowerValue: number, higherValue: number)\r\n// - `higherValue` (`number`) - the value of the item which is expected to be higher (default: green line)\r\n// - `lowerValue` (`number`) - the value of the item which is expected to be lower (default: red line)\r\nplotcloudarea(_asks, _bids, positiveColor=options.positiveColor,  negativeColor=options.negativeColor,  higherLineColor=options.positiveLineColor, lowerLineColor=options.negativeLineColor)",
          "createdAt": 1703182792738,
          "updatedAt": 1710281105219,
          "options": {
            "priceScaleId": "bids-asks",
            "scaleMargins": {
              "top": 0.56,
              "bottom": 0.24
            },
            "togglePerp": true,
            "toggleSpot": false,
            "toggleBinance": false,
            "toggleC": null,
            "toggleRatio0": null,
            "toggleRatio1": null,
            "toggleRatio2": null,
            "toggleRatio3": null,
            "toggleCoinbase": false,
            "toggleBitmex": false,
            "toggleBand1": true,
            "toggleBand2": false,
            "toggleBand3": false,
            "toggleBand4": false,
            "lastValueVisible": true,
            "priceFormat": {
              "type": "volume",
              "precision": 2,
              "minMove": 0.01,
              "auto": true
            },
            "visible": false,
            "toggleBinanceFuture": false
          },
          "optionsDefinitions": {},
          "series": [
            "bids-asks-p"
          ],
          "displayName": "Bids Asks P",
          "unsavedChanges": false
        },
        "_fbb1pk08gwhpg9s6": {
          "id": "_fbb1pk08gwhpg9s6",
          "libraryId": "ls",
          "name": "LS",
          "script": "line(ORDERBOOK:AGGRLS-BTCUSD.price)",
          "createdAt": 1705956281484,
          "updatedAt": 1705956281484,
          "options": {
            "priceScaleId": "_s5m8wbbdhz2oi1cs",
            "scaleMargins": {
              "top": 0.62,
              "bottom": 0.08
            },
            "priceFormat": {
              "type": "volume",
              "precision": 2,
              "minMove": 0.01,
              "auto": true
            },
            "lastValueVisible": true,
            "visible": true,
            "priceLineVisible": false,
            "lineStyle": 4,
            "lineType": 1,
            "baseLineVisible": false,
            "toggleShowLegend": null
          },
          "optionsDefinitions": {},
          "series": [
            "ls"
          ],
          "displayName": "LS",
          "unsavedChanges": false
        },
        "_ew4jjnk3b776byg2": {
          "id": "_ew4jjnk3b776byg2",
          "libraryId": "bids-asks-s",
          "name": "Bids Asks S",
          "description": null,
          "script": "if (!pendingMarkers) {\r\n    // runs only once\r\n    pendingMarkers = []\r\n\r\n    showType = {\r\n      spot: options.toggleSpot,\r\n      perp: options.togglePerp,\r\n      binance: options.toggleBinance,\r\n      coinbase: options.toggleCoinbase,\r\n      bitmex: options.toggleBitmex\r\n    }\r\n\r\n    toAdd = [\r\n        options.toggleBand1 || false,\r\n        options.toggleBand2 || false,\r\n        options.toggleBand3 || false,\r\n        options.toggleBand4 || false,\r\n    ]\r\n}\r\n// </STARTUP SCRIPT> \r\nvar bidsPerp = ORDERBOOK:AGGRPERP-BTCUSD.zbids\r\nvar asksPerp = ORDERBOOK:AGGRPERP-BTCUSD.zasks\r\nvar bidsSpot = ORDERBOOK:AGGRSPOT-BTCUSD.zbids \r\nvar asksSpot = ORDERBOOK:AGGRSPOT-BTCUSD.zasks \r\nvar bidsBinance = renderer.sources['ORDERBOOK:BINANCE-BTCUSDT'] && renderer.sources['ORDERBOOK:BINANCE-BTCUSDT'].zbids\r\nvar asksBinance = renderer.sources['ORDERBOOK:BINANCE-BTCUSDT'] && renderer.sources['ORDERBOOK:BINANCE-BTCUSDT'].zasks\r\nvar bidsCoinbase = renderer.sources['ORDERBOOK:COINBASE-BTCUSD'] && renderer.sources['ORDERBOOK:COINBASE-BTCUSD'].zbids\r\nvar asksCoinbase = renderer.sources['ORDERBOOK:COINBASE-BTCUSD'] && renderer.sources['ORDERBOOK:COINBASE-BTCUSD'].zasks\r\nvar bidsBitmex = renderer.sources['ORDERBOOK:BITMEX-XBTUSD'] && renderer.sources['ORDERBOOK:BITMEX-XBTUSD'].zbids\r\nvar asksBitmex = renderer.sources['ORDERBOOK:BITMEX-XBTUSD'] && renderer.sources['ORDERBOOK:BITMEX-XBTUSD'].zasks\r\n\r\nvar m = [\r\n    { which: 'perp', bids: bidsPerp || [], asks: asksPerp || [] },\r\n    { which: 'spot', bids: bidsSpot || [], asks: asksSpot || [] },\r\n    { which: 'binance', bids: bidsBinance || [], asks: asksBinance || [] },\r\n    { which: 'coinbase', bids: bidsCoinbase || [], asks: asksCoinbase || [] },\r\n    { which: 'bitmex', bids: bidsBitmex || [], asks: asksBitmex || [] }\r\n];\r\n\r\nvar _bids = 0\r\nvar _asks = 0\r\n\r\nfor(let typeIndex = 0; typeIndex < m.length; typeIndex++){\r\n\r\n    var c = m[typeIndex]\r\n\r\n    if( showType[c.which]  === false ){\r\n      continue\r\n    }\r\n\r\n    for(let i = 0; i < 4; i++){\r\n        if( toAdd[i] === true ){\r\n            _bids += c.bids[i] || 0\r\n            _asks += c.asks[i] || 0\r\n        }\r\n    }\r\n}\r\nplotcloudarea(_bids, _asks, positiveColor=options.positiveColor,  negativeColor=options.negativeColor,  higherLineColor=options.positiveLineColor, lowerLineColor=options.negativeLineColor)",
          "createdAt": 1703182792738,
          "updatedAt": 1710195087995,
          "options": {
            "priceScaleId": "_ew4jjnk3b776byg2",
            "scaleMargins": {
              "top": 0,
              "bottom": 0.88
            },
            "togglePerp": false,
            "toggleSpot": false,
            "toggleBinance": true,
            "toggleC": null,
            "toggleRatio0": null,
            "toggleRatio1": null,
            "toggleRatio2": null,
            "toggleRatio3": null,
            "toggleCoinbase": true,
            "toggleBitmex": false,
            "toggleBand1": true,
            "toggleBand2": false,
            "toggleBand3": false,
            "toggleBand4": false,
            "lastValueVisible": true,
            "priceFormat": {
              "type": "volume",
              "precision": 2,
              "minMove": 0.01,
              "auto": true
            },
            "visible": false
          },
          "optionsDefinitions": {},
          "series": [
            "bids-asks-s"
          ],
          "displayName": "Bids Asks S",
          "unsavedChanges": true
        }
      },
      "indicatorOrder": [
        "cvd",
        "liquidations",
        "price",
        "volume",
        "volume-copy-1",
        "ob-speed",
        "single-bar-delta-divergence",
        "_yxlh1nkvavyg5sv3",
        "_c18azdwcxihp6302",
        "_2igv6pxoyngd7bcp",
        "_djy96lh1n2lgbq2p",
        "_tdqicpndr092c1gk",
        "_ahi4uciufxckpxg0",
        "_6m86thjnc4nkz9c4",
        "_fbb1pk08gwhpg9s6",
        "_ew4jjnk3b776byg2"
      ],
      "priceScales": {
        "right": {
          "scaleMargins": {
            "top": 0.12,
            "bottom": 0.43
          },
          "priceFormat": {
            "precision": 1,
            "minMove": 0.1
          },
          "indicators": [
            "Price"
          ]
        },
        "cvd": {
          "scaleMargins": {
            "top": 0.07,
            "bottom": 0.51
          },
          "indicators": [
            "CVD"
          ]
        },
        "volume_liquidations": {
          "scaleMargins": {
            "top": 0,
            "bottom": 0.96
          }
        },
        "volume": {
          "scaleMargins": {
            "top": 0.67,
            "bottom": 0
          },
          "indicators": [
            "Volume copy 1"
          ]
        },
        "bids-asks-total": {
          "scaleMargins": {
            "top": 0.09,
            "bottom": 0.06
          }
        },
        "binance-bands": {
          "scaleMargins": {
            "top": 0,
            "bottom": 0.67
          },
          "indicators": [
            "binance bands"
          ]
        },
        "binance-bands-copy-1": {
          "scaleMargins": {
            "top": 0.33,
            "bottom": 0.34
          },
          "indicators": [
            "binance bands copy 1"
          ]
        },
        "binance-bands-copy-2": {
          "scaleMargins": {
            "top": 0.67,
            "bottom": 0
          },
          "indicators": [
            "binance bands copy 2"
          ]
        },
        "ob-speed": {
          "scaleMargins": {
            "top": 0.83,
            "bottom": 0
          },
          "indicators": [
            "OB speed"
          ]
        },
        "delta-divergence": {
          "scaleMargins": {
            "top": 0.1,
            "bottom": 0.2
          },
          "indicators": [
            "Single Bar Delta Divergence"
          ]
        },
        "single-bar-delta-divergence": {
          "scaleMargins": {
            "top": 0.03,
            "bottom": 0.17
          },
          "indicators": [
            "Single Bar Delta Divergence"
          ]
        },
        "left": {
          "priceFormat": {
            "type": "percent",
            "precision": 2,
            "minMove": 0.01,
            "auto": false
          },
          "indicators": [
            "Single Bar Delta Divergence"
          ]
        },
        "trades": {
          "scaleMargins": {
            "top": 0,
            "bottom": 0.88
          },
          "indicators": [
            "trades"
          ]
        },
        "_v9ix9ggm0looumtf": {
          "scaleMargins": {
            "top": 0.58,
            "bottom": 0.11
          },
          "indicators": [
            "CVD Spot"
          ]
        },
        "_ilwzivhp75r7wuat": {
          "scaleMargins": {
            "top": 0.58,
            "bottom": 0.1
          },
          "indicators": [
            "CVD Perp"
          ],
          "priceFormat": {
            "type": "volume",
            "precision": 2,
            "minMove": 0.01,
            "auto": true
          }
        },
        "ctd": {
          "scaleMargins": {
            "top": 0.75,
            "bottom": 0.17
          }
        },
        "_djy96lh1n2lgbq2p": {
          "scaleMargins": {
            "top": 0.73,
            "bottom": 0.15
          },
          "indicators": [
            "Volume S"
          ]
        },
        "rsi": {
          "scaleMargins": {
            "top": 0.86,
            "bottom": 0.06
          },
          "indicators": [
            "RSI"
          ]
        },
        "_tdqicpndr092c1gk": {
          "scaleMargins": {
            "top": 0.76,
            "bottom": 0.14
          },
          "indicators": [
            "OI"
          ],
          "priceFormat": {
            "type": "volume",
            "precision": 2,
            "minMove": 0.01,
            "auto": true
          }
        },
        "bids-asks": {
          "scaleMargins": {
            "top": 0.56,
            "bottom": 0.24
          },
          "indicators": [
            "Bids Asks P"
          ]
        },
        "_fbb1pk08gwhpg9s6": {
          "scaleMargins": {
            "top": 0.75,
            "bottom": 0.12
          },
          "indicators": [
            "LS"
          ]
        },
        "_ew4jjnk3b776byg2": {
          "scaleMargins": {
            "top": 0,
            "bottom": 0.88
          },
          "indicators": [
            "Bids Asks S"
          ]
        },
        "_zutos8s4mda6l4nl": {
          "scaleMargins": {
            "top": 0.25,
            "bottom": 0.63
          }
        },
        "_s5m8wbbdhz2oi1cs": {
          "scaleMargins": {
            "top": 0.1,
            "bottom": 0.2
          }
        }
      },
      "layouting": false,
      "showIndicators": true,
      "timeframe": "20000000v",
      "refreshRate": 500,
      "showAlerts": true,
      "showAlertsLabel": true,
      "showLegend": true,
      "fillGapsWithEmpty": true,
      "showHorizontalGridlines": true,
      "horizontalGridlinesColor": "rgba(255,255,255,.1)",
      "showVerticalGridlines": false,
      "verticalGridlinesColor": "rgba(255,255,255,.1)",
      "showWatermark": false,
      "watermarkColor": "rgba(255,255,255,.1)",
      "showBorder": true,
      "borderColor": null,
      "textColor": null,
      "showLeftScale": false,
      "showRightScale": true,
      "showTimeScale": true,
      "hiddenMarkets": {},
      "barSpacing": 1.974673812428346,
      "_id": "chart copy 3",
      "navigationState": {
        "tab": "options",
        "optionsQuery": "",
        "fontSizePx": 14
      }
    },
    "trades": {
      "liquidations": [
        {
          "id": "liquidation_threshold",
          "amount": 220331.5,
          "buyColor": "rgba(236,64,122,0.5)",
          "sellColor": "rgba(255,152,0,0.5)",
          "buyAudio": "var srqtR = Math.min(1, gain / 4)\nplay(329.63, srqtR, srqtR*2,0,,,'sine')\nplay(329.63, srqtR, srqtR*4,0.08,,,'sine')",
          "sellAudio": "var srqtR = Math.min(1, gain / 6)\nplay(440, srqtR, srqtR*2,0,,,'sine')\nplay(440, srqtR, srqtR*4,0.08,,,'sine')"
        },
        {
          "id": "liquidation_significant",
          "amount": 734439.7,
          "buyColor": "rgba(236,64,122,0.6)",
          "sellColor": "rgba(255,152,0,0.7)",
          "buyAudio": "var srqtR = Math.min(1, gain / 4)\nplay(329.63, srqtR, srqtR*4,0,,,'sine')\nplay(329.63, srqtR, srqtR*6,0.08,,,'sine')",
          "sellAudio": "var srqtR = Math.min(1, gain / 6)\nplay(440, srqtR, srqtR*4,0,,,'sine')\nplay(440, srqtR, srqtR*6,0.08,,,'sine')"
        },
        {
          "id": "liquidation_huge",
          "amount": 1468880,
          "buyGif": "flying money",
          "sellGif": "flying money",
          "buyColor": "rgba(236,64,122,0.7)",
          "sellColor": "rgba(255,152,0,0.8)",
          "buyAudio": "var srqtR = Math.min(1, gain / 4)\nplay(329.63, srqtR, srqtR*4,0,,,'sine')\nplay(329.63, srqtR, srqtR*8,0.08,,,'sine')",
          "sellAudio": "var srqtR = Math.min(1, gain / 6)\nplay(440, srqtR, srqtR*4,0,,,'sine')\nplay(440, srqtR, srqtR*8,0.08,,,'sine')"
        },
        {
          "id": "liquidation_rare",
          "amount": 2203319.4,
          "buyGif": "explosion",
          "sellGif": "explosion",
          "buyColor": "rgb(156,39,176)",
          "sellColor": "rgb(255,235,59)",
          "buyAudio": "var srqtR = Math.min(1, gain / 10)\nplay(329.63, srqtR, 1,0,,,'sine')\nplay(329.63, srqtR, srqtR*10,0.08,,,'sine')",
          "sellAudio": "var srqtR = Math.min(1, gain / 10)\nplay(440, srqtR, 1,0,,,'sine')\nplay(440, srqtR, srqtR*10,0.08,,,'sine')"
        }
      ],
      "thresholds": [
        {
          "id": "threshold",
          "amount": 367220.8,
          "buyColor": "rgba(119, 148, 92, 0.25)",
          "sellColor": "rgba(239, 67, 82, 0.25)",
          "buyAudio": "play(659.26, gain / 10, 0.1 + gain / 7)",
          "sellAudio": "play(493.88, gain * 1.5 / 10, 0.1 + gain / 7)"
        },
        {
          "id": "significant",
          "amount": 734439.7,
          "buyColor": "rgb(100, 157, 102)",
          "sellColor": "rgb(239, 67, 82)",
          "buyAudio": "play(659.26, 0.05 + gain / 10, 0.2 + ratio * 0.23,0,,0); play(830.6, 0.05 + gain / 10, 0.2 + ratio * 0.23, 0.08,,0)",
          "sellAudio": "play(493.88, 0.05 + gain * 1.5 / 10, 0.2 + ratio * 0.23,0,,0); play(392, 0.05 + gain * 1.5 / 10, 0.2 + ratio * 0.23, 0.08,,0)"
        },
        {
          "id": "huge",
          "amount": 2203319.4,
          "buyGif": "cash bullish",
          "sellGif": "cash bearish",
          "buyColor": "rgb(59, 202, 109)",
          "sellColor": "rgb(235, 30, 47)",
          "buyAudio": "play(659.26, 0.05 + gain / 25, 0.1 + ratio * 0.23, 0,,0); play(830.6, 0.05 + gain / 25, 0.1 + ratio * 0.23, 0.08,,0); play(987.76, 0.05 + gain / 25, 0.1 + ratio * 0.23, 0.16,,0); play(1318.52, 0.05 + gain / 10, 0.1 + ratio * 0.23, 0.24,,0)",
          "sellAudio": "play(493.88, 0.05 + gain / 25, 0.1 + ratio * 0.23, 0,,0); play(369.99, 0.05 + gain * 1.5 / 10, 0.2, 0.08,,0); play(293.66, 0.05 + gain * 1.5 / 10, 0.2, 0.16,,0); play(246.94, 0.05 + gain * 1.5 / 10, 0.1 + ratio * 0.23, 0.24,,0)"
        },
        {
          "id": "rare",
          "amount": 3672199.6,
          "buyGif": "explosion",
          "sellGif": "explosion",
          "buyColor": "rgb(0, 255, 127)",
          "sellColor": "rgb(217, 31, 28)",
          "buyAudio": "play(659.26, 0.05 + gain / 25, 0.1 + ratio * 0.13, 0,,0); play(830.6, 0.05 + gain / 25, 0.1 + ratio * 0.13, 0.08,,0); play(987.76, 0.05 + gain / 25, 0.1 + ratio * 0.13, 0.16,,0); play(1318.52, 0.05 + gain / 10, 0.1 + ratio * 0.13, 0.24,,0)",
          "sellAudio": "play(493.88, 0.05 + gain / 25, 0.1 + ratio * 0.13, 0,,0); play(369.99, 0.05 + gain * 1.5 / 10, 0.2, 0.08,,0); play(293.66, 0.05 + gain * 1.5 / 10, 0.2, 0.16,,0); play(246.94, 0.05 + gain * 1.5 / 10, 0.1 + ratio * 0.13, 0.24,,0)"
        }
      ],
      "audioThreshold": null,
      "multipliers": {},
      "maxRows": 100,
      "muted": false,
      "audioPitch": null,
      "audioVolume": null,
      "showPairs": false,
      "showTrades": true,
      "showLiquidations": true,
      "showLogos": true,
      "monochromeLogos": false,
      "showTimeAgo": true,
      "showPrices": true,
      "showHistograms": true,
      "thresholdsMultipler": 1.77,
      "showAvgPrice": false,
      "_id": "trades"
    },
    "website copy 1": {
      "url": "http://localhost:3000/api/orderbook/ratios/mini/BTC",
      "reloadTimer": "10s",
      "interactive": true,
      "invert": false,
      "locked": false,
      "_id": "website copy 1"
    },
    "prices": {
      "animateSort": false,
      "showPairs": false,
      "showVolume": false,
      "showVolumeDelta": false,
      "period": 0,
      "showChange": false,
      "showPrice": true,
      "sortType": "change",
      "sortOrder": -1,
      "shortSymbols": false,
      "avgPeriods": false,
      "volumeThreshold": 0,
      "_id": "prices"
    },
    "website copy 2": {
      "url": "http://localhost:3000/api/orderbook/ratios/table/BTC",
      "reloadTimer": 0,
      "interactive": false,
      "invert": true,
      "locked": false,
      "_id": "website copy 2"
    },
    "counters": {
      "granularity": 5000,
      "liquidationsOnly": false,
      "steps": [
        60000,
        300000,
        1800000,
        1800000
      ],
      "count": false,
      "_id": "counters"
    },
    "counters copy 1": {
      "granularity": 5000,
      "liquidationsOnly": false,
      "steps": [
        60000,
        300000,
        1800000,
        1800000
      ],
      "count": false,
      "_id": "counters copy 1"
    }
  }
}